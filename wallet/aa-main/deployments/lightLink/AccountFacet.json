{
  "address": "0xFde53272dcd7938d16E031A6989753c321728332",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccountFacet__CallNotSuccessful",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AccountFacet__InitializationFailure",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AccountFacet__InvalidArrayLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AccountFacet__NonExistentVerificationFacet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AccountFacet__RestrictionsFailure",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_initializationContractAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "InitializationFunctionReverted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LibAppStorage__AccountMustBeUninitialized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IEntryPoint",
          "name": "entryPoint",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "ownerPublicKey",
          "type": "bytes"
        }
      ],
      "name": "AccountInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "_diamondCut",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_init",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        }
      ],
      "name": "DiamondCut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "VerificationFailure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "VerificationSuccess",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "entryPoint",
      "outputs": [
        {
          "internalType": "contract IEntryPoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dest",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_func",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_dest",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_value",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_func",
          "type": "bytes[]"
        }
      ],
      "name": "executeBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verificationFacet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_anEntryPoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_facetRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_defaultFallBackHandler",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_ownerPublicKey",
          "type": "bytes"
        }
      ],
      "name": "initialize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "initSuccess",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct UserOperation",
          "name": "userOp",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "userOpHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "missingAccountFunds",
          "type": "uint256"
        }
      ],
      "name": "validateUserOp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "validationData",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9976cce066816a0077462d0bd62d4085ab53bc5093aca054e63f91c7de263ee5",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xd87dF9Fd27B9a30fe27E7b294CaAa4673F34B6b1",
    "contractAddress": "0x0000000000000000000000000000000000000000",
    "transactionIndex": 1,
    "gasUsed": "2370628",
    "logsBloom": "0x
    "blockHash": "0x168b6cd943609d5eca4e931d50aa16e99e6af3e9f92d4e8b2bd6f06f2888d150",
    "transactionHash": "0x9976cce066816a0077462d0bd62d4085ab53bc5093aca054e63f91c7de263ee5",
    "logs": [],
    "blockNumber": 72701535,
    "cumulativeGasUsed": "2370628",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ad34345aa73d96f52b3e14df983b6b29",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccountFacet__CallNotSuccessful\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AccountFacet__InitializationFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AccountFacet__InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AccountFacet__NonExistentVerificationFacet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AccountFacet__RestrictionsFailure\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initializationContractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"InitializationFunctionReverted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LibAppStorage__AccountMustBeUninitialized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IEntryPoint\",\"name\":\"entryPoint\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"ownerPublicKey\",\"type\":\"bytes\"}],\"name\":\"AccountInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"_diamondCut\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_init\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"VerificationFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"VerificationSuccess\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"entryPoint\",\"outputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_func\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_dest\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_value\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_func\",\"type\":\"bytes[]\"}],\"name\":\"executeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verificationFacet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_anEntryPoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_facetRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultFallBackHandler\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_ownerPublicKey\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"initSuccess\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"missingAccountFunds\",\"type\":\"uint256\"}],\"name\":\"validateUserOp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validationData\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"David Yongjun Kim (@Powerstream3604)\",\"details\":\"Account module contract that provides the account features and initialization of signer      compatible with EIP-1271 & EIP-4337\",\"kind\":\"dev\",\"methods\":{\"execute(address,uint256,bytes)\":{\"details\":\"This method executes the calldata coming from the EntryPoint.      Barz will make a call to this function for majority of typical execution(e.g. Swap, Token Transfer)\",\"params\":{\"_dest\":\"Address of destination where the call will be forwarded to\",\"_func\":\"Bytes of calldata to execute in the destination address\",\"_value\":\"Amount of native coin the owner is willing to send(e.g. ETH, BNB)\"}},\"executeBatch(address[],uint256[],bytes[])\":{\"details\":\"This method batch executes the calldata coming from the EntryPoint.      Barz will make a call to this function for majority of typical execution(e.g. Swap, Token Transfer)\",\"params\":{\"_dest\":\"Array of addresses of destination where the call will be forwarded to\",\"_func\":\"Array of bytes of calldata to execute in the destination address\",\"_value\":\"Array of amount of native coin the owner is willing to send(e.g. ETH, BNB)\"}},\"initialize(address,address,address,address,bytes)\":{\"details\":\"This method can only be called during the initialization or signature migration.      If the proxy contract was created without initialization, anyone can call initialize.      Barz calls initialize in constructor in an atomic transaction during deployment\",\"params\":{\"_anEntryPoint\":\"Entrypoint contract defined in EIP-4337 handling the flow of UserOp\",\"_defaultFallBackHandler\":\"Middleware contract for default facets\",\"_facetRegistry\":\"Registry of Facets that hold all facet information\",\"_ownerPublicKey\":\"Bytes of owner public key\",\"_verificationFacet\":\"Facet contract handling the verificationi\"}}},\"title\":\"Account Facet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"This constructor ensures that this contract can only be used as singleton for Proxy contracts\"},\"entryPoint()\":{\"notice\":\"Returns the address of EntryPoint contract registered to Barz account\"},\"execute(address,uint256,bytes)\":{\"notice\":\"Calls the destination with inputted calldata and value from EntryPoint\"},\"executeBatch(address[],uint256[],bytes[])\":{\"notice\":\"Batch calls the destination with inputted calldata and value from EntryPoint\"},\"getNonce()\":{\"notice\":\"Return the account nonce. This method returns the next sequential nonce. For a nonce of a specific key, use `entrypoint.getNonce(account, key)`\"},\"initialize(address,address,address,address,bytes)\":{\"notice\":\"Initializes the initial storage of the Barz contract.\"},\"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)\":{\"notice\":\"Validate user's signature and nonce. subclass doesn't need to override this method. Instead, it should override the specific internal validation methods.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/AccountFacet.sol\":\"AccountFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/aa-4337/core/BaseAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.21;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-empty-blocks */\\n\\nimport \\\"../interfaces/IAccount.sol\\\";\\nimport \\\"../interfaces/IEntryPoint.sol\\\";\\nimport \\\"./Helpers.sol\\\";\\n\\n/**\\n * Basic account implementation.\\n * this contract provides the basic logic for implementing the IAccount interface  - validateUserOp\\n * specific account implementation should inherit it and provide the account-specific logic\\n */\\nabstract contract BaseAccount is IAccount {\\n    using UserOperationLib for UserOperation;\\n\\n    //return value in case of signature failure, with no time-range.\\n    // equivalent to _packValidationData(true,0,0);\\n    uint256 internal constant SIG_VALIDATION_FAILED = 1;\\n\\n    /**\\n     * Return the account nonce.\\n     * This method returns the next sequential nonce.\\n     * For a nonce of a specific key, use `entrypoint.getNonce(account, key)`\\n     */\\n    function getNonce() public view virtual returns (uint256) {\\n        return entryPoint().getNonce(address(this), 0);\\n    }\\n\\n    /**\\n     * return the entryPoint used by this account.\\n     * subclass should return the current entryPoint used by this account.\\n     */\\n    function entryPoint() public view virtual returns (IEntryPoint);\\n\\n    /**\\n     * Validate user's signature and nonce.\\n     * subclass doesn't need to override this method. Instead, it should override the specific internal validation methods.\\n     */\\n    function validateUserOp(\\n        UserOperation calldata userOp,\\n        bytes32 userOpHash,\\n        uint256 missingAccountFunds\\n    ) external virtual override returns (uint256 validationData) {\\n        _requireFromEntryPoint();\\n        validationData = _validateSignature(userOp, userOpHash);\\n        _validateNonce(userOp.nonce);\\n        _payPrefund(missingAccountFunds);\\n    }\\n\\n    /**\\n     * ensure the request comes from the known entrypoint.\\n     */\\n    function _requireFromEntryPoint() internal view virtual {\\n        require(\\n            msg.sender == address(entryPoint()),\\n            \\\"account: not from EntryPoint\\\"\\n        );\\n    }\\n\\n    /**\\n     * validate the signature is valid for this message.\\n     * @param userOp validate the userOp.signature field\\n     * @param userOpHash convenient field: the hash of the request, to check the signature against\\n     *          (also hashes the entrypoint and chain id)\\n     * @return validationData signature and time-range of this operation\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      If the account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function _validateSignature(\\n        UserOperation calldata userOp,\\n        bytes32 userOpHash\\n    ) internal virtual returns (uint256 validationData);\\n\\n    /**\\n     * Validate the nonce of the UserOperation.\\n     * This method may validate the nonce requirement of this account.\\n     * e.g.\\n     * To limit the nonce to use sequenced UserOps only (no \\\"out of order\\\" UserOps):\\n     *      `require(nonce < type(uint64).max)`\\n     * For a hypothetical account that *requires* the nonce to be out-of-order:\\n     *      `require(nonce & type(uint64).max == 0)`\\n     *\\n     * The actual nonce uniqueness is managed by the EntryPoint, and thus no other\\n     * action is needed by the account itself.\\n     *\\n     * @param nonce to validate\\n     *\\n     * solhint-disable-next-line no-empty-blocks\\n     */\\n    function _validateNonce(uint256 nonce) internal view virtual {}\\n\\n    /**\\n     * sends to the entrypoint (msg.sender) the missing funds for this transaction.\\n     * subclass MAY override this method for better funds management\\n     * (e.g. send to the entryPoint more than the minimum required, so that in future transactions\\n     * it will not be required to send again)\\n     * @param missingAccountFunds the minimum value this method should send the entrypoint.\\n     *  this value MAY be zero, in case there is enough deposit, or the userOp has a paymaster.\\n     */\\n    function _payPrefund(uint256 missingAccountFunds) internal virtual {\\n        if (missingAccountFunds != 0) {\\n            (bool success, ) = payable(msg.sender).call{\\n                value: missingAccountFunds,\\n                gas: type(uint256).max\\n            }(\\\"\\\");\\n            (success);\\n            //ignore failure (its EntryPoint's job to verify, not account.)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0dcc386b0f04711db3e394fb50e55a3b3b1a4d19fac1f10895844e1aa4e3d5c\",\"license\":\"GPL-3.0\"},\"contracts/aa-4337/core/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.21;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n/**\\n * returned data from validateUserOp.\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\\n * @param aggregator - address(0) - the account validated the signature by itself.\\n *              address(1) - the account failed to validate the signature.\\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\\n * @param validAfter - this UserOp is valid only after this timestamp.\\n * @param validaUntil - this UserOp is valid only up to this timestamp.\\n */\\nstruct ValidationData {\\n    address aggregator;\\n    uint48 validAfter;\\n    uint48 validUntil;\\n}\\n\\n//extract sigFailed, validAfter, validUntil.\\n// also convert zero validUntil to type(uint48).max\\nfunction _parseValidationData(\\n    uint validationData\\n) pure returns (ValidationData memory data) {\\n    address aggregator = address(uint160(validationData));\\n    uint48 validUntil = uint48(validationData >> 160);\\n    if (validUntil == 0) {\\n        validUntil = type(uint48).max;\\n    }\\n    uint48 validAfter = uint48(validationData >> (48 + 160));\\n    return ValidationData(aggregator, validAfter, validUntil);\\n}\\n\\n// intersect account and paymaster ranges.\\nfunction _intersectTimeRange(\\n    uint256 validationData,\\n    uint256 paymasterValidationData\\n) pure returns (ValidationData memory) {\\n    ValidationData memory accountValidationData = _parseValidationData(\\n        validationData\\n    );\\n    ValidationData memory pmValidationData = _parseValidationData(\\n        paymasterValidationData\\n    );\\n    address aggregator = accountValidationData.aggregator;\\n    if (aggregator == address(0)) {\\n        aggregator = pmValidationData.aggregator;\\n    }\\n    uint48 validAfter = accountValidationData.validAfter;\\n    uint48 validUntil = accountValidationData.validUntil;\\n    uint48 pmValidAfter = pmValidationData.validAfter;\\n    uint48 pmValidUntil = pmValidationData.validUntil;\\n\\n    if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\n    if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\n    return ValidationData(aggregator, validAfter, validUntil);\\n}\\n\\n/**\\n * helper to pack the return value for validateUserOp\\n * @param data - the ValidationData to pack\\n */\\nfunction _packValidationData(\\n    ValidationData memory data\\n) pure returns (uint256) {\\n    return\\n        uint160(data.aggregator) |\\n        (uint256(data.validUntil) << 160) |\\n        (uint256(data.validAfter) << (160 + 48));\\n}\\n\\n/**\\n * helper to pack the return value for validateUserOp, when not using an aggregator\\n * @param sigFailed - true for signature failure, false for success\\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\\n * @param validAfter first timestamp this UserOperation is valid\\n */\\nfunction _packValidationData(\\n    bool sigFailed,\\n    uint48 validUntil,\\n    uint48 validAfter\\n) pure returns (uint256) {\\n    return\\n        (sigFailed ? 1 : 0) |\\n        (uint256(validUntil) << 160) |\\n        (uint256(validAfter) << (160 + 48));\\n}\\n\\n/**\\n * keccak function over calldata.\\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\n */\\nfunction calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\n    assembly {\\n        let mem := mload(0x40)\\n        let len := data.length\\n        calldatacopy(mem, data.offset, len)\\n        ret := keccak256(mem, len)\\n    }\\n}\\n\",\"keccak256\":\"0xa79f06cd158ecb8c0da95493a2f348933b8627a63e228b99738bff3aa107942d\",\"license\":\"GPL-3.0\"},\"contracts/aa-4337/interfaces/IAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\ninterface IAccount {\\n    /**\\n     * Validate user's signature and nonce\\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\\n     * signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\\n     * This allows making a \\\"simulation call\\\" without a valid signature\\n     * Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\\n     *\\n     * @dev Must validate caller is the entryPoint.\\n     *      Must validate the signature and nonce\\n     * @param userOp the operation that is about to be executed.\\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\\n     * @param missingAccountFunds missing funds on the account's deposit in the entrypoint.\\n     *      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\\n     *      The excess is left as a deposit in the entrypoint, for future calls.\\n     *      can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\"\\n     *      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\\n     * @return validationData packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function validateUserOp(\\n        UserOperation calldata userOp,\\n        bytes32 userOpHash,\\n        uint256 missingAccountFunds\\n    ) external returns (uint256 validationData);\\n}\\n\",\"keccak256\":\"0xcbc4b0973cf954c5895b7796335f651fbfcfb55f67dfa789a3d354f8e23c4f2b\",\"license\":\"GPL-3.0\"},\"contracts/aa-4337/interfaces/IAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\n/**\\n * Aggregated Signatures validator.\\n */\\ninterface IAggregator {\\n    /**\\n     * validate aggregated signature.\\n     * revert if the aggregated signature does not match the given list of operations.\\n     */\\n    function validateSignatures(\\n        UserOperation[] calldata userOps,\\n        bytes calldata signature\\n    ) external view;\\n\\n    /**\\n     * validate signature of a single userOp\\n     * This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\\n     * @param userOp the userOperation received from the user.\\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\\n     *    (usually empty, unless account and aggregator support some kind of \\\"multisig\\\"\\n     */\\n    function validateUserOpSignature(\\n        UserOperation calldata userOp\\n    ) external view returns (bytes memory sigForUserOp);\\n\\n    /**\\n     * aggregate multiple signatures into a single value.\\n     * This method is called off-chain to calculate the signature to pass with handleOps()\\n     * bundler MAY use optimized custom code perform this aggregation\\n     * @param userOps array of UserOperations to collect the signatures from.\\n     * @return aggregatedSignature the aggregated signature\\n     */\\n    function aggregateSignatures(\\n        UserOperation[] calldata userOps\\n    ) external view returns (bytes memory aggregatedSignature);\\n}\\n\",\"keccak256\":\"0xdfdcd80568f037716674619b31be630fcd8316262f05a815b41d1e81782c966a\",\"license\":\"GPL-3.0\"},\"contracts/aa-4337/interfaces/IEntryPoint.sol\":{\"content\":\"/**\\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\\n ** Only one instance required on each chain.\\n **/\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport \\\"./UserOperation.sol\\\";\\nimport \\\"./IStakeManager.sol\\\";\\nimport \\\"./IAggregator.sol\\\";\\nimport \\\"./INonceManager.sol\\\";\\n\\ninterface IEntryPoint is IStakeManager, INonceManager {\\n    /***\\n     * An event emitted after each successful request\\n     * @param userOpHash - unique identifier for the request (hash its entire content, except signature).\\n     * @param sender - the account that generates this request.\\n     * @param paymaster - if non-null, the paymaster that pays for this request.\\n     * @param nonce - the nonce value from the request.\\n     * @param success - true if the sender transaction succeeded, false if reverted.\\n     * @param actualGasCost - actual amount paid (by account or paymaster) for this UserOperation.\\n     * @param actualGasUsed - total gas used by this UserOperation (including preVerification, creation, validation and execution).\\n     */\\n    event UserOperationEvent(\\n        bytes32 indexed userOpHash,\\n        address indexed sender,\\n        address indexed paymaster,\\n        uint256 nonce,\\n        bool success,\\n        uint256 actualGasCost,\\n        uint256 actualGasUsed\\n    );\\n\\n    /**\\n     * account \\\"sender\\\" was deployed.\\n     * @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\\n     * @param sender the account that is deployed\\n     * @param factory the factory used to deploy this account (in the initCode)\\n     * @param paymaster the paymaster used by this UserOp\\n     */\\n    event AccountDeployed(\\n        bytes32 indexed userOpHash,\\n        address indexed sender,\\n        address factory,\\n        address paymaster\\n    );\\n\\n    /**\\n     * An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length\\n     * @param userOpHash the request unique identifier.\\n     * @param sender the sender of this request\\n     * @param nonce the nonce used in the request\\n     * @param revertReason - the return bytes from the (reverted) call to \\\"callData\\\".\\n     */\\n    event UserOperationRevertReason(\\n        bytes32 indexed userOpHash,\\n        address indexed sender,\\n        uint256 nonce,\\n        bytes revertReason\\n    );\\n\\n    /**\\n     * an event emitted by handleOps(), before starting the execution loop.\\n     * any event emitted before this event, is part of the validation.\\n     */\\n    event BeforeExecution();\\n\\n    /**\\n     * signature aggregator used by the following UserOperationEvents within this bundle.\\n     */\\n    event SignatureAggregatorChanged(address indexed aggregator);\\n\\n    /**\\n     * a custom revert error of handleOps, to identify the offending op.\\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\\n     *  @param reason - revert reason\\n     *      The string starts with a unique code \\\"AAmn\\\", where \\\"m\\\" is \\\"1\\\" for factory, \\\"2\\\" for account and \\\"3\\\" for paymaster issues,\\n     *      so a failure can be attributed to the correct entity.\\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\\n     */\\n    error FailedOp(uint256 opIndex, string reason);\\n\\n    /**\\n     * error case when a signature aggregator fails to verify the aggregated signature it had created.\\n     */\\n    error SignatureValidationFailed(address aggregator);\\n\\n    /**\\n     * Successful result from simulateValidation.\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     */\\n    error ValidationResult(\\n        ReturnInfo returnInfo,\\n        StakeInfo senderInfo,\\n        StakeInfo factoryInfo,\\n        StakeInfo paymasterInfo\\n    );\\n\\n    /**\\n     * Successful result from simulateValidation, if the account returns a signature aggregator\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     * @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\\n     *      bundler MUST use it to verify the signature, or reject the UserOperation\\n     */\\n    error ValidationResultWithAggregation(\\n        ReturnInfo returnInfo,\\n        StakeInfo senderInfo,\\n        StakeInfo factoryInfo,\\n        StakeInfo paymasterInfo,\\n        AggregatorStakeInfo aggregatorInfo\\n    );\\n\\n    /**\\n     * return value of getSenderAddress\\n     */\\n    error SenderAddressResult(address sender);\\n\\n    /**\\n     * return value of simulateHandleOp\\n     */\\n    error ExecutionResult(\\n        uint256 preOpGas,\\n        uint256 paid,\\n        uint48 validAfter,\\n        uint48 validUntil,\\n        bool targetSuccess,\\n        bytes targetResult\\n    );\\n\\n    //UserOps handled, per aggregator\\n    struct UserOpsPerAggregator {\\n        UserOperation[] userOps;\\n        // aggregator address\\n        IAggregator aggregator;\\n        // aggregated signature\\n        bytes signature;\\n    }\\n\\n    /**\\n     * Execute a batch of UserOperation.\\n     * no signature aggregator is used.\\n     * if any account requires an aggregator (that is, it returned an aggregator when\\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\\n     * @param ops the operations to execute\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleOps(\\n        UserOperation[] calldata ops,\\n        address payable beneficiary\\n    ) external;\\n\\n    /**\\n     * Execute a batch of UserOperation with Aggregators\\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleAggregatedOps(\\n        UserOpsPerAggregator[] calldata opsPerAggregator,\\n        address payable beneficiary\\n    ) external;\\n\\n    /**\\n     * generate a request Id - unique identifier for this request.\\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\\n     */\\n    function getUserOpHash(\\n        UserOperation calldata userOp\\n    ) external view returns (bytes32);\\n\\n    /**\\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\\n     * @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\\n     * @param userOp the user operation to validate.\\n     */\\n    function simulateValidation(UserOperation calldata userOp) external;\\n\\n    /**\\n     * gas and return values during simulation\\n     * @param preOpGas the gas used for validation (including preValidationGas)\\n     * @param prefund the required prefund for this operation\\n     * @param sigFailed validateUserOp's (or paymaster's) signature check failed\\n     * @param validAfter - first timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param validUntil - last timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param paymasterContext returned by validatePaymasterUserOp (to be passed into postOp)\\n     */\\n    struct ReturnInfo {\\n        uint256 preOpGas;\\n        uint256 prefund;\\n        bool sigFailed;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n        bytes paymasterContext;\\n    }\\n\\n    /**\\n     * returned aggregated signature info.\\n     * the aggregator returned by the account, and its current stake.\\n     */\\n    struct AggregatorStakeInfo {\\n        address aggregator;\\n        StakeInfo stakeInfo;\\n    }\\n\\n    /**\\n     * Get counterfactual sender address.\\n     *  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\\n     * this method always revert, and returns the address in SenderAddressResult error\\n     * @param initCode the constructor code to be passed into the UserOperation.\\n     */\\n    function getSenderAddress(bytes memory initCode) external;\\n\\n    /**\\n     * simulate full execution of a UserOperation (including both validation and target execution)\\n     * this method will always revert with \\\"ExecutionResult\\\".\\n     * it performs full validation of the UserOperation, but ignores signature error.\\n     * an optional target address is called after the userop succeeds, and its value is returned\\n     * (before the entire call is reverted)\\n     * Note that in order to collect the the success/failure of the target call, it must be executed\\n     * with trace enabled to track the emitted events.\\n     * @param op the UserOperation to simulate\\n     * @param target if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult\\n     *        are set to the return from that call.\\n     * @param targetCallData callData to pass to target address\\n     */\\n    function simulateHandleOp(\\n        UserOperation calldata op,\\n        address target,\\n        bytes calldata targetCallData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x9ccb1b188eda8bbf5f6c2d01bd83c3d8b2b04fcf745283051d31fe96d1d8e40f\",\"license\":\"GPL-3.0\"},\"contracts/aa-4337/interfaces/INonceManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\ninterface INonceManager {\\n    /**\\n     * Return the next nonce for this sender.\\n     * Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\\n     * But UserOp with different keys can come with arbitrary order.\\n     *\\n     * @param sender the account address\\n     * @param key the high 192 bit of the nonce\\n     * @return nonce a full nonce to pass for next UserOp with this sender.\\n     */\\n    function getNonce(\\n        address sender,\\n        uint192 key\\n    ) external view returns (uint256 nonce);\\n\\n    /**\\n     * Manually increment the nonce of the sender.\\n     * This method is exposed just for completeness..\\n     * Account does NOT need to call it, neither during validation, nor elsewhere,\\n     * as the EntryPoint will update the nonce regardless.\\n     * Possible use-case is call it with various keys to \\\"initialize\\\" their nonces to one, so that future\\n     * UserOperations will not pay extra for the first transaction with a given key.\\n     */\\n    function incrementNonce(uint192 key) external;\\n}\\n\",\"keccak256\":\"0xce478ad0fa0d18a3b785ac854623029e7ab463d05873dfaa365abfa1bf100912\",\"license\":\"GPL-3.0\"},\"contracts/aa-4337/interfaces/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.12;\\n\\n/**\\n * manage deposits and stakes.\\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\\n * stake is value locked for at least \\\"unstakeDelay\\\" by the staked entity.\\n */\\ninterface IStakeManager {\\n    event Deposited(address indexed account, uint256 totalDeposit);\\n\\n    event Withdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /// Emitted when stake or unstake delay are modified\\n    event StakeLocked(\\n        address indexed account,\\n        uint256 totalStaked,\\n        uint256 unstakeDelaySec\\n    );\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event StakeUnlocked(address indexed account, uint256 withdrawTime);\\n\\n    event StakeWithdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @param deposit the entity's deposit\\n     * @param staked true if this entity is staked.\\n     * @param stake actual amount of ether staked for this entity.\\n     * @param unstakeDelaySec minimum delay to withdraw the stake.\\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\\n     * @dev sizes were chosen so that (deposit,staked, stake) fit into one cell (used during handleOps)\\n     *    and the rest fit into a 2nd cell.\\n     *    112 bit allows for 10^15 eth\\n     *    48 bit for full timestamp\\n     *    32 bit allows 150 years for unstake delay\\n     */\\n    struct DepositInfo {\\n        uint112 deposit;\\n        bool staked;\\n        uint112 stake;\\n        uint32 unstakeDelaySec;\\n        uint48 withdrawTime;\\n    }\\n\\n    //API struct used by getStakeInfo and simulateValidation\\n    struct StakeInfo {\\n        uint256 stake;\\n        uint256 unstakeDelaySec;\\n    }\\n\\n    /// @return info - full deposit information of given account\\n    function getDepositInfo(\\n        address account\\n    ) external view returns (DepositInfo memory info);\\n\\n    /// @return the deposit (for gas payment) of the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * add to the deposit of the given account\\n     */\\n    function depositTo(address account) external payable;\\n\\n    /**\\n     * add to the account's stake - amount and delay\\n     * any pending unstake is first cancelled.\\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\\n     */\\n    function addStake(uint32 _unstakeDelaySec) external payable;\\n\\n    /**\\n     * attempt to unlock the stake.\\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\\n     */\\n    function unlockStake() external;\\n\\n    /**\\n     * withdraw from the (unlocked) stake.\\n     * must first call unlockStake and wait for the unstakeDelay to pass\\n     * @param withdrawAddress the address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external;\\n\\n    /**\\n     * withdraw from the deposit.\\n     * @param withdrawAddress the address to send withdrawn value.\\n     * @param withdrawAmount the amount to withdraw.\\n     */\\n    function withdrawTo(\\n        address payable withdrawAddress,\\n        uint256 withdrawAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xadcea606c9b7aafe6645441f2154a60f271330b0eee5292a632aa71c1672d546\",\"license\":\"GPL-3.0-only\"},\"contracts/aa-4337/interfaces/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\nimport {calldataKeccak} from \\\"../core/Helpers.sol\\\";\\n\\n/**\\n * User Operation struct\\n * @param sender the sender account of this request.\\n * @param nonce unique value the sender uses to verify it is not a replay.\\n * @param initCode if set, the account contract will be created by this constructor/\\n * @param callData the method call to execute on this account.\\n * @param callGasLimit the gas limit passed to the callData method call.\\n * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\n * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n * @param maxFeePerGas same as EIP-1559 gas parameter.\\n * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\n * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\n * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n */\\nstruct UserOperation {\\n    address sender;\\n    uint256 nonce;\\n    bytes initCode;\\n    bytes callData;\\n    uint256 callGasLimit;\\n    uint256 verificationGasLimit;\\n    uint256 preVerificationGas;\\n    uint256 maxFeePerGas;\\n    uint256 maxPriorityFeePerGas;\\n    bytes paymasterAndData;\\n    bytes signature;\\n}\\n\\n/**\\n * Utility functions helpful when working with UserOperation structs.\\n */\\nlibrary UserOperationLib {\\n    function getSender(\\n        UserOperation calldata userOp\\n    ) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {\\n            data := calldataload(userOp)\\n        }\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(\\n        UserOperation calldata userOp\\n    ) internal view returns (uint256) {\\n        unchecked {\\n            uint256 maxFeePerGas = userOp.maxFeePerGas;\\n            uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n            if (maxFeePerGas == maxPriorityFeePerGas) {\\n                //legacy mode (for networks that don't support basefee opcode)\\n                return maxFeePerGas;\\n            }\\n            return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n        }\\n    }\\n\\n    function pack(\\n        UserOperation calldata userOp\\n    ) internal pure returns (bytes memory ret) {\\n        address sender = getSender(userOp);\\n        uint256 nonce = userOp.nonce;\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\n        uint256 callGasLimit = userOp.callGasLimit;\\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\n\\n        return\\n            abi.encode(\\n                sender,\\n                nonce,\\n                hashInitCode,\\n                hashCallData,\\n                callGasLimit,\\n                verificationGasLimit,\\n                preVerificationGas,\\n                maxFeePerGas,\\n                maxPriorityFeePerGas,\\n                hashPaymasterAndData\\n            );\\n    }\\n\\n    function hash(\\n        UserOperation calldata userOp\\n    ) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x2429f5cc546bdee08c7e63858d0dda8491eaa3ab5194df884dc948c1154d2834\",\"license\":\"GPL-3.0\"},\"contracts/facets/AccountFacet.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.21;\\n\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {UserOperation} from \\\"../aa-4337/interfaces/UserOperation.sol\\\";\\nimport {IEntryPoint} from \\\"../aa-4337/interfaces/IEntryPoint.sol\\\";\\nimport {BaseAccount} from \\\"../aa-4337/core/BaseAccount.sol\\\";\\nimport {LibAppStorage, BarzStorage} from \\\"../libraries/LibAppStorage.sol\\\";\\nimport {LibDiamond} from \\\"../libraries/LibDiamond.sol\\\";\\nimport {LibLoupe} from \\\"../libraries/LibLoupe.sol\\\";\\nimport {IFacetRegistry} from \\\"../infrastructure/interfaces/IFacetRegistry.sol\\\";\\nimport {IDiamondCut} from \\\"../facets/base/interfaces/IDiamondCut.sol\\\";\\nimport {IDiamondLoupe} from \\\"../facets/base/interfaces/IDiamondLoupe.sol\\\";\\nimport {IVerificationFacet} from \\\"./interfaces/IVerificationFacet.sol\\\";\\nimport {IERC1271} from \\\"../interfaces/ERC/IERC1271.sol\\\";\\nimport {IAccountFacet} from \\\"./interfaces/IAccountFacet.sol\\\";\\n\\n/**\\n * @title Account Facet\\n * @dev Account module contract that provides the account features and initialization of signer\\n *      compatible with EIP-1271 & EIP-4337\\n * @author David Yongjun Kim (@Powerstream3604)\\n */\\ncontract AccountFacet is IAccountFacet, BarzStorage, BaseAccount {\\n    using ECDSA for bytes32;\\n\\n    /**\\n     * @notice This constructor ensures that this contract can only be used as singleton for Proxy contracts\\n     */\\n    constructor() {\\n        LibAppStorage.enforceAccountInitialize();\\n    }\\n\\n    /**\\n     * @notice Returns the address of EntryPoint contract registered to Barz account\\n     */\\n    function entryPoint() public view override returns (IEntryPoint) {\\n        return s.entryPoint;\\n    }\\n\\n    /**\\n     * @notice Initializes the initial storage of the Barz contract.\\n     * @dev This method can only be called during the initialization or signature migration.\\n     *      If the proxy contract was created without initialization, anyone can call initialize.\\n     *      Barz calls initialize in constructor in an atomic transaction during deployment\\n     * @param _verificationFacet Facet contract handling the verificationi\\n     * @param _anEntryPoint Entrypoint contract defined in EIP-4337 handling the flow of UserOp\\n     * @param _facetRegistry Registry of Facets that hold all facet information\\n     * @param _defaultFallBackHandler Middleware contract for default facets\\n     * @param _ownerPublicKey Bytes of owner public key\\n     */\\n    function initialize(\\n        address _verificationFacet,\\n        address _anEntryPoint,\\n        address _facetRegistry,\\n        address _defaultFallBackHandler,\\n        bytes calldata _ownerPublicKey\\n    ) public override returns (uint256 initSuccess) {\\n        LibAppStorage.enforceAccountInitialize();\\n        s.entryPoint = IEntryPoint(_anEntryPoint);\\n        s.facetRegistry = IFacetRegistry(_facetRegistry);\\n        LibDiamond.diamondStorage().defaultFallbackHandler = IDiamondLoupe(\\n            _defaultFallBackHandler\\n        );\\n\\n        _cutDiamondAccountFacet(_verificationFacet);\\n\\n        bytes memory initCall = abi.encodeWithSignature(\\n            \\\"initializeSigner(bytes)\\\",\\n            _ownerPublicKey\\n        );\\n        // Every Verification Facet should comply with initializeSigner(bytes)\\n        // to be compatible with the Barz contract(for initialization)\\n        (bool success, bytes memory result) = _verificationFacet.delegatecall(\\n            initCall\\n        );\\n        if (!success || uint256(bytes32(result)) != 1) {\\n            revert AccountFacet__InitializationFailure();\\n        }\\n\\n        initSuccess = 1;\\n        emit AccountInitialized(s.entryPoint, _ownerPublicKey);\\n    }\\n\\n    function _cutDiamondAccountFacet(address _verificationFacet) internal {\\n        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](1);\\n\\n        bytes4 ownerVerificationFuncSelector = IVerificationFacet(\\n            _verificationFacet\\n        ).validateOwnerSignatureSelector();\\n\\n        bytes4[] memory verificationFunctionSelectors = new bytes4[](3);\\n        verificationFunctionSelectors[0] = IERC1271.isValidSignature.selector;\\n        verificationFunctionSelectors[1] = ownerVerificationFuncSelector;\\n        verificationFunctionSelectors[2] = IVerificationFacet.owner.selector;\\n        cut[0] = IDiamondCut.FacetCut({\\n            facetAddress: _verificationFacet,\\n            action: IDiamondCut.FacetCutAction.Add,\\n            functionSelectors: verificationFunctionSelectors\\n        });\\n\\n        LibDiamond.diamondCut(cut, address(0), \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice Calls the destination with inputted calldata and value from EntryPoint\\n     * @dev This method executes the calldata coming from the EntryPoint.\\n     *      Barz will make a call to this function for majority of typical execution(e.g. Swap, Token Transfer)\\n     * @param _dest Address of destination where the call will be forwarded to\\n     * @param _value Amount of native coin the owner is willing to send(e.g. ETH, BNB)\\n     * @param _func Bytes of calldata to execute in the destination address\\n     */\\n    function execute(\\n        address _dest,\\n        uint256 _value,\\n        bytes calldata _func\\n    ) external override onlyWhenUnlocked {\\n        _requireFromEntryPoint();\\n        address restrictionsFacet = LibDiamond.restrictionsFacet();\\n        if (restrictionsFacet == address(0)) _call(_dest, _value, _func);\\n        else _callWithRestrictions(_dest, _value, _func, restrictionsFacet);\\n    }\\n\\n    /**\\n     * @notice Batch calls the destination with inputted calldata and value from EntryPoint\\n     * @dev This method batch executes the calldata coming from the EntryPoint.\\n     *      Barz will make a call to this function for majority of typical execution(e.g. Swap, Token Transfer)\\n     * @param _dest Array of addresses of destination where the call will be forwarded to\\n     * @param _value Array of amount of native coin the owner is willing to send(e.g. ETH, BNB)\\n     * @param _func Array of bytes of calldata to execute in the destination address\\n     */\\n    function executeBatch(\\n        address[] calldata _dest,\\n        uint256[] calldata _value,\\n        bytes[] calldata _func\\n    ) external override onlyWhenUnlocked {\\n        _requireFromEntryPoint();\\n        if (_dest.length != _func.length || _dest.length != _value.length)\\n            revert AccountFacet__InvalidArrayLength();\\n        address restrictionsFacet = LibDiamond.restrictionsFacet();\\n        if (restrictionsFacet == address(0)) {\\n            for (uint256 i; i < _dest.length; ) {\\n                _call(_dest[i], _value[i], _func[i]);\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        } else {\\n            for (uint256 i; i < _dest.length; ) {\\n                _callWithRestrictions(\\n                    _dest[i],\\n                    _value[i],\\n                    _func[i],\\n                    restrictionsFacet\\n                );\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Validates the signature field of UserOperation\\n     * @dev This method validates if the signature of UserOp is indeed valid by delegating the call to Verification Facet\\n     *      Barz makes a call to the pre-registered Verification Facet address in App Storage\\n     * @param _userOp UserOperation from owner to be validated\\n     * @param _userOpHash Hash of UserOperation given from the EntryPoint contract\\n     */\\n    function _validateSignature(\\n        UserOperation calldata _userOp,\\n        bytes32 _userOpHash\\n    ) internal override returns (uint256 validationData) {\\n        // Get Facet with Function Selector\\n        address facet = LibLoupe.facetAddress(s.validateOwnerSignatureSelector);\\n        if (facet == address(0))\\n            revert AccountFacet__NonExistentVerificationFacet();\\n\\n        // Make function call to VerificationFacet\\n        bytes memory validateCall = abi.encodeWithSelector(\\n            s.validateOwnerSignatureSelector,\\n            _userOp,\\n            _userOpHash\\n        );\\n        (bool success, bytes memory result) = facet.delegatecall(validateCall);\\n        if (!success) revert AccountFacet__CallNotSuccessful();\\n        validationData = uint256(bytes32(result));\\n        if (validationData == 0) emit VerificationSuccess(_userOpHash);\\n        else emit VerificationFailure(_userOpHash);\\n    }\\n\\n    /**\\n     * @notice Calls the target with the inputted value and calldata\\n     * @dev This method is the actual function in Barz that makes a call with an arbitrary owner-given data\\n     * @param _target Address of the destination contract which the call is getting forwarded to\\n     * @param _value Amount of Native coin the owner is wanting to make in this call\\n     * @param _data Calldata the owner is forwarding together in the call e.g. Swap/Token Transfer\\n     */\\n    function _call(\\n        address _target,\\n        uint256 _value,\\n        bytes memory _data\\n    ) internal {\\n        (bool success, bytes memory result) = _target.call{value: _value}(\\n            _data\\n        );\\n        if (!success) {\\n            assembly {\\n                revert(add(result, 32), mload(result))\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calls the target with the inputted value and calldata together with restrictions check\\n     * @dev This method is the actual function in Barz that makes a call with an arbitrary owner-given data\\n     * @param _target Address of the destination contract which the call is getting forwarded to\\n     * @param _value Amount of Native coin the owner is wanting to make in this call\\n     * @param _data Calldata the owner is forwarding together in the call e.g. Swap/Token Transfer\\n     * @param _restrictionsFacet Address of Facet to validate restrictions\\n     */\\n    function _callWithRestrictions(\\n        address _target,\\n        uint256 _value,\\n        bytes memory _data,\\n        address _restrictionsFacet\\n    ) internal {\\n        // NOTE: No restrictions facet, so restriction validation passes\\n        if (_checkRestrictions(_restrictionsFacet, _target, _value, _data) != 0)\\n            revert AccountFacet__RestrictionsFailure();\\n\\n        (bool success, bytes memory result) = _target.call{value: _value}(\\n            _data\\n        );\\n        if (!success) {\\n            assembly {\\n                revert(add(result, 32), mload(result))\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks restrictions if the restrictions facet exists\\n     * @dev This method checks if the restrictions facet exists and makes a verification call to an array of restrictions facet\\n     * @param _facet Address that holds the restrictions logic\\n     * @param _target Address the call is getting forwarded to\\n     * @param _value Amount of native coin the call is sending together with the call\\n     * @param _data Calldata to trigger execution in target address\\n     */\\n    function _checkRestrictions(\\n        address _facet,\\n        address _target,\\n        uint256 _value,\\n        bytes memory _data\\n    ) internal returns (uint256 result) {\\n        bytes memory call = abi.encodeWithSignature(\\n            \\\"verifyRestrictions(address,address,uint256,bytes)\\\",\\n            address(this),\\n            _target,\\n            _value,\\n            _data\\n        );\\n        (bool success, bytes memory response) = _facet.delegatecall(call);\\n        if (!success) revert AccountFacet__RestrictionsFailure();\\n        result = uint256(bytes32(response));\\n    }\\n}\\n\",\"keccak256\":\"0xcd92bcdd447010880f78e57e213123269c9e023adfc0a540608daa127d8649ca\",\"license\":\"Apache-2.0\"},\"contracts/facets/base/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.21;\\n\\n/**\\n * @title DiamondCut Facet Interface\\n * @dev Interface for DiamondCut Facet responsible for adding/removing/replace facets in Barz\\n * @author David Yongjun Kim (@Powerstream3604)\\n */\\ninterface IDiamondCut {\\n    error DiamondCutFacet__InvalidRouteWithGuardian();\\n    error DiamondCutFacet__InvalidRouteWithoutGuardian();\\n    error DiamondCutFacet__InvalidArrayLength();\\n    error DiamondCutFacet__InsufficientApprovers();\\n    error DiamondCutFacet__InvalidApprover();\\n    error DiamondCutFacet__InvalidApproverSignature();\\n    error DiamondCutFacet__InvalidApprovalValidationPeriod();\\n    error DiamondCutFacet__CannotRevokeUnapproved();\\n    error DiamondCutFacet__LackOfOwnerApproval();\\n    error DiamondCutFacet__OwnerAlreadyApproved();\\n    error DiamondCutFacet__DuplicateApproval();\\n    error DiamondCutFacet__InvalidInitAddress();\\n\\n    event DiamondCutApproved(FacetCut[] diamondCut);\\n    event DiamondCutApprovalRevoked(FacetCut[] diamondCut);\\n\\n    event SupportsInterfaceUpdated(bytes4 interfaceId, bool _lag);\\n\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param diamondCut Contains the facet addresses and function selectors\\n    /// @param init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata diamondCut,\\n        address init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    function updateSupportsInterface(bytes4 interfaceId, bool flag) external;\\n\\n    function diamondCutWithGuardian(\\n        FacetCut[] calldata diamondCut,\\n        address[] calldata approvers,\\n        bytes[] calldata signatures\\n    ) external;\\n\\n    function approveDiamondCut(FacetCut[] calldata diamondCut) external;\\n\\n    function revokeDiamondCutApproval(FacetCut[] calldata diamondCut) external;\\n\\n    function getDiamondCutApprovalCountWithTimeValidity(\\n        bytes32 diamondCutHash\\n    ) external view returns (uint256);\\n\\n    function getOwnerCutApprovalWithTimeValidity(\\n        bytes32 diamondCutHash\\n    ) external view returns (bool);\\n\\n    function isCutApproved(\\n        bytes32 diamondCutHash,\\n        address approver\\n    ) external view returns (bool);\\n\\n    function getDiamondCutHash(\\n        FacetCut[] calldata diamondCut\\n    ) external view returns (bytes32);\\n\\n    function getDiamondCutNonce() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0x8514213c7677c2122bda0721870b08decaddb68841cb1d6a87b89b04e8f43e1e\",\"license\":\"Apache-2.0\"},\"contracts/facets/base/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.21;\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(\\n        address _facet\\n    ) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(\\n        bytes4 _functionSelector\\n    ) external view returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0xd84f7fbb1344f714bceab2c71e4a25a235e3c1457fe7eba6c5538cd95ef5fc0f\",\"license\":\"Apache-2.0\"},\"contracts/facets/interfaces/IAccountFacet.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.21;\\n\\nimport {IEntryPoint} from \\\"../../aa-4337/interfaces/IEntryPoint.sol\\\";\\n\\n/**\\n * @title Account Facet Interface\\n * @dev Interface of module contract that provides the account features and init/unitialization of signer\\n *      compatible with EIP-1271 & EIP-4337\\n * @author David Yongjun Kim (@Powerstream3604)\\n */\\ninterface IAccountFacet {\\n    event AccountInitialized(\\n        IEntryPoint indexed entryPoint,\\n        bytes indexed ownerPublicKey\\n    );\\n    // NOTE: Added Below Event\\n    event VerificationSuccess(bytes32);\\n    event VerificationFailure(bytes32);\\n\\n    error AccountFacet__InitializationFailure();\\n    error AccountFacet__RestrictionsFailure();\\n    error AccountFacet__NonExistentVerificationFacet();\\n    error AccountFacet__CallNotSuccessful();\\n    error AccountFacet__InvalidArrayLength();\\n\\n    function initialize(\\n        address verificationFacet,\\n        address anEntryPoint,\\n        address facetRegistry,\\n        address _defaultFallBack,\\n        bytes calldata _ownerPublicKey\\n    ) external returns (uint256);\\n\\n    function execute(address dest, uint256 value, bytes calldata func) external;\\n\\n    function executeBatch(\\n        address[] calldata dest,\\n        uint256[] calldata value,\\n        bytes[] calldata func\\n    ) external;\\n}\\n\",\"keccak256\":\"0x74a9cb0b8f2f4a5148e366a401a0354426c536c012c025025d07cc25a4cd5382\",\"license\":\"Apache-2.0\"},\"contracts/facets/interfaces/IVerificationFacet.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.21;\\n\\nimport {UserOperation} from \\\"../../aa-4337/interfaces/UserOperation.sol\\\";\\n\\n/**\\n * @title Verification Facet Interface\\n * @dev Implements logic for user ops signature verification\\n * @author David Yongjun Kim (@Powerstream3604)\\n * @author Ruslan Serebriakov (@rsrbk)\\n */\\ninterface IVerificationFacet {\\n    event SignerInitialized(bytes);\\n    event SignerUninitialized();\\n\\n    error VerificationFacet__ValidateOwnerSignatureSelectorNotSet();\\n    error VerificationFacet__ValidateOwnerSignatureSelectorAlreadySet();\\n    error VerificationFacet__InitializationFailure();\\n    error VerificationFacet__InvalidFacetMapping();\\n\\n    function initializeSigner(bytes memory) external returns (uint256);\\n\\n    function uninitializeSigner() external returns (uint256);\\n\\n    function validateOwnerSignatureSelector() external view returns (bytes4);\\n\\n    function owner() external view returns (bytes memory);\\n\\n    function isValidKeyType(bytes calldata) external view returns (bool);\\n\\n    function validateOwnerSignature(\\n        UserOperation calldata userOp,\\n        bytes32 userOpHash\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x72bc370a1d1b5a6d6bde67f5026733fd8f6ba434bb90e73b0bd8627fb1579928\",\"license\":\"Apache-2.0\"},\"contracts/infrastructure/interfaces/IFacetRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.21;\\n\\n/**\\n * @title Facet Registry Interface\\n * @dev Interface for Facet Registry contract to keep track of facets & function selectors addable to user wallets\\n * @author David Yongjun Kim (@Powerstream3604)\\n */\\ninterface IFacetRegistry {\\n    struct FacetRegistryConfig {\\n        bytes4[] selectors;\\n        mapping(bytes4 => FacetInfo) info;\\n    }\\n    struct FacetInfo {\\n        bool exists;\\n        uint128 index;\\n    }\\n\\n    event FacetFunctionSelectorsRegistered(\\n        address facet,\\n        bytes4[] facetSelectors\\n    );\\n    event FacetFunctionSelectorsRemoved(address facet, bytes4[] facetSelectors);\\n\\n    error FacetRegistry__FacetSelectorAlreadyRegistered();\\n    error FacetRegistry__UnregisteredFacetSelector();\\n\\n    function registerFacetFunctionSelectors(\\n        address facet,\\n        bytes4[] calldata facetSelectors\\n    ) external;\\n\\n    function removeFacetFunctionSelectors(\\n        address facet,\\n        bytes4[] calldata facetSelectors\\n    ) external;\\n\\n    function areFacetFunctionSelectorsRegistered(\\n        address facet,\\n        bytes4[] calldata facetSelectors\\n    ) external view returns (bool);\\n\\n    function isFacetFunctionSelectorRegistered(\\n        address facet,\\n        bytes4 facetSelector\\n    ) external view returns (bool);\\n\\n    function getFacetFunctionSelectors(\\n        address facet\\n    ) external view returns (bytes4[] memory);\\n}\\n\",\"keccak256\":\"0x6e6dd2cab346ef7c31230740ec48d2925e4a9ab24c2f2fb268baaf408dcf02ef\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ERC/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.21;\\n\\ninterface IERC1271 {\\n    function isValidSignature(\\n        bytes32 hash,\\n        bytes memory signature\\n    ) external view returns (bytes4);\\n}\\n\",\"keccak256\":\"0xcdddb7d5641c9d3f2432dec7fd13fddb9ae1480f25c76c21511e2fa16b8bd422\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.21;\\n\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {IEntryPoint} from \\\"../aa-4337/interfaces/IEntryPoint.sol\\\";\\nimport {IFacetRegistry} from \\\"../infrastructure/interfaces/IFacetRegistry.sol\\\";\\n\\n/*\\n * @title App Storage\\n * @dev App storage for Barz contract to prevent storage collision\\n * @author David Yongjun Kim (@Powerstream3604)\\n * @author Ruslan Serebriakov (@rsrbk)\\n */\\n\\nstruct Lock {\\n    uint64 release;\\n    bytes4 locker;\\n}\\n\\nstruct InitializersStorage {\\n    // NOTE: initialized is a variable to make sure the initialization is only done once.\\n    uint8 signerInitialized;\\n    uint8 accountInitialized;\\n    uint8 restrictionsInitialized;\\n}\\n\\nstruct AppStorage {\\n    mapping(uint256 => InitializersStorage) initStorage;\\n    uint8 signerMigration;\\n    bytes4 validateOwnerSignatureSelector;\\n    IEntryPoint entryPoint;\\n    IFacetRegistry facetRegistry;\\n    mapping(uint256 => Lock) locks;\\n}\\n\\nlibrary LibAppStorage {\\n    error LibAppStorage__AccountAlreadyUninitialized();\\n    error LibAppStorage__AccountMustBeUninitialized();\\n    error LibAppStorage__SignerAlreadyUninitialized();\\n    error LibAppStorage__SignerMustBeUninitialized();\\n\\n    function appStorage() internal pure returns (AppStorage storage ds) {\\n        assembly {\\n            ds.slot := 0\\n        }\\n    }\\n\\n    function setSignerUninitialized() internal {\\n        AppStorage storage s = appStorage();\\n        if (1 != s.initStorage[0].signerInitialized) {\\n            revert LibAppStorage__SignerAlreadyUninitialized();\\n        }\\n        s.initStorage[0].signerInitialized = 0;\\n    }\\n\\n    function getValidateOwnerSignatureSelector()\\n        internal\\n        view\\n        returns (bytes4 selector)\\n    {\\n        selector = appStorage().validateOwnerSignatureSelector;\\n    }\\n\\n    function setValidateOwnerSignatureSelector(\\n        bytes4 _validateOwnerSignatureSelector\\n    ) internal {\\n        appStorage()\\n            .validateOwnerSignatureSelector = _validateOwnerSignatureSelector;\\n    }\\n\\n    function enforceSignerInitialize() internal {\\n        AppStorage storage s = appStorage();\\n        if (0 != s.initStorage[0].signerInitialized) {\\n            revert LibAppStorage__SignerMustBeUninitialized();\\n        }\\n        s.initStorage[0].signerInitialized = 1;\\n    }\\n\\n    function enforceAccountInitialize() internal {\\n        AppStorage storage s = appStorage();\\n        if (0 != s.initStorage[0].accountInitialized) {\\n            revert LibAppStorage__AccountMustBeUninitialized();\\n        }\\n        s.initStorage[0].accountInitialized = 1;\\n    }\\n\\n    function initiateSignerMigration() internal {\\n        appStorage().signerMigration = 1;\\n    }\\n\\n    function enforceSignerMigration() internal view {\\n        if (1 != appStorage().signerMigration) {\\n            revert LibAppStorage__AccountMustBeUninitialized();\\n        }\\n    }\\n\\n    function finalizeSignerMigration() internal {\\n        appStorage().signerMigration = 0;\\n    }\\n\\n    function setLock(uint256 _releaseAfter, bytes4 _locker) internal {\\n        appStorage().locks[0] = Lock(SafeCast.toUint64(_releaseAfter), _locker);\\n    }\\n\\n    function enforceRestrictionsInitialize() internal {\\n        AppStorage storage s = appStorage();\\n        if (0 != s.initStorage[0].restrictionsInitialized)\\n            revert LibAppStorage__SignerMustBeUninitialized();\\n        s.initStorage[0].restrictionsInitialized = 1;\\n    }\\n\\n    function setRestrictionsUninitialized() internal {\\n        AppStorage storage s = appStorage();\\n        if (1 != s.initStorage[0].restrictionsInitialized)\\n            revert LibAppStorage__AccountAlreadyUninitialized();\\n        s.initStorage[0].restrictionsInitialized = 0;\\n    }\\n}\\n\\ncontract BarzStorage {\\n    AppStorage internal s;\\n    modifier onlyWhenUnlocked() {\\n        require(\\n            uint64(block.timestamp) >= s.locks[0].release,\\n            \\\"Account Locked\\\"\\n        );\\n        _;\\n    }\\n    modifier onlyWhenLocked() {\\n        require(\\n            uint64(block.timestamp) < s.locks[0].release,\\n            \\\"Account Unlocked\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x48524007862a6ce0e07f645950613ce6513ce073c37a109c75019683d42bae27\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.21;\\n\\nimport {IDiamondCut} from \\\"../facets/base/interfaces/IDiamondCut.sol\\\";\\nimport {IDiamondLoupe} from \\\"../facets/base/interfaces/IDiamondLoupe.sol\\\";\\n\\nerror InitializationFunctionReverted(\\n    address _initializationContractAddress,\\n    bytes _calldata\\n);\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"trustwallet.barz.diamond.storage\\\");\\n    bytes4 constant RESTRICTIONS_FACET_SELECTOR =\\n        bytes4(keccak256(\\\"verifyRestrictions(address,address,uint256,bytes)\\\"));\\n    struct DiamondStorage {\\n        // maps function selectors to the facets that execute the functions.\\n        // and maps the selectors to their position in the selectorSlots array.\\n        // func selector => address facet, selector position\\n        mapping(bytes4 => bytes32) facets;\\n        // array of slots of function selectors.\\n        // each slot holds 8 function selectors.\\n        mapping(uint256 => bytes32) selectorSlots;\\n        // The number of function selectors in selectorSlots\\n        uint16 selectorCount;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // Default Fallback Handler of the barz.\\n        IDiamondLoupe defaultFallbackHandler;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function enforceIsSelf() internal view {\\n        require(msg.sender == address(this), \\\"LibDiamond: Caller not self\\\");\\n    }\\n\\n    event DiamondCut(\\n        IDiamondCut.FacetCut[] _diamondCut,\\n        address _init,\\n        bytes _calldata\\n    );\\n\\n    bytes32 constant CLEAR_ADDRESS_MASK =\\n        bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n    // Internal function version of diamondCut\\n    // This code is almost the same as the external diamondCut,\\n    // except it is using 'Facet[] memory _diamondCut' instead of\\n    // 'Facet[] calldata _diamondCut'.\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes an error for a two dimensional array.\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 originalSelectorCount = ds.selectorCount;\\n        uint256 selectorCount = originalSelectorCount;\\n        bytes32 selectorSlot;\\n        // Check if last selector slot is not full\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\"\\n        if (selectorCount & 7 > 0) {\\n            // get last selectorSlot\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n            selectorSlot = ds.selectorSlots[selectorCount >> 3];\\n        }\\n        // loop through diamond cut\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; ) {\\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\n                selectorCount,\\n                selectorSlot,\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].action,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n\\n            unchecked {\\n                facetIndex++;\\n            }\\n        }\\n        if (selectorCount != originalSelectorCount) {\\n            ds.selectorCount = uint16(selectorCount);\\n        }\\n        // If last selector slot is not full\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\"\\n        if (selectorCount & 7 > 0) {\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n            ds.selectorSlots[selectorCount >> 3] = selectorSlot;\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addReplaceRemoveFacetSelectors(\\n        uint256 _selectorCount,\\n        bytes32 _selectorSlot,\\n        address _newFacetAddress,\\n        IDiamondCut.FacetCutAction _action,\\n        bytes4[] memory _selectors\\n    ) internal returns (uint256, bytes32) {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(\\n            _selectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        if (_action == IDiamondCut.FacetCutAction.Add) {\\n            enforceHasContractCode(\\n                _newFacetAddress,\\n                \\\"LibDiamondCut: Add facet has no code\\\"\\n            );\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                require(\\n                    address(bytes20(oldFacet)) == address(0),\\n                    \\\"LibDiamondCut: Can't add function that already exists\\\"\\n                );\\n                // add facet for selector\\n                ds.facets[selector] =\\n                    bytes20(_newFacetAddress) |\\n                    bytes32(_selectorCount);\\n                // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\"\\n                // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                uint256 selectorInSlotPosition = (_selectorCount & 7) << 5;\\n                // clear selector position in slot and add selector\\n                _selectorSlot =\\n                    (_selectorSlot &\\n                        ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) |\\n                    (bytes32(selector) >> selectorInSlotPosition);\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    // \\\"_selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"_selectorSlot / 8\\\"\\n                    ds.selectorSlots[_selectorCount >> 3] = _selectorSlot;\\n                    _selectorSlot = 0;\\n                }\\n                _selectorCount++;\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Replace) {\\n            enforceHasContractCode(\\n                _newFacetAddress,\\n                \\\"LibDiamondCut: Replace facet has no code\\\"\\n            );\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n                // only useful if immutable functions exist\\n                require(\\n                    oldFacetAddress != address(this),\\n                    \\\"LibDiamondCut: Can't replace immutable function\\\"\\n                );\\n                require(\\n                    oldFacetAddress != _newFacetAddress,\\n                    \\\"LibDiamondCut: Can't replace function with same function\\\"\\n                );\\n                require(\\n                    oldFacetAddress != address(0),\\n                    \\\"LibDiamondCut: Can't replace function that doesn't exist\\\"\\n                );\\n                // replace old facet address\\n                ds.facets[selector] =\\n                    (oldFacet & CLEAR_ADDRESS_MASK) |\\n                    bytes20(_newFacetAddress);\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Remove) {\\n            require(\\n                _newFacetAddress == address(0),\\n                \\\"LibDiamondCut: Remove facet address must be address(0)\\\"\\n            );\\n            // \\\"_selectorCount >> 3\\\" is a gas efficient division by 8 \\\"_selectorCount / 8\\\"\\n            uint256 selectorSlotCount = _selectorCount >> 3;\\n            // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\"\\n            uint256 selectorInSlotIndex = _selectorCount & 7;\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                if (_selectorSlot == 0) {\\n                    // get last selectorSlot\\n                    selectorSlotCount--;\\n                    _selectorSlot = ds.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                } else {\\n                    selectorInSlotIndex--;\\n                }\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n                // adding a block here prevents stack too deep error\\n                {\\n                    bytes4 selector = _selectors[selectorIndex];\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    require(\\n                        address(bytes20(oldFacet)) != address(0),\\n                        \\\"LibDiamondCut: Can't remove function that doesn't exist\\\"\\n                    );\\n                    // only useful if immutable functions exist\\n                    require(\\n                        address(bytes20(oldFacet)) != address(this),\\n                        \\\"LibDiamondCut: Can't remove immutable function\\\"\\n                    );\\n                    // replace selector with last selector in ds.facets\\n                    // gets the last selector\\n                    // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                    lastSelector = bytes4(\\n                        _selectorSlot << (selectorInSlotIndex << 5)\\n                    );\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        ds.facets[lastSelector] =\\n                            (oldFacet & CLEAR_ADDRESS_MASK) |\\n                            bytes20(ds.facets[lastSelector]);\\n                    }\\n                    delete ds.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    // \\\"oldSelectorCount >> 3\\\" is a gas efficient division by 8 \\\"oldSelectorCount / 8\\\"\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\n                    // \\\"oldSelectorCount & 7\\\" is a gas efficient modulo by eight \\\"oldSelectorCount % 8\\\"\\n                    // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n                }\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = ds.selectorSlots[\\n                        oldSelectorsSlotCount\\n                    ];\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                    // update storage with the modified slot\\n                    ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    _selectorSlot =\\n                        (_selectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n                if (selectorInSlotIndex == 0) {\\n                    delete ds.selectorSlots[selectorSlotCount];\\n                    _selectorSlot = 0;\\n                }\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex;\\n        } else {\\n            revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n        }\\n        return (_selectorCount, _selectorSlot);\\n    }\\n\\n    function initializeDiamondCut(\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        if (_init == address(0)) {\\n            return;\\n        }\\n        enforceHasContractCode(\\n            _init,\\n            \\\"LibDiamondCut: _init address has no code\\\"\\n        );\\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up error\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(error)\\n                    revert(add(32, error), returndata_size)\\n                }\\n            } else {\\n                revert InitializationFunctionReverted(_init, _calldata);\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(\\n        address _contract,\\n        string memory _errorMessage\\n    ) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n\\n    function restrictionsFacet() internal view returns (address facetAddress_) {\\n        facetAddress_ = address(\\n            bytes20(\\n                LibDiamond.diamondStorage().facets[RESTRICTIONS_FACET_SELECTOR]\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x2cabdc00de859c3a3170ce3bda5d0e5fd3933d47ce904fd1585f9818b02572f8\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.21;\\n\\nimport {IDiamondLoupe} from \\\"../facets/base/interfaces/IDiamondLoupe.sol\\\";\\nimport {LibDiamond} from \\\"./LibDiamond.sol\\\";\\n\\n/**\\n * @title LibLoupe\\n * @dev Internal Library to provide utility feature for reading the state of diamond facets\\n * Originally from Diamond's implementation of Mudgen(author of EIP-2535)\\n */\\nlibrary LibLoupe {\\n    /// @notice Gets all facets and their selectors.\\n    /// @return facets_ Facet\\n    function facets()\\n        internal\\n        view\\n        returns (IDiamondLoupe.Facet[] memory facets_)\\n    {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        facets_ = new IDiamondLoupe.Facet[](ds.selectorCount);\\n        uint16[] memory numFacetSelectors = new uint16[](ds.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < ds.selectorCount; slotIndex++) {\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n                if (selectorIndex > ds.selectorCount) {\\n                    break;\\n                }\\n                // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facetAddress_ = address(bytes20(ds.facets[selector]));\\n                bool continueLoop;\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (facets_[facetIndex].facetAddress == facetAddress_) {\\n                        facets_[facetIndex].functionSelectors[\\n                            numFacetSelectors[facetIndex]\\n                        ] = selector;\\n                        // probably will never have more than 256 functions from one facet contract\\n                        require(numFacetSelectors[facetIndex] < 255);\\n                        numFacetSelectors[facetIndex]++;\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n                if (continueLoop) {\\n                    continue;\\n                }\\n                facets_[numFacets].facetAddress = facetAddress_;\\n                facets_[numFacets].functionSelectors = new bytes4[](\\n                    ds.selectorCount\\n                );\\n                facets_[numFacets].functionSelectors[0] = selector;\\n                numFacetSelectors[numFacets] = 1;\\n                numFacets++;\\n            }\\n        }\\n        for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n            uint256 numSelectors = numFacetSelectors[facetIndex];\\n            bytes4[] memory selectors = facets_[facetIndex].functionSelectors;\\n            // setting the number of selectors\\n            assembly {\\n                mstore(selectors, numSelectors)\\n            }\\n        }\\n        // setting the number of facets\\n        assembly {\\n            mstore(facets_, numFacets)\\n        }\\n    }\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return _facetFunctionSelectors The selectors associated with a facet address.\\n    function facetFunctionSelectors(\\n        address _facet\\n    ) internal view returns (bytes4[] memory _facetFunctionSelectors) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        uint256 numSelectors;\\n        _facetFunctionSelectors = new bytes4[](ds.selectorCount);\\n        uint256 selectorIndex;\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < ds.selectorCount; slotIndex++) {\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n                if (selectorIndex > ds.selectorCount) {\\n                    break;\\n                }\\n                // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facet = address(bytes20(ds.facets[selector]));\\n                if (_facet == facet) {\\n                    _facetFunctionSelectors[numSelectors] = selector;\\n                    numSelectors++;\\n                }\\n            }\\n        }\\n        // Set the number of selectors in the array\\n        assembly {\\n            mstore(_facetFunctionSelectors, numSelectors)\\n        }\\n    }\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses()\\n        internal\\n        view\\n        returns (address[] memory facetAddresses_)\\n    {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        facetAddresses_ = new address[](ds.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < ds.selectorCount; slotIndex++) {\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n                if (selectorIndex > ds.selectorCount) {\\n                    break;\\n                }\\n                // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facetAddress_ = address(bytes20(ds.facets[selector]));\\n                bool continueLoop;\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (facetAddress_ == facetAddresses_[facetIndex]) {\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n                if (continueLoop) {\\n                    continue;\\n                }\\n                facetAddresses_[numFacets] = facetAddress_;\\n                numFacets++;\\n            }\\n        }\\n        // Set the number of facet addresses in the array\\n        assembly {\\n            mstore(facetAddresses_, numFacets)\\n        }\\n    }\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(\\n        bytes4 _functionSelector\\n    ) internal view returns (address facetAddress_) {\\n        facetAddress_ = address(\\n            bytes20(LibDiamond.diamondStorage().facets[_functionSelector])\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x0b11439c3cc657095e15ec2241fdcf67204b14001357b612fc5db4ff9e760a5a\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b61008e565b600080805260208190527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb554610100900460ff1615610070576040516338fc28cb60e01b815260040160405180910390fd5b600080805260209190915260409020805461ff001916610100179055565b6129b6806200009e6000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063b0d691fe11610050578063b0d691fe146100c5578063b61d27f61461010c578063d087d2881461011f57600080fd5b80633a871cdd1461007757806347e1da2a1461009d5780634a936417146100b2575b600080fd5b61008a610085366004611fb5565b610127565b6040519081526020015b60405180910390f35b6100b06100ab366004612055565b61014d565b005b61008a6100c036600461215a565b610450565b60015465010000000000900473ffffffffffffffffffffffffffffffffffffffff1660405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610094565b6100b061011a3660046121ce565b6106d0565b61008a61089d565b600061013161095e565b61013b8484610a16565b905061014682610c5d565b9392505050565b6000805260036020527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff5467ffffffffffffffff9081164290911610156101f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4163636f756e74204c6f636b656400000000000000000000000000000000000060448201526064015b60405180910390fd5b6101fd61095e565b848114158061020c5750848314155b15610243576040517fdde5716100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006102b87fac87185d000000000000000000000000000000000000000000000000000000006000527f183cde5d4f6bb7b445b8fc2f7f15d0fd1d162275aded24183babbffee7cd491f6020527f6d9f2463c8c0d8cb8be556a773ab21d4321328909a1725f2ef7cae0c320e95da5460601c90565b905073ffffffffffffffffffffffffffffffffffffffff811661038f5760005b86811015610389576103818888838181106102f5576102f5612228565b905060200201602081019061030a9190612257565b87878481811061031c5761031c612228565b9050602002013586868581811061033557610335612228565b90506020028101906103479190612272565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610cc892505050565b6001016102d8565b50610447565b60005b868110156104455761043d8888838181106103af576103af612228565b90506020020160208101906103c49190612257565b8787848181106103d6576103d6612228565b905060200201358686858181106103ef576103ef612228565b90506020028101906104019190612272565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250889250610d45915050565b600101610392565b505b50505050505050565b600061045a610e0d565b6001805473ffffffffffffffffffffffffffffffffffffffff88811665010000000000027fffffffffffffff0000000000000000000000000000000000000000ffffffffff90921691909117909155600280548783167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091557f183cde5d4f6bb7b445b8fc2f7f15d0fd1d162275aded24183babbffee7cd492380549287169290911691909117905561051187610eb3565b60008383604051602401610526929190612320565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fcd9b47e40000000000000000000000000000000000000000000000000000000017905251909150600090819073ffffffffffffffffffffffffffffffffffffffff8b16906105c8908590612360565b600060405180830381855af49150503d8060008114610603576040519150601f19603f3d011682016040523d82523d6000602084013e610608565b606091505b5091509150811580610623575061061e8161237c565b600114155b1561065a576040517f1602372100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60019350858560405161066e9291906123c1565b60405190819003812060015490916501000000000090910473ffffffffffffffffffffffffffffffffffffffff16907fd429ff0b972be4ae725700a373d05007287994e4c86cb83315b43ffa85b595fd90600090a35050509695505050505050565b6000805260036020527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff5467ffffffffffffffff908116429091161015610773576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4163636f756e74204c6f636b656400000000000000000000000000000000000060448201526064016101ec565b61077b61095e565b60006107f07fac87185d000000000000000000000000000000000000000000000000000000006000527f183cde5d4f6bb7b445b8fc2f7f15d0fd1d162275aded24183babbffee7cd491f6020527f6d9f2463c8c0d8cb8be556a773ab21d4321328909a1725f2ef7cae0c320e95da5460601c90565b905073ffffffffffffffffffffffffffffffffffffffff81166108535761084e858585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610cc892505050565b610896565b610896858585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250879250610d45915050565b5050505050565b60015460009065010000000000900473ffffffffffffffffffffffffffffffffffffffff166040517f35567e1a0000000000000000000000000000000000000000000000000000000081523060048201526000602482015273ffffffffffffffffffffffffffffffffffffffff91909116906335567e1a90604401602060405180830381865afa158015610935573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095991906123d1565b905090565b60015465010000000000900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a14576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f6163636f756e743a206e6f742066726f6d20456e747279506f696e740000000060448201526064016101ec565b565b600154610100900460e01b7fffffffff000000000000000000000000000000000000000000000000000000001660009081527f183cde5d4f6bb7b445b8fc2f7f15d0fd1d162275aded24183babbffee7cd491f602052604081205460601c80610aab576040517f6eb2360200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600154604051600091610100900460e01b90610acd908790879060240161244e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000808373ffffffffffffffffffffffffffffffffffffffff1683604051610b549190612360565b600060405180830381855af49150503d8060008114610b8f576040519150601f19603f3d011682016040523d82523d6000602084013e610b94565b606091505b509150915081610bd0576040517f3cbbb65000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610bd98161237c565b94506000859003610c1c576040518681527f19e781916118c373dadcb7776fae0a2dbb6bbdeedae143ce68031e22801ef8659060200160405180910390a1610c50565b6040518681527fbbfee2df7f28b899771f1015dc85d7840ff9f6162f23f6aa99686e8fbd2ce1319060200160405180910390a15b5050505092915050565b50565b8015610c5a5760405160009033907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90849084818181858888f193505050503d8060008114610896576040519150601f19603f3d011682016040523d82523d6000602084013e610896565b6000808473ffffffffffffffffffffffffffffffffffffffff168484604051610cf19190612360565b60006040518083038185875af1925050503d8060008114610d2e576040519150601f19603f3d011682016040523d82523d6000602084013e610d33565b606091505b50915091508161089657805160208201fd5b610d5181858585611117565b15610d88576040517f01f595e300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168585604051610db19190612360565b60006040518083038185875af1925050503d8060008114610dee576040519150601f19603f3d011682016040523d82523d6000602084013e610df3565b606091505b509150915081610e0557805160208201fd5b505050505050565b600080805260208190527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb554610100900460ff1615610e78576040517f38fc28cb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080526020919091526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100179055565b604080516001808252818301909252600091816020015b60408051606080820183526000808352602083015291810191909152815260200190600190039081610eca57905050905060008273ffffffffffffffffffffffffffffffffffffffff16633253960f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6c9190612592565b604080516003808252608082019092529192506000919060208201606080368337019050509050631626ba7e60e01b81600081518110610fae57610fae612228565b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050818160018151811061100e5761100e612228565b7fffffffff000000000000000000000000000000000000000000000000000000009092166020928302919091019091015280517f8da5cb5b00000000000000000000000000000000000000000000000000000000908290600290811061107657611076612228565b7fffffffff00000000000000000000000000000000000000000000000000000000909216602092830291909101820152604080516060810190915273ffffffffffffffffffffffffffffffffffffffff861681529081016000815260200182815250836000815181106110eb576110eb612228565b602002602001018190525061111183600060405180602001604052806000815250611264565b50505050565b60008030858585604051602401611131949392919061264d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fac87185d0000000000000000000000000000000000000000000000000000000017905251909150600090819073ffffffffffffffffffffffffffffffffffffffff8916906111d3908590612360565b600060405180830381855af49150503d806000811461120e576040519150601f19603f3d011682016040523d82523d6000602084013e611213565b606091505b50915091508161124f576040517f01f595e300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112588161237c565b98975050505050505050565b7f183cde5d4f6bb7b445b8fc2f7f15d0fd1d162275aded24183babbffee7cd4921547f183cde5d4f6bb7b445b8fc2f7f15d0fd1d162275aded24183babbffee7cd491f9061ffff8116908190600090600716156112d35750600381901c60009081526001840160205260409020545b60005b87518110156113505761134383838a84815181106112f6576112f6612228565b6020026020010151600001518b858151811061131457611314612228565b6020026020010151602001518c868151811061133257611332612228565b6020026020010151604001516113f0565b90935091506001016112d6565b50828214611389576002840180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff84161790555b60078216156113ab57600382901c600090815260018501602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb6738787876040516113de93929190612696565b60405180910390a16104478686611e81565b600080807f183cde5d4f6bb7b445b8fc2f7f15d0fd1d162275aded24183babbffee7cd491f905060008451116114a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660448201527f6163657420746f2063757400000000000000000000000000000000000000000060648201526084016101ec565b60008560028111156114bc576114bc6125d4565b0361168c576114e38660405180606001604052806024815260200161290d60249139611f7a565b60005b845181101561168657600085828151811061150357611503612228565b6020908102919091018101517fffffffff000000000000000000000000000000000000000000000000000000008116600090815291859052604090912054909150606081901c156115d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f60448201527f6e207468617420616c726561647920657869737473000000000000000000000060648201526084016101ec565b7fffffffff0000000000000000000000000000000000000000000000000000000080831660008181526020879052604090207fffffffffffffffffffffffffffffffffffffffff00000000000000000000000060608d901b168e17905560e060058e901b811692831c199c909c1690821c179a81900361166a5760038c901c600090815260018601602052604081209b909b555b8b6116748161282d565b9c5050600190930192506114e6915050565b50611e75565b60018560028111156116a0576116a06125d4565b03611990576116c78660405180606001604052806028815260200161295960289139611f7a565b60005b84518110156116865760008582815181106116e7576116e7612228565b6020908102919091018101517fffffffff000000000000000000000000000000000000000000000000000000008116600090815291859052604090912054909150606081901c3081036117bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f4c69624469616d6f6e644375743a2043616e2774207265706c61636520696d6d60448201527f757461626c652066756e6374696f6e000000000000000000000000000000000060648201526084016101ec565b8973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611877576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60448201527f6374696f6e20776974682073616d652066756e6374696f6e000000000000000060648201526084016101ec565b73ffffffffffffffffffffffffffffffffffffffff811661191a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60448201527f6374696f6e207468617420646f65736e2774206578697374000000000000000060648201526084016101ec565b507fffffffff0000000000000000000000000000000000000000000000000000000090911660009081526020849052604090206bffffffffffffffffffffffff919091167fffffffffffffffffffffffffffffffffffffffff00000000000000000000000060608a901b161790556001016116ca565b60028560028111156119a4576119a46125d4565b03611ded5773ffffffffffffffffffffffffffffffffffffffff861615611a4d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f4c69624469616d6f6e644375743a2052656d6f7665206661636574206164647260448201527f657373206d75737420626520616464726573732830290000000000000000000060648201526084016101ec565b600388901c6007891660005b8651811015611dcd5760008a9003611a955782611a7581612865565b60008181526001870160205260409020549b50935060079250611aa39050565b81611a9f81612865565b9250505b6000806000808a8581518110611abb57611abb612228565b6020908102919091018101517fffffffff0000000000000000000000000000000000000000000000000000000081166000908152918a9052604090912054909150606081901c611b8d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603760248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e6360448201527f74696f6e207468617420646f65736e277420657869737400000000000000000060648201526084016101ec565b30606082901c03611c20576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560448201527f7461626c652066756e6374696f6e00000000000000000000000000000000000060648201526084016101ec565b600587901b8f901b94507fffffffff0000000000000000000000000000000000000000000000000000000080861690831614611cbe577fffffffff000000000000000000000000000000000000000000000000000000008516600090815260208a90526040902080547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166bffffffffffffffffffffffff83161790555b7fffffffff0000000000000000000000000000000000000000000000000000000091909116600090815260208990526040812055600381901c611fff16925060051b60e0169050858214611d53576000828152600188016020526040902080547fffffffff0000000000000000000000000000000000000000000000000000000080841c19909116908516831c179055611da4565b80837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c817fffffffff0000000000000000000000000000000000000000000000000000000060001b901c198e16179c505b84600003611dc257600086815260018801602052604081208190559c505b505050600101611a59565b5080611dda83600861289a565b611de491906128b7565b99505050611e75565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f4c69624469616d6f6e644375743a20496e636f7272656374204661636574437560448201527f74416374696f6e0000000000000000000000000000000000000000000000000060648201526084016101ec565b50959694955050505050565b73ffffffffffffffffffffffffffffffffffffffff8216611ea0575050565b611ec28260405180606001604052806028815260200161293160289139611f7a565b6000808373ffffffffffffffffffffffffffffffffffffffff1683604051611eea9190612360565b600060405180830381855af49150503d8060008114611f25576040519150601f19603f3d011682016040523d82523d6000602084013e611f2a565b606091505b50915091508161111157805115611f445780518082602001fd5b83836040517f192105d70000000000000000000000000000000000000000000000000000000081526004016101ec9291906128ca565b813b8181611111576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec91906128f9565b600080600060608486031215611fca57600080fd5b833567ffffffffffffffff811115611fe157600080fd5b84016101608187031215611ff457600080fd5b95602085013595506040909401359392505050565b60008083601f84011261201b57600080fd5b50813567ffffffffffffffff81111561203357600080fd5b6020830191508360208260051b850101111561204e57600080fd5b9250929050565b6000806000806000806060878903121561206e57600080fd5b863567ffffffffffffffff8082111561208657600080fd5b6120928a838b01612009565b909850965060208901359150808211156120ab57600080fd5b6120b78a838b01612009565b909650945060408901359150808211156120d057600080fd5b506120dd89828a01612009565b979a9699509497509295939492505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461211357600080fd5b919050565b60008083601f84011261212a57600080fd5b50813567ffffffffffffffff81111561214257600080fd5b60208301915083602082850101111561204e57600080fd5b60008060008060008060a0878903121561217357600080fd5b61217c876120ef565b955061218a602088016120ef565b9450612198604088016120ef565b93506121a6606088016120ef565b9250608087013567ffffffffffffffff8111156121c257600080fd5b6120dd89828a01612118565b600080600080606085870312156121e457600080fd5b6121ed856120ef565b935060208501359250604085013567ffffffffffffffff81111561221057600080fd5b61221c87828801612118565b95989497509550505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561226957600080fd5b610146826120ef565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126122a757600080fd5b83018035915067ffffffffffffffff8211156122c257600080fd5b60200191503681900382131561204e57600080fd5b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b6020815260006123346020830184866122d7565b949350505050565b60005b8381101561235757818101518382015260200161233f565b50506000910152565b6000825161237281846020870161233c565b9190910192915050565b805160208083015191908110156123bb577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8160200360031b1b821691505b50919050565b8183823760009101908152919050565b6000602082840312156123e357600080fd5b5051919050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261241f57600080fd5b830160208101925035905067ffffffffffffffff81111561243f57600080fd5b80360382131561204e57600080fd5b6040815261247c60408201612462856120ef565b73ffffffffffffffffffffffffffffffffffffffff169052565b60208301356060820152600061249560408501856123ea565b6101608060808601526124ad6101a0860183856122d7565b92506124bc60608801886123ea565b92507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0808786030160a08801526124f48585846122d7565b9450608089013560c088015260a089013560e0880152610100935060c089013584880152610120915060e089013582880152610140848a01358189015261253d838b018b6123ea565b955092508188870301848901526125558686856122d7565b9550612563818b018b6123ea565b9550935050808786030161018088015250506125808383836122d7565b93505050508260208301529392505050565b6000602082840312156125a457600080fd5b81517fffffffff000000000000000000000000000000000000000000000000000000008116811461014657600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000815180845261261b81602086016020860161233c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600073ffffffffffffffffffffffffffffffffffffffff80871683528086166020840152508360408301526080606083015261268c6080830184612603565b9695505050505050565b60006060808301818452808751808352608092508286019150828160051b8701016020808b0160005b848110156127c1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808a8503018652815188850173ffffffffffffffffffffffffffffffffffffffff82511686528482015160038110612748577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b868601526040918201519186018a905281519081905290840190600090898701905b808310156127ac5783517fffffffff0000000000000000000000000000000000000000000000000000000016825292860192600192909201919086019061276a565b509785019795505050908201906001016126bf565b505073ffffffffffffffffffffffffffffffffffffffff8a169088015286810360408801526127f08189612603565b9a9950505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361285e5761285e6127fe565b5060010190565b600081612874576128746127fe565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b80820281158282048414176128b1576128b16127fe565b92915050565b808201808211156128b1576128b16127fe565b73ffffffffffffffffffffffffffffffffffffffff831681526040602082015260006123346040830184612603565b602081526000610146602083018461260356fe4c69624469616d6f6e644375743a2041646420666163657420686173206e6f20636f64654c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a205265706c61636520666163657420686173206e6f20636f6465a2646970667358221220a952f19990a20474450919a2df9ddff4430a71350892e0954f2bb073575ad64864736f6c63430008150033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c8063b0d691fe11610050578063b0d691fe146100c5578063b61d27f61461010c578063d087d2881461011f57600080fd5b80633a871cdd1461007757806347e1da2a1461009d5780634a936417146100b2575b600080fd5b61008a610085366004611fb5565b610127565b6040519081526020015b60405180910390f35b6100b06100ab366004612055565b61014d565b005b61008a6100c036600461215a565b610450565b60015465010000000000900473ffffffffffffffffffffffffffffffffffffffff1660405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610094565b6100b061011a3660046121ce565b6106d0565b61008a61089d565b600061013161095e565b61013b8484610a16565b905061014682610c5d565b9392505050565b6000805260036020527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff5467ffffffffffffffff9081164290911610156101f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4163636f756e74204c6f636b656400000000000000000000000000000000000060448201526064015b60405180910390fd5b6101fd61095e565b848114158061020c5750848314155b15610243576040517fdde5716100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006102b87fac87185d000000000000000000000000000000000000000000000000000000006000527f183cde5d4f6bb7b445b8fc2f7f15d0fd1d162275aded24183babbffee7cd491f6020527f6d9f2463c8c0d8cb8be556a773ab21d4321328909a1725f2ef7cae0c320e95da5460601c90565b905073ffffffffffffffffffffffffffffffffffffffff811661038f5760005b86811015610389576103818888838181106102f5576102f5612228565b905060200201602081019061030a9190612257565b87878481811061031c5761031c612228565b9050602002013586868581811061033557610335612228565b90506020028101906103479190612272565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610cc892505050565b6001016102d8565b50610447565b60005b868110156104455761043d8888838181106103af576103af612228565b90506020020160208101906103c49190612257565b8787848181106103d6576103d6612228565b905060200201358686858181106103ef576103ef612228565b90506020028101906104019190612272565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250889250610d45915050565b600101610392565b505b50505050505050565b600061045a610e0d565b6001805473ffffffffffffffffffffffffffffffffffffffff88811665010000000000027fffffffffffffff0000000000000000000000000000000000000000ffffffffff90921691909117909155600280548783167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091557f183cde5d4f6bb7b445b8fc2f7f15d0fd1d162275aded24183babbffee7cd492380549287169290911691909117905561051187610eb3565b60008383604051602401610526929190612320565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fcd9b47e40000000000000000000000000000000000000000000000000000000017905251909150600090819073ffffffffffffffffffffffffffffffffffffffff8b16906105c8908590612360565b600060405180830381855af49150503d8060008114610603576040519150601f19603f3d011682016040523d82523d6000602084013e610608565b606091505b5091509150811580610623575061061e8161237c565b600114155b1561065a576040517f1602372100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60019350858560405161066e9291906123c1565b60405190819003812060015490916501000000000090910473ffffffffffffffffffffffffffffffffffffffff16907fd429ff0b972be4ae725700a373d05007287994e4c86cb83315b43ffa85b595fd90600090a35050509695505050505050565b6000805260036020527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff5467ffffffffffffffff908116429091161015610773576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4163636f756e74204c6f636b656400000000000000000000000000000000000060448201526064016101ec565b61077b61095e565b60006107f07fac87185d000000000000000000000000000000000000000000000000000000006000527f183cde5d4f6bb7b445b8fc2f7f15d0fd1d162275aded24183babbffee7cd491f6020527f6d9f2463c8c0d8cb8be556a773ab21d4321328909a1725f2ef7cae0c320e95da5460601c90565b905073ffffffffffffffffffffffffffffffffffffffff81166108535761084e858585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610cc892505050565b610896565b610896858585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250879250610d45915050565b5050505050565b60015460009065010000000000900473ffffffffffffffffffffffffffffffffffffffff166040517f35567e1a0000000000000000000000000000000000000000000000000000000081523060048201526000602482015273ffffffffffffffffffffffffffffffffffffffff91909116906335567e1a90604401602060405180830381865afa158015610935573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095991906123d1565b905090565b60015465010000000000900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a14576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f6163636f756e743a206e6f742066726f6d20456e747279506f696e740000000060448201526064016101ec565b565b600154610100900460e01b7fffffffff000000000000000000000000000000000000000000000000000000001660009081527f183cde5d4f6bb7b445b8fc2f7f15d0fd1d162275aded24183babbffee7cd491f602052604081205460601c80610aab576040517f6eb2360200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600154604051600091610100900460e01b90610acd908790879060240161244e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000808373ffffffffffffffffffffffffffffffffffffffff1683604051610b549190612360565b600060405180830381855af49150503d8060008114610b8f576040519150601f19603f3d011682016040523d82523d6000602084013e610b94565b606091505b509150915081610bd0576040517f3cbbb65000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610bd98161237c565b94506000859003610c1c576040518681527f19e781916118c373dadcb7776fae0a2dbb6bbdeedae143ce68031e22801ef8659060200160405180910390a1610c50565b6040518681527fbbfee2df7f28b899771f1015dc85d7840ff9f6162f23f6aa99686e8fbd2ce1319060200160405180910390a15b5050505092915050565b50565b8015610c5a5760405160009033907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90849084818181858888f193505050503d8060008114610896576040519150601f19603f3d011682016040523d82523d6000602084013e610896565b6000808473ffffffffffffffffffffffffffffffffffffffff168484604051610cf19190612360565b60006040518083038185875af1925050503d8060008114610d2e576040519150601f19603f3d011682016040523d82523d6000602084013e610d33565b606091505b50915091508161089657805160208201fd5b610d5181858585611117565b15610d88576040517f01f595e300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168585604051610db19190612360565b60006040518083038185875af1925050503d8060008114610dee576040519150601f19603f3d011682016040523d82523d6000602084013e610df3565b606091505b509150915081610e0557805160208201fd5b505050505050565b600080805260208190527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb554610100900460ff1615610e78576040517f38fc28cb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080526020919091526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100179055565b604080516001808252818301909252600091816020015b60408051606080820183526000808352602083015291810191909152815260200190600190039081610eca57905050905060008273ffffffffffffffffffffffffffffffffffffffff16633253960f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6c9190612592565b604080516003808252608082019092529192506000919060208201606080368337019050509050631626ba7e60e01b81600081518110610fae57610fae612228565b60200260200101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050818160018151811061100e5761100e612228565b7fffffffff000000000000000000000000000000000000000000000000000000009092166020928302919091019091015280517f8da5cb5b00000000000000000000000000000000000000000000000000000000908290600290811061107657611076612228565b7fffffffff00000000000000000000000000000000000000000000000000000000909216602092830291909101820152604080516060810190915273ffffffffffffffffffffffffffffffffffffffff861681529081016000815260200182815250836000815181106110eb576110eb612228565b602002602001018190525061111183600060405180602001604052806000815250611264565b50505050565b60008030858585604051602401611131949392919061264d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fac87185d0000000000000000000000000000000000000000000000000000000017905251909150600090819073ffffffffffffffffffffffffffffffffffffffff8916906111d3908590612360565b600060405180830381855af49150503d806000811461120e576040519150601f19603f3d011682016040523d82523d6000602084013e611213565b606091505b50915091508161124f576040517f01f595e300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112588161237c565b98975050505050505050565b7f183cde5d4f6bb7b445b8fc2f7f15d0fd1d162275aded24183babbffee7cd4921547f183cde5d4f6bb7b445b8fc2f7f15d0fd1d162275aded24183babbffee7cd491f9061ffff8116908190600090600716156112d35750600381901c60009081526001840160205260409020545b60005b87518110156113505761134383838a84815181106112f6576112f6612228565b6020026020010151600001518b858151811061131457611314612228565b6020026020010151602001518c868151811061133257611332612228565b6020026020010151604001516113f0565b90935091506001016112d6565b50828214611389576002840180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff84161790555b60078216156113ab57600382901c600090815260018501602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb6738787876040516113de93929190612696565b60405180910390a16104478686611e81565b600080807f183cde5d4f6bb7b445b8fc2f7f15d0fd1d162275aded24183babbffee7cd491f905060008451116114a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f4c69624469616d6f6e644375743a204e6f2073656c6563746f727320696e206660448201527f6163657420746f2063757400000000000000000000000000000000000000000060648201526084016101ec565b60008560028111156114bc576114bc6125d4565b0361168c576114e38660405180606001604052806024815260200161290d60249139611f7a565b60005b845181101561168657600085828151811061150357611503612228565b6020908102919091018101517fffffffff000000000000000000000000000000000000000000000000000000008116600090815291859052604090912054909150606081901c156115d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f4c69624469616d6f6e644375743a2043616e2774206164642066756e6374696f60448201527f6e207468617420616c726561647920657869737473000000000000000000000060648201526084016101ec565b7fffffffff0000000000000000000000000000000000000000000000000000000080831660008181526020879052604090207fffffffffffffffffffffffffffffffffffffffff00000000000000000000000060608d901b168e17905560e060058e901b811692831c199c909c1690821c179a81900361166a5760038c901c600090815260018601602052604081209b909b555b8b6116748161282d565b9c5050600190930192506114e6915050565b50611e75565b60018560028111156116a0576116a06125d4565b03611990576116c78660405180606001604052806028815260200161295960289139611f7a565b60005b84518110156116865760008582815181106116e7576116e7612228565b6020908102919091018101517fffffffff000000000000000000000000000000000000000000000000000000008116600090815291859052604090912054909150606081901c3081036117bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f4c69624469616d6f6e644375743a2043616e2774207265706c61636520696d6d60448201527f757461626c652066756e6374696f6e000000000000000000000000000000000060648201526084016101ec565b8973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611877576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60448201527f6374696f6e20776974682073616d652066756e6374696f6e000000000000000060648201526084016101ec565b73ffffffffffffffffffffffffffffffffffffffff811661191a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f4c69624469616d6f6e644375743a2043616e2774207265706c6163652066756e60448201527f6374696f6e207468617420646f65736e2774206578697374000000000000000060648201526084016101ec565b507fffffffff0000000000000000000000000000000000000000000000000000000090911660009081526020849052604090206bffffffffffffffffffffffff919091167fffffffffffffffffffffffffffffffffffffffff00000000000000000000000060608a901b161790556001016116ca565b60028560028111156119a4576119a46125d4565b03611ded5773ffffffffffffffffffffffffffffffffffffffff861615611a4d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f4c69624469616d6f6e644375743a2052656d6f7665206661636574206164647260448201527f657373206d75737420626520616464726573732830290000000000000000000060648201526084016101ec565b600388901c6007891660005b8651811015611dcd5760008a9003611a955782611a7581612865565b60008181526001870160205260409020549b50935060079250611aa39050565b81611a9f81612865565b9250505b6000806000808a8581518110611abb57611abb612228565b6020908102919091018101517fffffffff0000000000000000000000000000000000000000000000000000000081166000908152918a9052604090912054909150606081901c611b8d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603760248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f76652066756e6360448201527f74696f6e207468617420646f65736e277420657869737400000000000000000060648201526084016101ec565b30606082901c03611c20576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f4c69624469616d6f6e644375743a2043616e27742072656d6f766520696d6d7560448201527f7461626c652066756e6374696f6e00000000000000000000000000000000000060648201526084016101ec565b600587901b8f901b94507fffffffff0000000000000000000000000000000000000000000000000000000080861690831614611cbe577fffffffff000000000000000000000000000000000000000000000000000000008516600090815260208a90526040902080547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166bffffffffffffffffffffffff83161790555b7fffffffff0000000000000000000000000000000000000000000000000000000091909116600090815260208990526040812055600381901c611fff16925060051b60e0169050858214611d53576000828152600188016020526040902080547fffffffff0000000000000000000000000000000000000000000000000000000080841c19909116908516831c179055611da4565b80837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c817fffffffff0000000000000000000000000000000000000000000000000000000060001b901c198e16179c505b84600003611dc257600086815260018801602052604081208190559c505b505050600101611a59565b5080611dda83600861289a565b611de491906128b7565b99505050611e75565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f4c69624469616d6f6e644375743a20496e636f7272656374204661636574437560448201527f74416374696f6e0000000000000000000000000000000000000000000000000060648201526084016101ec565b50959694955050505050565b73ffffffffffffffffffffffffffffffffffffffff8216611ea0575050565b611ec28260405180606001604052806028815260200161293160289139611f7a565b6000808373ffffffffffffffffffffffffffffffffffffffff1683604051611eea9190612360565b600060405180830381855af49150503d8060008114611f25576040519150601f19603f3d011682016040523d82523d6000602084013e611f2a565b606091505b50915091508161111157805115611f445780518082602001fd5b83836040517f192105d70000000000000000000000000000000000000000000000000000000081526004016101ec9291906128ca565b813b8181611111576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec91906128f9565b600080600060608486031215611fca57600080fd5b833567ffffffffffffffff811115611fe157600080fd5b84016101608187031215611ff457600080fd5b95602085013595506040909401359392505050565b60008083601f84011261201b57600080fd5b50813567ffffffffffffffff81111561203357600080fd5b6020830191508360208260051b850101111561204e57600080fd5b9250929050565b6000806000806000806060878903121561206e57600080fd5b863567ffffffffffffffff8082111561208657600080fd5b6120928a838b01612009565b909850965060208901359150808211156120ab57600080fd5b6120b78a838b01612009565b909650945060408901359150808211156120d057600080fd5b506120dd89828a01612009565b979a9699509497509295939492505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461211357600080fd5b919050565b60008083601f84011261212a57600080fd5b50813567ffffffffffffffff81111561214257600080fd5b60208301915083602082850101111561204e57600080fd5b60008060008060008060a0878903121561217357600080fd5b61217c876120ef565b955061218a602088016120ef565b9450612198604088016120ef565b93506121a6606088016120ef565b9250608087013567ffffffffffffffff8111156121c257600080fd5b6120dd89828a01612118565b600080600080606085870312156121e457600080fd5b6121ed856120ef565b935060208501359250604085013567ffffffffffffffff81111561221057600080fd5b61221c87828801612118565b95989497509550505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561226957600080fd5b610146826120ef565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126122a757600080fd5b83018035915067ffffffffffffffff8211156122c257600080fd5b60200191503681900382131561204e57600080fd5b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b6020815260006123346020830184866122d7565b949350505050565b60005b8381101561235757818101518382015260200161233f565b50506000910152565b6000825161237281846020870161233c565b9190910192915050565b805160208083015191908110156123bb577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8160200360031b1b821691505b50919050565b8183823760009101908152919050565b6000602082840312156123e357600080fd5b5051919050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261241f57600080fd5b830160208101925035905067ffffffffffffffff81111561243f57600080fd5b80360382131561204e57600080fd5b6040815261247c60408201612462856120ef565b73ffffffffffffffffffffffffffffffffffffffff169052565b60208301356060820152600061249560408501856123ea565b6101608060808601526124ad6101a0860183856122d7565b92506124bc60608801886123ea565b92507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0808786030160a08801526124f48585846122d7565b9450608089013560c088015260a089013560e0880152610100935060c089013584880152610120915060e089013582880152610140848a01358189015261253d838b018b6123ea565b955092508188870301848901526125558686856122d7565b9550612563818b018b6123ea565b9550935050808786030161018088015250506125808383836122d7565b93505050508260208301529392505050565b6000602082840312156125a457600080fd5b81517fffffffff000000000000000000000000000000000000000000000000000000008116811461014657600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000815180845261261b81602086016020860161233c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600073ffffffffffffffffffffffffffffffffffffffff80871683528086166020840152508360408301526080606083015261268c6080830184612603565b9695505050505050565b60006060808301818452808751808352608092508286019150828160051b8701016020808b0160005b848110156127c1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808a8503018652815188850173ffffffffffffffffffffffffffffffffffffffff82511686528482015160038110612748577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b868601526040918201519186018a905281519081905290840190600090898701905b808310156127ac5783517fffffffff0000000000000000000000000000000000000000000000000000000016825292860192600192909201919086019061276a565b509785019795505050908201906001016126bf565b505073ffffffffffffffffffffffffffffffffffffffff8a169088015286810360408801526127f08189612603565b9a9950505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361285e5761285e6127fe565b5060010190565b600081612874576128746127fe565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b80820281158282048414176128b1576128b16127fe565b92915050565b808201808211156128b1576128b16127fe565b73ffffffffffffffffffffffffffffffffffffffff831681526040602082015260006123346040830184612603565b602081526000610146602083018461260356fe4c69624469616d6f6e644375743a2041646420666163657420686173206e6f20636f64654c69624469616d6f6e644375743a205f696e6974206164647265737320686173206e6f20636f64654c69624469616d6f6e644375743a205265706c61636520666163657420686173206e6f20636f6465a2646970667358221220a952f19990a20474450919a2df9ddff4430a71350892e0954f2bb073575ad64864736f6c63430008150033",
  "devdoc": {
    "author": "David Yongjun Kim (@Powerstream3604)",
    "details": "Account module contract that provides the account features and initialization of signer      compatible with EIP-1271 & EIP-4337",
    "kind": "dev",
    "methods": {
      "execute(address,uint256,bytes)": {
        "details": "This method executes the calldata coming from the EntryPoint.      Barz will make a call to this function for majority of typical execution(e.g. Swap, Token Transfer)",
        "params": {
          "_dest": "Address of destination where the call will be forwarded to",
          "_func": "Bytes of calldata to execute in the destination address",
          "_value": "Amount of native coin the owner is willing to send(e.g. ETH, BNB)"
        }
      },
      "executeBatch(address[],uint256[],bytes[])": {
        "details": "This method batch executes the calldata coming from the EntryPoint.      Barz will make a call to this function for majority of typical execution(e.g. Swap, Token Transfer)",
        "params": {
          "_dest": "Array of addresses of destination where the call will be forwarded to",
          "_func": "Array of bytes of calldata to execute in the destination address",
          "_value": "Array of amount of native coin the owner is willing to send(e.g. ETH, BNB)"
        }
      },
      "initialize(address,address,address,address,bytes)": {
        "details": "This method can only be called during the initialization or signature migration.      If the proxy contract was created without initialization, anyone can call initialize.      Barz calls initialize in constructor in an atomic transaction during deployment",
        "params": {
          "_anEntryPoint": "Entrypoint contract defined in EIP-4337 handling the flow of UserOp",
          "_defaultFallBackHandler": "Middleware contract for default facets",
          "_facetRegistry": "Registry of Facets that hold all facet information",
          "_ownerPublicKey": "Bytes of owner public key",
          "_verificationFacet": "Facet contract handling the verificationi"
        }
      }
    },
    "title": "Account Facet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "This constructor ensures that this contract can only be used as singleton for Proxy contracts"
      },
      "entryPoint()": {
        "notice": "Returns the address of EntryPoint contract registered to Barz account"
      },
      "execute(address,uint256,bytes)": {
        "notice": "Calls the destination with inputted calldata and value from EntryPoint"
      },
      "executeBatch(address[],uint256[],bytes[])": {
        "notice": "Batch calls the destination with inputted calldata and value from EntryPoint"
      },
      "getNonce()": {
        "notice": "Return the account nonce. This method returns the next sequential nonce. For a nonce of a specific key, use `entrypoint.getNonce(account, key)`"
      },
      "initialize(address,address,address,address,bytes)": {
        "notice": "Initializes the initial storage of the Barz contract."
      },
      "validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": {
        "notice": "Validate user's signature and nonce. subclass doesn't need to override this method. Instead, it should override the specific internal validation methods."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 27866,
        "contract": "contracts/facets/AccountFacet.sol:AccountFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)27613_storage"
      }
    ],
    "types": {
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(IEntryPoint)12286": {
        "encoding": "inplace",
        "label": "contract IEntryPoint",
        "numberOfBytes": "20"
      },
      "t_contract(IFacetRegistry)26148": {
        "encoding": "inplace",
        "label": "contract IFacetRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(InitializersStorage)27592_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct InitializersStorage)",
        "numberOfBytes": "32",
        "value": "t_struct(InitializersStorage)27592_storage"
      },
      "t_mapping(t_uint256,t_struct(Lock)27585_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Lock)",
        "numberOfBytes": "32",
        "value": "t_struct(Lock)27585_storage"
      },
      "t_struct(AppStorage)27613_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 27597,
            "contract": "contracts/facets/AccountFacet.sol:AccountFacet",
            "label": "initStorage",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(InitializersStorage)27592_storage)"
          },
          {
            "astId": 27599,
            "contract": "contracts/facets/AccountFacet.sol:AccountFacet",
            "label": "signerMigration",
            "offset": 0,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 27601,
            "contract": "contracts/facets/AccountFacet.sol:AccountFacet",
            "label": "validateOwnerSignatureSelector",
            "offset": 1,
            "slot": "1",
            "type": "t_bytes4"
          },
          {
            "astId": 27604,
            "contract": "contracts/facets/AccountFacet.sol:AccountFacet",
            "label": "entryPoint",
            "offset": 5,
            "slot": "1",
            "type": "t_contract(IEntryPoint)12286"
          },
          {
            "astId": 27607,
            "contract": "contracts/facets/AccountFacet.sol:AccountFacet",
            "label": "facetRegistry",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IFacetRegistry)26148"
          },
          {
            "astId": 27612,
            "contract": "contracts/facets/AccountFacet.sol:AccountFacet",
            "label": "locks",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_struct(Lock)27585_storage)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(InitializersStorage)27592_storage": {
        "encoding": "inplace",
        "label": "struct InitializersStorage",
        "members": [
          {
            "astId": 27587,
            "contract": "contracts/facets/AccountFacet.sol:AccountFacet",
            "label": "signerInitialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 27589,
            "contract": "contracts/facets/AccountFacet.sol:AccountFacet",
            "label": "accountInitialized",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 27591,
            "contract": "contracts/facets/AccountFacet.sol:AccountFacet",
            "label": "restrictionsInitialized",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Lock)27585_storage": {
        "encoding": "inplace",
        "label": "struct Lock",
        "members": [
          {
            "astId": 27582,
            "contract": "contracts/facets/AccountFacet.sol:AccountFacet",
            "label": "release",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 27584,
            "contract": "contracts/facets/AccountFacet.sol:AccountFacet",
            "label": "locker",
            "offset": 8,
            "slot": "0",
            "type": "t_bytes4"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}