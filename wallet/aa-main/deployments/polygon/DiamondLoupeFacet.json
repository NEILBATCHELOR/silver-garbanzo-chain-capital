{
  "address": "0xCe36b85d12D81cd619C745c7717f3396E184Ac7C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_functionSelector",
          "type": "bytes4"
        }
      ],
      "name": "facetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "facetAddress_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_functionSelector",
          "type": "bytes4"
        }
      ],
      "name": "facetAddressFromStorage",
      "outputs": [
        {
          "internalType": "address",
          "name": "facetAddress_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facetAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "facetAddresses_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facetAddressesFromStorage",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "facetAddresses_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_facet",
          "type": "address"
        }
      ],
      "name": "facetFunctionSelectors",
      "outputs": [
        {
          "internalType": "bytes4[]",
          "name": "facetFunctionSelectors_",
          "type": "bytes4[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_facet",
          "type": "address"
        }
      ],
      "name": "facetFunctionSelectorsFromStorage",
      "outputs": [
        {
          "internalType": "bytes4[]",
          "name": "facetFunctionSelectors_",
          "type": "bytes4[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondLoupe.Facet[]",
          "name": "facets_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facetsFromStorage",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondLoupe.Facet[]",
          "name": "facets_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSupported",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "4356503edd8ae34e73cb6dd1c8e2fc8a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_functionSelector\",\"type\":\"bytes4\"}],\"name\":\"facetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"facetAddress_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_functionSelector\",\"type\":\"bytes4\"}],\"name\":\"facetAddressFromStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"facetAddress_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facetAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"facetAddresses_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facetAddressesFromStorage\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"facetAddresses_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_facet\",\"type\":\"address\"}],\"name\":\"facetFunctionSelectors\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"facetFunctionSelectors_\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_facet\",\"type\":\"address\"}],\"name\":\"facetFunctionSelectorsFromStorage\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"facetFunctionSelectors_\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondLoupe.Facet[]\",\"name\":\"facets_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facetsFromStorage\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondLoupe.Facet[]\",\"name\":\"facets_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSupported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"David Yongjun Kim (@Powerstream3604)\",\"details\":\"DiamondLoupe contract compatible with EIP-2535\",\"kind\":\"dev\",\"methods\":{\"facetAddress(bytes4)\":{\"details\":\"If facet is not found return address(0).\",\"params\":{\"_functionSelector\":\"The function selector.\"},\"returns\":{\"facetAddress_\":\"The facet address.\"}},\"facetAddressFromStorage(bytes4)\":{\"params\":{\"_functionSelector\":\"Function selector to fetch the facet address from diamond storage\"},\"returns\":{\"facetAddress_\":\"Facet address mapped with the function selector\"}},\"facetAddresses()\":{\"returns\":{\"facetAddresses_\":\"facetAddresses_\"}},\"facetAddressesFromStorage()\":{\"returns\":{\"facetAddresses_\":\"All facet addresses attached directly to diamond storage\"}},\"facetFunctionSelectors(address)\":{\"params\":{\"_facet\":\"The facet address.\"},\"returns\":{\"facetFunctionSelectors_\":\"facetFunctionSelectors_\"}},\"facetFunctionSelectorsFromStorage(address)\":{\"params\":{\"_facet\":\"Facet address to fetch the facet function selectors from diamond storage\"},\"returns\":{\"facetFunctionSelectors_\":\"Facet function selectors of the given facet address\"}},\"facets()\":{\"details\":\"Barz uses a special architecture called default fallback handler. Default Fallback handler is used as a middleware      that holds the mapping of facet function selector and facet address that Barz uses. This helps Barz to reduce      significant amount of gas during the initialization process.      Hence, this method aggregates both the facet information from DefaulFallbackHandler and in diamond storage and shows the data to users.\",\"returns\":{\"facets_\":\"Facet\"}},\"facetsFromStorage()\":{\"returns\":{\"facets_\":\"Facet information attached directly to diamond storage\"}},\"supportsInterface(bytes4)\":{\"params\":{\"_interfaceId\":\"Interface ID for detecting the interface\"},\"returns\":{\"isSupported\":\"Bool value showing if the standard is supported in the contract\"}}},\"title\":\"DiamondLoupe Facet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"facetAddress(bytes4)\":{\"notice\":\"Gets the facet that supports the given selector.\"},\"facetAddressFromStorage(bytes4)\":{\"notice\":\"Returns the facet address attached to the given function selector. This excludes the facets from the default fallback handler\"},\"facetAddresses()\":{\"notice\":\"Get all the facet addresses used by Barz.\"},\"facetAddressesFromStorage()\":{\"notice\":\"Returns all facet addresses attached directly to diamond storage. This excludes the facets from the default fallback handler\"},\"facetFunctionSelectors(address)\":{\"notice\":\"Gets all the function selectors provided by a facet.\"},\"facetFunctionSelectorsFromStorage(address)\":{\"notice\":\"Returns function selectors of given facet address attached directly to diamond storage. This excludes the facets from the default fallback handler\"},\"facets()\":{\"notice\":\"Gets all facets and their selectors.\"},\"facetsFromStorage()\":{\"notice\":\"Returns the facet from the diamond storage. This excludes the facets from the default fallback handler\"},\"supportsInterface(bytes4)\":{\"notice\":\"SupportInterface to be compatible with EIP 165\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/base/DiamondLoupeFacet.sol\":\"DiamondLoupeFacet\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Recipient.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1a5d61db2733202ba361e6d6741cd2e662380e22b80e987eacfc91973f2267dc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/facets/base/DiamondLoupeFacet.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.21;\\n\\nimport {IERC777Recipient} from \\\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\\\";\\nimport {IERC165} from \\\"../../interfaces/ERC/IERC165.sol\\\";\\nimport {IERC1271} from \\\"../../interfaces/ERC/IERC1271.sol\\\";\\nimport {IERC677Receiver} from \\\"../../interfaces/ERC/IERC677Receiver.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {IERC1155Receiver} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport {LibDiamond} from \\\"../../libraries/LibDiamond.sol\\\";\\nimport {LibLoupe} from \\\"../../libraries/LibLoupe.sol\\\";\\nimport {LibUtils} from \\\"../../libraries/LibUtils.sol\\\";\\nimport {IDiamondCut} from \\\"../../facets/base/interfaces/IDiamondCut.sol\\\";\\nimport {IStorageLoupe} from \\\"./interfaces/IStorageLoupe.sol\\\";\\nimport {IDiamondLoupe} from \\\"./interfaces/IDiamondLoupe.sol\\\";\\n\\n/**\\n * @title DiamondLoupe Facet\\n * @dev DiamondLoupe contract compatible with EIP-2535\\n * @author David Yongjun Kim (@Powerstream3604)\\n */\\ncontract DiamondLoupeFacet is IDiamondLoupe, IStorageLoupe, IERC165 {\\n    // Diamond Loupe Functions\\n    ////////////////////////////////////////////////////////////////////\\n    /// These functions are expected to be called frequently by tools off-chain.\\n\\n    /**\\n     * @notice Gets all facets and their selectors.\\n     * @dev Barz uses a special architecture called default fallback handler. Default Fallback handler is used as a middleware\\n     *      that holds the mapping of facet function selector and facet address that Barz uses. This helps Barz to reduce\\n     *      significant amount of gas during the initialization process.\\n     *      Hence, this method aggregates both the facet information from DefaulFallbackHandler and in diamond storage and shows the data to users.\\n     * @return facets_ Facet\\n     */\\n    function facets() public view override returns (Facet[] memory facets_) {\\n        Facet[] memory defaultFacet = LibDiamond\\n            .diamondStorage()\\n            .defaultFallbackHandler\\n            .facets();\\n        Facet[] memory _facets = LibLoupe.facets();\\n        uint256 numFacets = _facets.length;\\n        bytes4[] memory keys;\\n        address[] memory values;\\n        for (uint256 i; i < numFacets; ) {\\n            uint256 selectorsLength = _facets[i].functionSelectors.length;\\n            for (uint256 j; j < selectorsLength; ) {\\n                (keys, values) = LibUtils.setValue(\\n                    keys,\\n                    values,\\n                    _facets[i].functionSelectors[j],\\n                    _facets[i].facetAddress\\n                );\\n                unchecked {\\n                    ++j;\\n                }\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        {\\n            bool iIncrement;\\n            for (uint256 i; i < defaultFacet.length; ) {\\n                bool jIncrement;\\n                for (\\n                    uint256 j;\\n                    j < defaultFacet[i].functionSelectors.length;\\n\\n                ) {\\n                    if (\\n                        LibUtils.getValue(\\n                            keys,\\n                            values,\\n                            defaultFacet[i].functionSelectors[j]\\n                        ) != address(0)\\n                    ) {\\n                        if (defaultFacet[i].functionSelectors.length == 1) {\\n                            defaultFacet = LibUtils.removeFacetElement(\\n                                defaultFacet,\\n                                i\\n                            );\\n                            iIncrement = true;\\n                            break;\\n                        }\\n                        defaultFacet[i].functionSelectors = LibUtils\\n                            .removeElement(\\n                                defaultFacet[i].functionSelectors,\\n                                j\\n                            );\\n                        jIncrement = true;\\n                    }\\n                    if (!jIncrement) {\\n                        unchecked {\\n                            ++j;\\n                        }\\n                    } else {\\n                        jIncrement = false;\\n                    }\\n                }\\n                if (!iIncrement) {\\n                    unchecked {\\n                        ++i;\\n                    }\\n                } else {\\n                    iIncrement = false;\\n                }\\n            }\\n        }\\n        {\\n            uint256 facetLength = numFacets + defaultFacet.length;\\n            facets_ = new Facet[](facetLength);\\n            uint256 defaultFacetIndex;\\n            for (uint256 i; i < facetLength; ) {\\n                if (i < numFacets) {\\n                    facets_[i] = _facets[i];\\n                    bool jIncrementor;\\n                    for (uint256 j; j < defaultFacet.length; ) {\\n                        if (\\n                            facets_[i].facetAddress ==\\n                            defaultFacet[j].facetAddress\\n                        ) {\\n                            facets_[i].functionSelectors = LibUtils.mergeArrays(\\n                                _facets[i].functionSelectors,\\n                                defaultFacet[j].functionSelectors\\n                            );\\n                            defaultFacet = LibUtils.removeFacetElement(\\n                                defaultFacet,\\n                                j\\n                            );\\n                            jIncrementor = true;\\n                            {\\n                                facets_ = LibUtils.removeFacetElement(\\n                                    facets_,\\n                                    facets_.length - 1\\n                                );\\n                            }\\n                            --facetLength;\\n                        }\\n                        if (!jIncrementor) {\\n                            unchecked {\\n                                ++j;\\n                            }\\n                        } else {\\n                            jIncrementor = false;\\n                        }\\n                    }\\n                } else {\\n                    facets_[i] = defaultFacet[defaultFacetIndex];\\n                    ++defaultFacetIndex;\\n                }\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets all the function selectors provided by a facet.\\n     * @param _facet The facet address.\\n     * @return facetFunctionSelectors_\\n     */\\n    function facetFunctionSelectors(\\n        address _facet\\n    ) external view override returns (bytes4[] memory facetFunctionSelectors_) {\\n        Facet[] memory facet = facets();\\n        uint256 facetLength = facet.length;\\n        for (uint256 i; i < facetLength; ) {\\n            if (facet[i].facetAddress == _facet)\\n                return facet[i].functionSelectors;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return facetFunctionSelectors_;\\n    }\\n\\n    /**\\n     * @notice Get all the facet addresses used by Barz.\\n     * @return facetAddresses_\\n     */\\n    function facetAddresses()\\n        external\\n        view\\n        override\\n        returns (address[] memory facetAddresses_)\\n    {\\n        Facet[] memory facet = facets();\\n        uint256 facetLength = facet.length;\\n        facetAddresses_ = new address[](facetLength);\\n        for (uint256 i; i < facetLength; ) {\\n            facetAddresses_[i] = facet[i].facetAddress;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the facet that supports the given selector.\\n     * @dev If facet is not found return address(0).\\n     * @param _functionSelector The function selector.\\n     * @return facetAddress_ The facet address.\\n     */\\n    function facetAddress(\\n        bytes4 _functionSelector\\n    ) external view override returns (address facetAddress_) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n\\n        facetAddress_ = address(bytes20(ds.facets[_functionSelector]));\\n        if (facetAddress_ == address(0)) {\\n            facetAddress_ = IDiamondLoupe(ds.defaultFallbackHandler)\\n                .facetAddress(_functionSelector);\\n        }\\n    }\\n\\n    /**\\n     * @notice SupportInterface to be compatible with EIP 165\\n     * @param _interfaceId Interface ID for detecting the interface\\n     * @return isSupported Bool value showing if the standard is supported in the contract\\n     */\\n    function supportsInterface(\\n        bytes4 _interfaceId\\n    ) external view override returns (bool isSupported) {\\n        isSupported =\\n            _interfaceId == type(IERC165).interfaceId ||\\n            _interfaceId == IDiamondCut.diamondCut.selector ||\\n            _interfaceId == type(IDiamondLoupe).interfaceId ||\\n            _interfaceId == type(IERC1155Receiver).interfaceId ||\\n            _interfaceId == type(IERC721Receiver).interfaceId ||\\n            _interfaceId == type(IERC777Recipient).interfaceId ||\\n            _interfaceId == IERC1271.isValidSignature.selector ||\\n            _interfaceId == type(IERC677Receiver).interfaceId ||\\n            LibDiamond.diamondStorage().supportedInterfaces[_interfaceId];\\n    }\\n\\n    /**\\n     * @notice Returns the facet from the diamond storage. This excludes the facets from the default fallback handler\\n     * @return facets_ Facet information attached directly to diamond storage\\n     */\\n    function facetsFromStorage()\\n        external\\n        view\\n        override\\n        returns (Facet[] memory facets_)\\n    {\\n        facets_ = LibLoupe.facets();\\n    }\\n\\n    /**\\n     * @notice Returns the facet address attached to the given function selector. This excludes the facets from the default fallback handler\\n     * @param _functionSelector Function selector to fetch the facet address from diamond storage\\n     * @return facetAddress_ Facet address mapped with the function selector\\n     */\\n    function facetAddressFromStorage(\\n        bytes4 _functionSelector\\n    ) external view override returns (address facetAddress_) {\\n        facetAddress_ = LibLoupe.facetAddress(_functionSelector);\\n    }\\n\\n    /**\\n     * @notice Returns all facet addresses attached directly to diamond storage. This excludes the facets from the default fallback handler\\n     * @return facetAddresses_ All facet addresses attached directly to diamond storage\\n     */\\n    function facetAddressesFromStorage()\\n        external\\n        view\\n        override\\n        returns (address[] memory facetAddresses_)\\n    {\\n        facetAddresses_ = LibLoupe.facetAddresses();\\n    }\\n\\n    /**\\n     * @notice Returns function selectors of given facet address attached directly to diamond storage. This excludes the facets from the default fallback handler\\n     * @param _facet Facet address to fetch the facet function selectors from diamond storage\\n     * @return facetFunctionSelectors_ Facet function selectors of the given facet address\\n     */\\n    function facetFunctionSelectorsFromStorage(\\n        address _facet\\n    ) external view override returns (bytes4[] memory facetFunctionSelectors_) {\\n        facetFunctionSelectors_ = LibLoupe.facetFunctionSelectors(_facet);\\n    }\\n}\\n\",\"keccak256\":\"0xf392fde159eec6483fc15fa323ecd6d764028f5b8734a66662c4116292363794\",\"license\":\"Apache-2.0\"},\"contracts/facets/base/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.21;\\n\\n/**\\n * @title DiamondCut Facet Interface\\n * @dev Interface for DiamondCut Facet responsible for adding/removing/replace facets in Barz\\n * @author David Yongjun Kim (@Powerstream3604)\\n */\\ninterface IDiamondCut {\\n    error DiamondCutFacet__InvalidRouteWithGuardian();\\n    error DiamondCutFacet__InvalidRouteWithoutGuardian();\\n    error DiamondCutFacet__InvalidArrayLength();\\n    error DiamondCutFacet__InsufficientApprovers();\\n    error DiamondCutFacet__InvalidApprover();\\n    error DiamondCutFacet__InvalidApproverSignature();\\n    error DiamondCutFacet__InvalidApprovalValidationPeriod();\\n    error DiamondCutFacet__CannotRevokeUnapproved();\\n    error DiamondCutFacet__LackOfOwnerApproval();\\n    error DiamondCutFacet__OwnerAlreadyApproved();\\n    error DiamondCutFacet__DuplicateApproval();\\n    error DiamondCutFacet__InvalidInitAddress();\\n\\n    event DiamondCutApproved(FacetCut[] diamondCut);\\n    event DiamondCutApprovalRevoked(FacetCut[] diamondCut);\\n\\n    event SupportsInterfaceUpdated(bytes4 interfaceId, bool _lag);\\n\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param diamondCut Contains the facet addresses and function selectors\\n    /// @param init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata diamondCut,\\n        address init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    function updateSupportsInterface(bytes4 interfaceId, bool flag) external;\\n\\n    function diamondCutWithGuardian(\\n        FacetCut[] calldata diamondCut,\\n        address[] calldata approvers,\\n        bytes[] calldata signatures\\n    ) external;\\n\\n    function approveDiamondCut(FacetCut[] calldata diamondCut) external;\\n\\n    function revokeDiamondCutApproval(FacetCut[] calldata diamondCut) external;\\n\\n    function getDiamondCutApprovalCountWithTimeValidity(\\n        bytes32 diamondCutHash\\n    ) external view returns (uint256);\\n\\n    function getOwnerCutApprovalWithTimeValidity(\\n        bytes32 diamondCutHash\\n    ) external view returns (bool);\\n\\n    function isCutApproved(\\n        bytes32 diamondCutHash,\\n        address approver\\n    ) external view returns (bool);\\n\\n    function getDiamondCutHash(\\n        FacetCut[] calldata diamondCut\\n    ) external view returns (bytes32);\\n\\n    function getDiamondCutNonce() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0x8514213c7677c2122bda0721870b08decaddb68841cb1d6a87b89b04e8f43e1e\",\"license\":\"Apache-2.0\"},\"contracts/facets/base/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.21;\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(\\n        address _facet\\n    ) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(\\n        bytes4 _functionSelector\\n    ) external view returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0xd84f7fbb1344f714bceab2c71e4a25a235e3c1457fe7eba6c5538cd95ef5fc0f\",\"license\":\"Apache-2.0\"},\"contracts/facets/base/interfaces/IStorageLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.21;\\n\\nimport {IDiamondLoupe} from \\\"./IDiamondLoupe.sol\\\";\\n\\n/**\\n * @title LoupeFromStorage Interface\\n * @dev Interface contract to function as a loupe facet directly attached to diamond storage of Barz\\n * @author David Yongjun Kim (@Powerstream3604)\\n */\\ninterface IStorageLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facetsFromStorage()\\n        external\\n        view\\n        returns (IDiamondLoupe.Facet[] memory);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    function facetFunctionSelectorsFromStorage(\\n        address _facet\\n    ) external view returns (bytes4[] memory);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    function facetAddressesFromStorage()\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    function facetAddressFromStorage(\\n        bytes4 _functionSelector\\n    ) external view returns (address);\\n}\\n\",\"keccak256\":\"0xdf5dc9c57319e9087628c9cf9404b4f75585b76d1c2f4f59ee796c933967ea5c\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ERC/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.21;\\n\\ninterface IERC1271 {\\n    function isValidSignature(\\n        bytes32 hash,\\n        bytes memory signature\\n    ) external view returns (bytes4);\\n}\\n\",\"keccak256\":\"0xcdddb7d5641c9d3f2432dec7fd13fddb9ae1480f25c76c21511e2fa16b8bd422\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ERC/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbb7f07e170898793c5535cc4b7e8944c4b990a631ac806d0b788e794abc788a3\",\"license\":\"MIT\"},\"contracts/interfaces/ERC/IERC677Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.21;\\n\\ninterface IERC677Receiver {\\n    function onTokenTransfer(\\n        address sender,\\n        uint value,\\n        bytes calldata data\\n    ) external pure returns (bool);\\n}\\n\",\"keccak256\":\"0x4c1631cf45ea6daac0ec158c3edb9453099130b6b64f697004b83f95aa1f7350\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.21;\\n\\nimport {IDiamondCut} from \\\"../facets/base/interfaces/IDiamondCut.sol\\\";\\nimport {IDiamondLoupe} from \\\"../facets/base/interfaces/IDiamondLoupe.sol\\\";\\n\\nerror InitializationFunctionReverted(\\n    address _initializationContractAddress,\\n    bytes _calldata\\n);\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"trustwallet.barz.diamond.storage\\\");\\n    bytes4 constant RESTRICTIONS_FACET_SELECTOR =\\n        bytes4(keccak256(\\\"verifyRestrictions(address,address,uint256,bytes)\\\"));\\n    struct DiamondStorage {\\n        // maps function selectors to the facets that execute the functions.\\n        // and maps the selectors to their position in the selectorSlots array.\\n        // func selector => address facet, selector position\\n        mapping(bytes4 => bytes32) facets;\\n        // array of slots of function selectors.\\n        // each slot holds 8 function selectors.\\n        mapping(uint256 => bytes32) selectorSlots;\\n        // The number of function selectors in selectorSlots\\n        uint16 selectorCount;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // Default Fallback Handler of the barz.\\n        IDiamondLoupe defaultFallbackHandler;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function enforceIsSelf() internal view {\\n        require(msg.sender == address(this), \\\"LibDiamond: Caller not self\\\");\\n    }\\n\\n    event DiamondCut(\\n        IDiamondCut.FacetCut[] _diamondCut,\\n        address _init,\\n        bytes _calldata\\n    );\\n\\n    bytes32 constant CLEAR_ADDRESS_MASK =\\n        bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));\\n\\n    // Internal function version of diamondCut\\n    // This code is almost the same as the external diamondCut,\\n    // except it is using 'Facet[] memory _diamondCut' instead of\\n    // 'Facet[] calldata _diamondCut'.\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes an error for a two dimensional array.\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        uint256 originalSelectorCount = ds.selectorCount;\\n        uint256 selectorCount = originalSelectorCount;\\n        bytes32 selectorSlot;\\n        // Check if last selector slot is not full\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\"\\n        if (selectorCount & 7 > 0) {\\n            // get last selectorSlot\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n            selectorSlot = ds.selectorSlots[selectorCount >> 3];\\n        }\\n        // loop through diamond cut\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; ) {\\n            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(\\n                selectorCount,\\n                selectorSlot,\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].action,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n\\n            unchecked {\\n                facetIndex++;\\n            }\\n        }\\n        if (selectorCount != originalSelectorCount) {\\n            ds.selectorCount = uint16(selectorCount);\\n        }\\n        // If last selector slot is not full\\n        // \\\"selectorCount & 7\\\" is a gas efficient modulo by eight \\\"selectorCount % 8\\\"\\n        if (selectorCount & 7 > 0) {\\n            // \\\"selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"selectorSlot / 8\\\"\\n            ds.selectorSlots[selectorCount >> 3] = selectorSlot;\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addReplaceRemoveFacetSelectors(\\n        uint256 _selectorCount,\\n        bytes32 _selectorSlot,\\n        address _newFacetAddress,\\n        IDiamondCut.FacetCutAction _action,\\n        bytes4[] memory _selectors\\n    ) internal returns (uint256, bytes32) {\\n        DiamondStorage storage ds = diamondStorage();\\n        require(\\n            _selectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        if (_action == IDiamondCut.FacetCutAction.Add) {\\n            enforceHasContractCode(\\n                _newFacetAddress,\\n                \\\"LibDiamondCut: Add facet has no code\\\"\\n            );\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                require(\\n                    address(bytes20(oldFacet)) == address(0),\\n                    \\\"LibDiamondCut: Can't add function that already exists\\\"\\n                );\\n                // add facet for selector\\n                ds.facets[selector] =\\n                    bytes20(_newFacetAddress) |\\n                    bytes32(_selectorCount);\\n                // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\"\\n                // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                uint256 selectorInSlotPosition = (_selectorCount & 7) << 5;\\n                // clear selector position in slot and add selector\\n                _selectorSlot =\\n                    (_selectorSlot &\\n                        ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) |\\n                    (bytes32(selector) >> selectorInSlotPosition);\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    // \\\"_selectorSlot >> 3\\\" is a gas efficient division by 8 \\\"_selectorSlot / 8\\\"\\n                    ds.selectorSlots[_selectorCount >> 3] = _selectorSlot;\\n                    _selectorSlot = 0;\\n                }\\n                _selectorCount++;\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Replace) {\\n            enforceHasContractCode(\\n                _newFacetAddress,\\n                \\\"LibDiamondCut: Replace facet has no code\\\"\\n            );\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                bytes32 oldFacet = ds.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n                // only useful if immutable functions exist\\n                require(\\n                    oldFacetAddress != address(this),\\n                    \\\"LibDiamondCut: Can't replace immutable function\\\"\\n                );\\n                require(\\n                    oldFacetAddress != _newFacetAddress,\\n                    \\\"LibDiamondCut: Can't replace function with same function\\\"\\n                );\\n                require(\\n                    oldFacetAddress != address(0),\\n                    \\\"LibDiamondCut: Can't replace function that doesn't exist\\\"\\n                );\\n                // replace old facet address\\n                ds.facets[selector] =\\n                    (oldFacet & CLEAR_ADDRESS_MASK) |\\n                    bytes20(_newFacetAddress);\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n        } else if (_action == IDiamondCut.FacetCutAction.Remove) {\\n            require(\\n                _newFacetAddress == address(0),\\n                \\\"LibDiamondCut: Remove facet address must be address(0)\\\"\\n            );\\n            // \\\"_selectorCount >> 3\\\" is a gas efficient division by 8 \\\"_selectorCount / 8\\\"\\n            uint256 selectorSlotCount = _selectorCount >> 3;\\n            // \\\"_selectorCount & 7\\\" is a gas efficient modulo by eight \\\"_selectorCount % 8\\\"\\n            uint256 selectorInSlotIndex = _selectorCount & 7;\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; ) {\\n                if (_selectorSlot == 0) {\\n                    // get last selectorSlot\\n                    selectorSlotCount--;\\n                    _selectorSlot = ds.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                } else {\\n                    selectorInSlotIndex--;\\n                }\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n                // adding a block here prevents stack too deep error\\n                {\\n                    bytes4 selector = _selectors[selectorIndex];\\n                    bytes32 oldFacet = ds.facets[selector];\\n                    require(\\n                        address(bytes20(oldFacet)) != address(0),\\n                        \\\"LibDiamondCut: Can't remove function that doesn't exist\\\"\\n                    );\\n                    // only useful if immutable functions exist\\n                    require(\\n                        address(bytes20(oldFacet)) != address(this),\\n                        \\\"LibDiamondCut: Can't remove immutable function\\\"\\n                    );\\n                    // replace selector with last selector in ds.facets\\n                    // gets the last selector\\n                    // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                    lastSelector = bytes4(\\n                        _selectorSlot << (selectorInSlotIndex << 5)\\n                    );\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        ds.facets[lastSelector] =\\n                            (oldFacet & CLEAR_ADDRESS_MASK) |\\n                            bytes20(ds.facets[lastSelector]);\\n                    }\\n                    delete ds.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    // \\\"oldSelectorCount >> 3\\\" is a gas efficient division by 8 \\\"oldSelectorCount / 8\\\"\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\n                    // \\\"oldSelectorCount & 7\\\" is a gas efficient modulo by eight \\\"oldSelectorCount % 8\\\"\\n                    // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n                }\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = ds.selectorSlots[\\n                        oldSelectorsSlotCount\\n                    ];\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                    // update storage with the modified slot\\n                    ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    _selectorSlot =\\n                        (_selectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n                if (selectorInSlotIndex == 0) {\\n                    delete ds.selectorSlots[selectorSlotCount];\\n                    _selectorSlot = 0;\\n                }\\n\\n                unchecked {\\n                    selectorIndex++;\\n                }\\n            }\\n            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex;\\n        } else {\\n            revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n        }\\n        return (_selectorCount, _selectorSlot);\\n    }\\n\\n    function initializeDiamondCut(\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        if (_init == address(0)) {\\n            return;\\n        }\\n        enforceHasContractCode(\\n            _init,\\n            \\\"LibDiamondCut: _init address has no code\\\"\\n        );\\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up error\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(error)\\n                    revert(add(32, error), returndata_size)\\n                }\\n            } else {\\n                revert InitializationFunctionReverted(_init, _calldata);\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(\\n        address _contract,\\n        string memory _errorMessage\\n    ) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n\\n    function restrictionsFacet() internal view returns (address facetAddress_) {\\n        facetAddress_ = address(\\n            bytes20(\\n                LibDiamond.diamondStorage().facets[RESTRICTIONS_FACET_SELECTOR]\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x2cabdc00de859c3a3170ce3bda5d0e5fd3933d47ce904fd1585f9818b02572f8\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.21;\\n\\nimport {IDiamondLoupe} from \\\"../facets/base/interfaces/IDiamondLoupe.sol\\\";\\nimport {LibDiamond} from \\\"./LibDiamond.sol\\\";\\n\\n/**\\n * @title LibLoupe\\n * @dev Internal Library to provide utility feature for reading the state of diamond facets\\n * Originally from Diamond's implementation of Mudgen(author of EIP-2535)\\n */\\nlibrary LibLoupe {\\n    /// @notice Gets all facets and their selectors.\\n    /// @return facets_ Facet\\n    function facets()\\n        internal\\n        view\\n        returns (IDiamondLoupe.Facet[] memory facets_)\\n    {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        facets_ = new IDiamondLoupe.Facet[](ds.selectorCount);\\n        uint16[] memory numFacetSelectors = new uint16[](ds.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < ds.selectorCount; slotIndex++) {\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n                if (selectorIndex > ds.selectorCount) {\\n                    break;\\n                }\\n                // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facetAddress_ = address(bytes20(ds.facets[selector]));\\n                bool continueLoop;\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (facets_[facetIndex].facetAddress == facetAddress_) {\\n                        facets_[facetIndex].functionSelectors[\\n                            numFacetSelectors[facetIndex]\\n                        ] = selector;\\n                        // probably will never have more than 256 functions from one facet contract\\n                        require(numFacetSelectors[facetIndex] < 255);\\n                        numFacetSelectors[facetIndex]++;\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n                if (continueLoop) {\\n                    continue;\\n                }\\n                facets_[numFacets].facetAddress = facetAddress_;\\n                facets_[numFacets].functionSelectors = new bytes4[](\\n                    ds.selectorCount\\n                );\\n                facets_[numFacets].functionSelectors[0] = selector;\\n                numFacetSelectors[numFacets] = 1;\\n                numFacets++;\\n            }\\n        }\\n        for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n            uint256 numSelectors = numFacetSelectors[facetIndex];\\n            bytes4[] memory selectors = facets_[facetIndex].functionSelectors;\\n            // setting the number of selectors\\n            assembly {\\n                mstore(selectors, numSelectors)\\n            }\\n        }\\n        // setting the number of facets\\n        assembly {\\n            mstore(facets_, numFacets)\\n        }\\n    }\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return _facetFunctionSelectors The selectors associated with a facet address.\\n    function facetFunctionSelectors(\\n        address _facet\\n    ) internal view returns (bytes4[] memory _facetFunctionSelectors) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        uint256 numSelectors;\\n        _facetFunctionSelectors = new bytes4[](ds.selectorCount);\\n        uint256 selectorIndex;\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < ds.selectorCount; slotIndex++) {\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n                if (selectorIndex > ds.selectorCount) {\\n                    break;\\n                }\\n                // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facet = address(bytes20(ds.facets[selector]));\\n                if (_facet == facet) {\\n                    _facetFunctionSelectors[numSelectors] = selector;\\n                    numSelectors++;\\n                }\\n            }\\n        }\\n        // Set the number of selectors in the array\\n        assembly {\\n            mstore(_facetFunctionSelectors, numSelectors)\\n        }\\n    }\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses()\\n        internal\\n        view\\n        returns (address[] memory facetAddresses_)\\n    {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        facetAddresses_ = new address[](ds.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < ds.selectorCount; slotIndex++) {\\n            bytes32 slot = ds.selectorSlots[slotIndex];\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n                if (selectorIndex > ds.selectorCount) {\\n                    break;\\n                }\\n                // \\\" << 5 is the same as multiplying by 32 ( * 32)\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facetAddress_ = address(bytes20(ds.facets[selector]));\\n                bool continueLoop;\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (facetAddress_ == facetAddresses_[facetIndex]) {\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n                if (continueLoop) {\\n                    continue;\\n                }\\n                facetAddresses_[numFacets] = facetAddress_;\\n                numFacets++;\\n            }\\n        }\\n        // Set the number of facet addresses in the array\\n        assembly {\\n            mstore(facetAddresses_, numFacets)\\n        }\\n    }\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(\\n        bytes4 _functionSelector\\n    ) internal view returns (address facetAddress_) {\\n        facetAddress_ = address(\\n            bytes20(LibDiamond.diamondStorage().facets[_functionSelector])\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x0b11439c3cc657095e15ec2241fdcf67204b14001357b612fc5db4ff9e760a5a\",\"license\":\"Apache-2.0\"},\"contracts/libraries/LibUtils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.21;\\n\\nimport {IDiamondLoupe} from \\\"../facets/base/interfaces/IDiamondLoupe.sol\\\";\\n\\nlibrary LibUtils {\\n    // Internal utility functions\\n    function mergeArrays(\\n        bytes4[] memory _array1,\\n        bytes4[] memory _array2\\n    ) internal pure returns (bytes4[] memory) {\\n        uint256 length1 = _array1.length;\\n        uint256 length2 = _array2.length;\\n        bytes4[] memory mergedArray = new bytes4[](length1 + length2);\\n\\n        for (uint256 i; i < length1; ) {\\n            mergedArray[i] = _array1[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        for (uint256 i; i < length2; ) {\\n            mergedArray[length1 + i] = _array2[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return mergedArray;\\n    }\\n\\n    function removeFacetElement(\\n        IDiamondLoupe.Facet[] memory _facets,\\n        uint256 _index\\n    ) internal pure returns (IDiamondLoupe.Facet[] memory) {\\n        require(_index < _facets.length, \\\"Invalid index\\\");\\n        require(_facets.length != 0, \\\"Invalid array\\\");\\n\\n        // Create a new array with a length of `_facets.length - 1`\\n        IDiamondLoupe.Facet[] memory newArray = new IDiamondLoupe.Facet[](\\n            _facets.length - 1\\n        );\\n        uint256 newArrayLength = newArray.length;\\n        // Iterate over the original array, skipping the element at the specified `index`\\n        for (uint256 i; i < newArrayLength; ) {\\n            if (i < _index) {\\n                newArray[i] = _facets[i];\\n            } else {\\n                newArray[i] = _facets[i + 1];\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return newArray;\\n    }\\n\\n    function removeElement(\\n        bytes4[] memory _array,\\n        uint256 _index\\n    ) internal pure returns (bytes4[] memory) {\\n        require(_index < _array.length, \\\"Invalid index\\\");\\n        require(_array.length != 0, \\\"Invalid array\\\");\\n\\n        bytes4[] memory newArray = new bytes4[](_array.length - 1);\\n        uint256 newArrayLength = newArray.length;\\n        for (uint256 i; i < newArrayLength; ) {\\n            if (i < _index) {\\n                newArray[i] = _array[i];\\n            } else {\\n                newArray[i] = _array[i + 1];\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return newArray;\\n    }\\n\\n    function setValue(\\n        bytes4[] memory _keys,\\n        address[] memory _values,\\n        bytes4 _key,\\n        address _value\\n    ) internal pure returns (bytes4[] memory, address[] memory) {\\n        uint256 index = findIndex(_keys, _key);\\n        uint256 keysLength = _keys.length;\\n        if (index < keysLength) {\\n            _values[index] = _value;\\n        } else {\\n            // Create new storage arrays\\n            bytes4[] memory newKeys = new bytes4[](keysLength + 1);\\n            address[] memory newValues = new address[](_values.length + 1);\\n\\n            // Copy values to the new storage arrays\\n            for (uint256 i; i < keysLength; ) {\\n                newKeys[i] = _keys[i];\\n                newValues[i] = _values[i];\\n\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n\\n            // Add the new key-value pair\\n            newKeys[keysLength] = _key;\\n            newValues[_values.length] = _value;\\n\\n            return (newKeys, newValues);\\n        }\\n\\n        // If the key already exists, return the original arrays\\n        return (_keys, _values);\\n    }\\n\\n    function getValue(\\n        bytes4[] memory _keys,\\n        address[] memory _values,\\n        bytes4 _key\\n    ) internal pure returns (address) {\\n        uint256 index = findIndex(_keys, _key);\\n        if (index >= _keys.length) return address(0);\\n\\n        return _values[index];\\n    }\\n\\n    function findIndex(\\n        bytes4[] memory _keys,\\n        bytes4 _key\\n    ) internal pure returns (uint256) {\\n        uint256 keysLength = _keys.length;\\n        for (uint256 i; i < keysLength; ) {\\n            if (_keys[i] == _key) {\\n                return i;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return keysLength;\\n    }\\n}\\n\",\"keccak256\":\"0xde8aeefe54c4be483f2b2c055aca11e2830f7094c0586a82e10ec544933b5714\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "David Yongjun Kim (@Powerstream3604)",
    "details": "DiamondLoupe contract compatible with EIP-2535",
    "kind": "dev",
    "methods": {
      "facetAddress(bytes4)": {
        "details": "If facet is not found return address(0).",
        "params": {
          "_functionSelector": "The function selector."
        },
        "returns": {
          "facetAddress_": "The facet address."
        }
      },
      "facetAddressFromStorage(bytes4)": {
        "params": {
          "_functionSelector": "Function selector to fetch the facet address from diamond storage"
        },
        "returns": {
          "facetAddress_": "Facet address mapped with the function selector"
        }
      },
      "facetAddresses()": {
        "returns": {
          "facetAddresses_": "facetAddresses_"
        }
      },
      "facetAddressesFromStorage()": {
        "returns": {
          "facetAddresses_": "All facet addresses attached directly to diamond storage"
        }
      },
      "facetFunctionSelectors(address)": {
        "params": {
          "_facet": "The facet address."
        },
        "returns": {
          "facetFunctionSelectors_": "facetFunctionSelectors_"
        }
      },
      "facetFunctionSelectorsFromStorage(address)": {
        "params": {
          "_facet": "Facet address to fetch the facet function selectors from diamond storage"
        },
        "returns": {
          "facetFunctionSelectors_": "Facet function selectors of the given facet address"
        }
      },
      "facets()": {
        "details": "Barz uses a special architecture called default fallback handler. Default Fallback handler is used as a middleware      that holds the mapping of facet function selector and facet address that Barz uses. This helps Barz to reduce      significant amount of gas during the initialization process.      Hence, this method aggregates both the facet information from DefaulFallbackHandler and in diamond storage and shows the data to users.",
        "returns": {
          "facets_": "Facet"
        }
      },
      "facetsFromStorage()": {
        "returns": {
          "facets_": "Facet information attached directly to diamond storage"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "_interfaceId": "Interface ID for detecting the interface"
        },
        "returns": {
          "isSupported": "Bool value showing if the standard is supported in the contract"
        }
      }
    },
    "title": "DiamondLoupe Facet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "facetAddress(bytes4)": {
        "notice": "Gets the facet that supports the given selector."
      },
      "facetAddressFromStorage(bytes4)": {
        "notice": "Returns the facet address attached to the given function selector. This excludes the facets from the default fallback handler"
      },
      "facetAddresses()": {
        "notice": "Get all the facet addresses used by Barz."
      },
      "facetAddressesFromStorage()": {
        "notice": "Returns all facet addresses attached directly to diamond storage. This excludes the facets from the default fallback handler"
      },
      "facetFunctionSelectors(address)": {
        "notice": "Gets all the function selectors provided by a facet."
      },
      "facetFunctionSelectorsFromStorage(address)": {
        "notice": "Returns function selectors of given facet address attached directly to diamond storage. This excludes the facets from the default fallback handler"
      },
      "facets()": {
        "notice": "Gets all facets and their selectors."
      },
      "facetsFromStorage()": {
        "notice": "Returns the facet from the diamond storage. This excludes the facets from the default fallback handler"
      },
      "supportsInterface(bytes4)": {
        "notice": "SupportInterface to be compatible with EIP 165"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}