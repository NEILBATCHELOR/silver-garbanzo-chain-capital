/**
 * Database Table Schema Configuration
 * 
 * Defines the actual database schema structure for each table to ensure
 * the Universal Database Service handles primary keys and field names correctly.
 */

export interface TableSchema {
  primaryKey: string;
  autoGeneratedFields?: string[];
  requiredFields?: string[];
  compositeKey?: string[];
  timestampFields?: {
    createdAt?: string;
    updatedAt?: string;
  };
}

/**
 * Complete table schema definitions based on actual database structure
 */
export const TABLE_SCHEMAS: Record<string, TableSchema> = {
  // Cap Tables
  'cap_tables': {
    primaryKey: 'id',
    autoGeneratedFields: ['id', 'created_at', 'updated_at'],
    timestampFields: {
      createdAt: 'created_at',
      updatedAt: 'updated_at'
    }
  },

  // Investors
  'investors': {
    primaryKey: 'investor_id',
    autoGeneratedFields: ['investor_id', 'created_at', 'updated_at'],
    timestampFields: {
      createdAt: 'created_at', 
      updatedAt: 'updated_at'
    }
  },

  // Token Allocations
  'token_allocations': {
    primaryKey: 'id',
    autoGeneratedFields: ['id', 'created_at', 'updated_at'],
    timestampFields: {
      createdAt: 'created_at',
      updatedAt: 'updated_at'
    }
  },

  // Policy Templates
  'policy_templates': {
    primaryKey: 'template_id',
    autoGeneratedFields: ['template_id', 'created_at', 'updated_at'],
    timestampFields: {
      createdAt: 'created_at',
      updatedAt: 'updated_at'
    }
  },

  // Policy Template Approvers (Composite Key)
  'policy_template_approvers': {
    primaryKey: 'template_id', // Primary part of composite key
    compositeKey: ['template_id', 'user_id'],
    autoGeneratedFields: ['timestamp'],
    timestampFields: {
      createdAt: 'timestamp'
    }
  },

  // Rules
  'rules': {
    primaryKey: 'rule_id',
    autoGeneratedFields: ['rule_id', 'created_at', 'updated_at'],
    timestampFields: {
      createdAt: 'created_at',
      updatedAt: 'updated_at'
    }
  },

  // Subscriptions
  'subscriptions': {
    primaryKey: 'id',
    autoGeneratedFields: ['id', 'created_at', 'updated_at'],
    timestampFields: {
      createdAt: 'created_at',
      updatedAt: 'updated_at'
    }
  },

  // Cap Table Investors
  'cap_table_investors': {
    primaryKey: 'id',
    autoGeneratedFields: ['id', 'created_at'],
    timestampFields: {
      createdAt: 'created_at'
    }
  },

  // Projects
  'projects': {
    primaryKey: 'id',
    autoGeneratedFields: ['id', 'created_at', 'updated_at'],
    timestampFields: {
      createdAt: 'created_at',
      updatedAt: 'updated_at'
    }
  },

  // Users
  'users': {
    primaryKey: 'id',
    autoGeneratedFields: ['id', 'created_at', 'updated_at'],
    timestampFields: {
      createdAt: 'created_at',
      updatedAt: 'updated_at'
    }
  },

  // Default schema for tables not explicitly defined
  'default': {
    primaryKey: 'id',
    autoGeneratedFields: ['id', 'created_at', 'updated_at'],
    timestampFields: {
      createdAt: 'created_at',
      updatedAt: 'updated_at'
    }
  }
};

/**
 * Get schema configuration for a table
 */
export function getTableSchema(tableName: string): TableSchema {
  return TABLE_SCHEMAS[tableName] || TABLE_SCHEMAS['default'];
}

/**
 * Get the primary key field name for a table
 */
export function getPrimaryKeyField(tableName: string): string {
  return getTableSchema(tableName).primaryKey;
}

/**
 * Check if a field is auto-generated for a table
 */
export function isAutoGeneratedField(tableName: string, fieldName: string): boolean {
  const schema = getTableSchema(tableName);
  return schema.autoGeneratedFields?.includes(fieldName) ?? false;
}

/**
 * Check if a table uses composite keys
 */
export function hasCompositeKey(tableName: string): boolean {
  const schema = getTableSchema(tableName);
  return !!schema.compositeKey && schema.compositeKey.length > 1;
}

/**
 * Get composite key fields for a table
 */
export function getCompositeKeyFields(tableName: string): string[] {
  const schema = getTableSchema(tableName);
  return schema.compositeKey || [schema.primaryKey];
}

/**
 * Get timestamp field names for a table
 */
export function getTimestampFields(tableName: string): { createdAt?: string; updatedAt?: string } {
  return getTableSchema(tableName).timestampFields || {};
}
