--
-- PostgreSQL database dump
--

\restrict JlDqc15nyfrhiybG4NpTe1i1ELRQkvGZ9U22D6DaLPJFwswRNGgIBxNlFhsXjGS

-- Dumped from database version 15.8
-- Dumped by pg_dump version 17.6 (Postgres.app)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: public; Type: SCHEMA; Schema: -; Owner: -
--

CREATE SCHEMA public;


--
-- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON SCHEMA public IS 'Enhanced DFNS RAMP Network Integration - Schema updated on June 11, 2025';


--
-- Name: LimitType; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public."LimitType" AS ENUM (
    'POSITION_SIZE',
    'DAILY_LOSS',
    'VAR_LIMIT',
    'CONCENTRATION',
    'LEVERAGE'
);


--
-- Name: OrderType; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public."OrderType" AS ENUM (
    'MARKET',
    'LIMIT',
    'STOP',
    'STOP_LIMIT'
);


--
-- Name: TradeSide; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public."TradeSide" AS ENUM (
    'BUY',
    'SELL'
);


--
-- Name: TradeStatus; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public."TradeStatus" AS ENUM (
    'PENDING',
    'PARTIALLY_FILLED',
    'FILLED',
    'CANCELLED',
    'REJECTED',
    'SETTLED'
);


--
-- Name: UserRole; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public."UserRole" AS ENUM (
    'ADMIN',
    'TRADER',
    'RISK_MANAGER',
    'COMPLIANCE',
    'SETTLEMENT'
);


--
-- Name: compliance_status; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public.compliance_status AS ENUM (
    'compliant',
    'non_compliant',
    'pending_review'
);


--
-- Name: document_status; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public.document_status AS ENUM (
    'pending',
    'approved',
    'rejected',
    'expired',
    'active',
    'pending_review'
);


--
-- Name: document_type; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public.document_type AS ENUM (
    'commercial_register',
    'certificate_incorporation',
    'memorandum_articles',
    'director_list',
    'shareholder_register',
    'financial_statements',
    'regulatory_status',
    'qualification_summary',
    'business_description',
    'organizational_chart',
    'key_people_cv',
    'aml_kyc_description',
    'passport',
    'drivers_license',
    'national_id',
    'utility_bill',
    'bank_statement',
    'proof_of_income',
    'proof_of_address',
    'employment_letter',
    'tax_return',
    'social_security'
);


--
-- Name: TYPE document_type; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TYPE public.document_type IS 'Document types supporting both business/organizational documents and personal identity verification documents';


--
-- Name: individual_document_type; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public.individual_document_type AS ENUM (
    'passport',
    'drivers_license',
    'national_id',
    'state_id',
    'voter_id',
    'proof_of_address',
    'utility_bill',
    'bank_statement',
    'lease_agreement',
    'mortgage_statement',
    'phone_bill',
    'internet_bill',
    'insurance_statement',
    'investment_agreement',
    'accreditation_letter',
    'tax_document',
    'w2_form',
    'tax_return',
    'income_statement',
    'employment_letter',
    'pay_stub',
    'financial_statement',
    'power_of_attorney',
    'trust_document',
    'beneficial_ownership',
    'source_of_funds',
    'source_of_wealth',
    'articles_of_incorporation',
    'bylaws',
    'operating_agreement',
    'certificate_of_good_standing',
    'tax_exemption_letter',
    'audit_report',
    'board_resolution',
    'legal_opinion',
    'prospectus',
    'offering_memorandum',
    'regulatory_filing',
    'compliance_certificate',
    'other'
);


--
-- Name: TYPE individual_document_type; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TYPE public.individual_document_type IS 'Document types for individual/personal KYC and AML verification';


--
-- Name: issuer_document_type; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public.issuer_document_type AS ENUM (
    'issuer_creditworthiness',
    'project_security_type',
    'offering_details',
    'term_sheet',
    'special_rights',
    'underwriters',
    'use_of_proceeds',
    'financial_highlights',
    'timing',
    'risk_factors'
);


--
-- Name: issuer_role; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public.issuer_role AS ENUM (
    'admin',
    'editor',
    'viewer',
    'compliance_officer'
);


--
-- Name: kyc_status; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public.kyc_status AS ENUM (
    'approved',
    'pending',
    'failed',
    'not_started',
    'expired'
);


--
-- Name: pool_type_enum; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public.pool_type_enum AS ENUM (
    'Total Pool',
    'Tranche'
);


--
-- Name: processing_date_mode_enum; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public.processing_date_mode_enum AS ENUM (
    'fixed',
    'same_day',
    'offset'
);


--
-- Name: product_status; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public.product_status AS ENUM (
    'Active',
    'Called',
    'Matured',
    'Redeemed',
    'Expired',
    'Suspended',
    'Delisted',
    'Open',
    'Closed'
);


--
-- Name: profile_type; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public.profile_type AS ENUM (
    'service provider',
    'issuer',
    'investor',
    'super admin'
);


--
-- Name: project_duration; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public.project_duration AS ENUM (
    '1_month',
    '3_months',
    '6_months',
    '9_months',
    '12_months',
    'over_12_months'
);


--
-- Name: stablecoin_collateral_type; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public.stablecoin_collateral_type AS ENUM (
    'Fiat',
    'Crypto',
    'Commodity',
    'Algorithmic',
    'Hybrid',
    'None'
);


--
-- Name: submission_date_mode_enum; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public.submission_date_mode_enum AS ENUM (
    'fixed',
    'relative'
);


--
-- Name: token_config_mode_enum; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public.token_config_mode_enum AS ENUM (
    'min',
    'max',
    'basic',
    'advanced'
);


--
-- Name: token_standard_enum; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public.token_standard_enum AS ENUM (
    'ERC-20',
    'ERC-721',
    'ERC-1155',
    'ERC-1400',
    'ERC-3525',
    'ERC-4626'
);


--
-- Name: token_status_enum; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public.token_status_enum AS ENUM (
    'DRAFT',
    'UNDER REVIEW',
    'APPROVED',
    'READY TO MINT',
    'MINTED',
    'DEPLOYED',
    'PAUSED',
    'DISTRIBUTED',
    'REJECTED'
);


--
-- Name: workflow_status; Type: TYPE; Schema: public; Owner: -
--

CREATE TYPE public.workflow_status AS ENUM (
    'pending',
    'completed',
    'rejected'
);


--
-- Name: add_investors_to_group(text, text[]); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.add_investors_to_group(p_group_id text, p_investor_ids text[]) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  sync_timestamp timestamp with time zone := NOW();
  v_investor_id text;
BEGIN
  -- Validate input
  IF p_group_id IS NULL THEN
    RAISE EXCEPTION 'Group ID cannot be NULL';
  END IF;

  IF p_investor_ids IS NULL OR array_length(p_investor_ids, 1) IS NULL THEN
    RAISE EXCEPTION 'Investor IDs array cannot be NULL or empty';
  END IF;

  -- Add to the investor_group_members table (old)
  FOREACH v_investor_id IN ARRAY p_investor_ids
  LOOP
    INSERT INTO investor_group_members (group_id, investor_id, created_at)
    VALUES (p_group_id, v_investor_id, sync_timestamp)
    ON CONFLICT (group_id, investor_id) DO NOTHING;
  END LOOP;

  -- Try to add to investor_groups_investors table (new)
  -- This might fail due to RLS but we'll continue anyway
  BEGIN
    FOREACH v_investor_id IN ARRAY p_investor_ids
    LOOP
      INSERT INTO investor_groups_investors (id, group_id, investor_id, created_at)
      VALUES (gen_random_uuid()::text, p_group_id, v_investor_id, sync_timestamp)
      ON CONFLICT (group_id, investor_id) DO NOTHING;
    END LOOP;
  EXCEPTION WHEN OTHERS THEN
    -- Log the error but continue - we at least added to the old table
    RAISE NOTICE 'Error adding to investor_groups_investors: %', SQLERRM;
  END;

  -- Update the group member count
  UPDATE investor_groups
  SET 
    member_count = (SELECT get_unique_member_count(p_group_id)),
    updated_at = sync_timestamp
  WHERE id::text = p_group_id;
END;
$$;


--
-- Name: add_policy_approver(uuid, text, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.add_policy_approver(p_policy_id uuid, p_user_id text, p_created_by text) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  INSERT INTO policy_rule_approvers (policy_rule_id, user_id, created_by, status)
  VALUES (p_policy_id, p_user_id::UUID, p_created_by, 'pending')
  ON CONFLICT (policy_rule_id, user_id) 
  DO UPDATE SET status = 'pending', timestamp = now();
END;
$$;


--
-- Name: add_policy_approver(text, text, text, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.add_policy_approver(policy_id text, user_id text, created_by text, status_val text DEFAULT 'pending'::text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    INSERT INTO policy_rule_approvers (
        policy_rule_id,
        user_id,
        created_by,
        status,
        created_at
    ) VALUES (
        safe_uuid_cast(policy_id),
        safe_uuid_cast(user_id),
        safe_uuid_cast(created_by),
        status_val,
        now()
    );
    RETURN;
EXCEPTION WHEN others THEN
    RAISE EXCEPTION 'Failed to add policy approver: %', SQLERRM;
END;
$$;


--
-- Name: add_policy_approver_with_cast(text, text, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.add_policy_approver_with_cast(policy_id text, user_id text, created_by_id text) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  -- Insert with explicit casting to UUID type
  INSERT INTO policy_rule_approvers (policy_rule_id, user_id, created_by, status)
  VALUES (
    safe_cast_to_uuid(policy_id), 
    safe_cast_to_uuid(user_id), 
    safe_cast_to_uuid(created_by_id),
    'pending'
  )
  ON CONFLICT (policy_rule_id, user_id)
  DO UPDATE SET status = 'pending', timestamp = now();
  
  RETURN true;
EXCEPTION WHEN OTHERS THEN
  RAISE NOTICE 'Error in add_policy_approver_with_cast: %', SQLERRM;
  RETURN false;
END;
$$;


--
-- Name: add_rule_to_approval_queue(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.add_rule_to_approval_queue() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
    approver_id uuid;
BEGIN
    -- When a rule is created or updated
    IF (TG_OP = 'INSERT' OR (TG_OP = 'UPDATE' AND (OLD.status != 'pending_approval' OR OLD.status IS NULL))) THEN
        -- Get approvers from rule_details
        IF NEW.rule_details->'approvers' IS NOT NULL AND jsonb_array_length(NEW.rule_details->'approvers') > 0 THEN
            -- Set status to pending_approval
            NEW.status := 'pending_approval';
            
            -- For each approver, add to policy_rule_approvers
            FOR approver_id IN 
                SELECT (jsonb_array_elements(NEW.rule_details->'approvers')->>'id')::uuid
            LOOP
                INSERT INTO public.policy_rule_approvers
                    (policy_rule_id, user_id, created_by, status)
                VALUES
                    (NEW.rule_id, 
                     approver_id, 
                     NEW.created_by,  -- Now created_by is already UUID
                     'pending')
                ON CONFLICT (policy_rule_id, user_id) 
                DO UPDATE SET status = 'pending', timestamp = now();
            END LOOP;
        END IF;
    END IF;
    
    RETURN NEW;
END;
$$;


--
-- Name: add_table_to_realtime(text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.add_table_to_realtime(table_name text) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- This function is just a placeholder
  -- The actual ALTER PUBLICATION is done in the migration
  RETURN;
END;
$$;


--
-- Name: add_template_to_approval_queue(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.add_template_to_approval_queue() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
    approver_id uuid;
BEGIN
    -- When a template is created or updated
    IF (TG_OP = 'INSERT' OR (TG_OP = 'UPDATE' AND (OLD.status != 'pending_approval' OR OLD.status IS NULL))) THEN
        -- Get approvers from template_data
        IF NEW.template_data->'approvers' IS NOT NULL AND jsonb_array_length(NEW.template_data->'approvers') > 0 THEN
            -- Set status to pending_approval
            NEW.status := 'pending_approval';
            
            -- For each approver, add to policy_template_approvers
            FOR approver_id IN 
                SELECT (jsonb_array_elements(NEW.template_data->'approvers')->>'id')::uuid
            LOOP
                INSERT INTO public.policy_template_approvers
                    (template_id, user_id, created_by, status)
                VALUES
                    (NEW.template_id, 
                     approver_id, 
                     (CASE 
                         WHEN NEW.created_by::text = 'admin-bypass' 
                         THEN 'f3aa3707-c54e-428d-b630-e15088d7b55d'
                         ELSE NEW.created_by::text
                     END)::uuid,
                     'pending')
                ON CONFLICT (template_id, user_id) 
                DO UPDATE SET status = 'pending', timestamp = now();
            END LOOP;
        END IF;
    END IF;
    
    RETURN NEW;
END;
$$;


--
-- Name: admin_set_profile_type(uuid, public.profile_type); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.admin_set_profile_type(user_auth_id uuid, new_profile_type public.profile_type) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  UPDATE public.profiles
  SET 
    profile_type = new_profile_type,
    updated_at = NOW()
  WHERE id = user_auth_id;
  
  IF NOT FOUND THEN
    RAISE EXCEPTION 'User with auth ID % not found', user_auth_id;
  END IF;
END;
$$;


--
-- Name: analyze_activity_indexes(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.analyze_activity_indexes() RETURNS TABLE(index_name text, scans bigint, usage text)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  SELECT 
    indexrelname::TEXT,  -- Index name
    idx_scan,           -- Scan count
    CASE 
      WHEN idx_scan = 0 THEN 'UNUSED'
      WHEN idx_scan < 100 THEN 'LOW'
      WHEN idx_scan < 1000 THEN 'MEDIUM'
      ELSE 'HIGH'
    END::TEXT
  FROM pg_stat_user_indexes 
  WHERE relname = 'audit_logs'  -- FIXED: Use relname instead of tablename
  ORDER BY idx_scan DESC;
END;
$$;


--
-- Name: analyze_table_for_audit(text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.analyze_table_for_audit(table_name_param text) RETURNS TABLE(table_name text, has_created_at boolean, has_updated_at boolean, has_user_id boolean, has_project_id boolean, has_id boolean, column_count integer, estimated_audit_entries integer)
    LANGUAGE plpgsql
    AS $$
DECLARE
    col_exists_created boolean := false;
    col_exists_updated boolean := false;
    col_exists_user boolean := false;
    col_exists_project boolean := false;
    col_exists_id boolean := false;
    col_count integer := 0;
    row_count bigint := 0;
    update_estimate integer := 0;
BEGIN
    -- Check for required columns
    SELECT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_schema = 'public' 
        AND table_name = table_name_param 
        AND column_name = 'created_at'
    ) INTO col_exists_created;
    
    SELECT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_schema = 'public' 
        AND table_name = table_name_param 
        AND column_name = 'updated_at'
    ) INTO col_exists_updated;
    
    SELECT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_schema = 'public' 
        AND table_name = table_name_param 
        AND column_name = 'user_id'
    ) INTO col_exists_user;
    
    SELECT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_schema = 'public' 
        AND table_name = table_name_param 
        AND column_name = 'project_id'
    ) INTO col_exists_project;
    
    SELECT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_schema = 'public' 
        AND table_name = table_name_param 
        AND column_name = 'id'
    ) INTO col_exists_id;
    
    -- Get column count
    SELECT COUNT(*) INTO col_count
    FROM information_schema.columns 
    WHERE table_schema = 'public' 
    AND table_name = table_name_param;
    
    -- Get row count and estimate audit entries
    EXECUTE format('SELECT COUNT(*) FROM %I', table_name_param) INTO row_count;
    
    -- Estimate audit entries (1 for create + 30% for updates)
    estimated_audit_entries := row_count;
    IF col_exists_updated THEN
        estimated_audit_entries := row_count + (row_count * 0.3)::integer;
    END IF;
    
    -- Return results
    table_name := table_name_param;
    has_created_at := col_exists_created;
    has_updated_at := col_exists_updated;
    has_user_id := col_exists_user;
    has_project_id := col_exists_project;
    has_id := col_exists_id;
    column_count := col_count;
    
    RETURN NEXT;
END;
$$;


--
-- Name: apply_audit_trigger_to_table(text); Type: PROCEDURE; Schema: public; Owner: -
--

CREATE PROCEDURE public.apply_audit_trigger_to_table(IN table_name text)
    LANGUAGE plpgsql
    AS $$
BEGIN
  EXECUTE format('
    DROP TRIGGER IF EXISTS %I_audit_trigger ON %I;
    CREATE TRIGGER %I_audit_trigger
    AFTER INSERT OR UPDATE OR DELETE ON %I
    FOR EACH ROW EXECUTE FUNCTION log_database_changes();
  ', table_name, table_name, table_name, table_name);
END;
$$;


--
-- Name: archive_old_moonpay_compliance_alerts(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.archive_old_moonpay_compliance_alerts() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
    archived_count INTEGER;
BEGIN
    -- This could move old alerts to an archive table or mark them as archived
    UPDATE moonpay_compliance_alerts 
    SET metadata = jsonb_set(
        COALESCE(metadata, '{}'::jsonb),
        '{archived}',
        'true'::jsonb
    )
    WHERE status = 'resolved' 
    AND resolved_at < NOW() - INTERVAL '1 year'
    AND NOT COALESCE((metadata->>'archived')::boolean, false);
    
    GET DIAGNOSTICS archived_count = ROW_COUNT;
    RETURN archived_count;
END;
$$;


--
-- Name: assign_redemption_approvers(uuid, uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.assign_redemption_approvers(p_redemption_request_id uuid, p_approval_config_id uuid) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    approver_record RECORD;
    user_record RECORD;
BEGIN
    -- Clear any existing assignments for this redemption request
    DELETE FROM redemption_approver_assignments 
    WHERE redemption_request_id = p_redemption_request_id;
    
    -- Insert approver assignments based on approval config
    FOR approver_record IN 
        SELECT * FROM approval_config_approvers 
        WHERE approval_config_id = p_approval_config_id
    LOOP
        IF approver_record.approver_type = 'user' THEN
            -- Direct user assignment
            INSERT INTO redemption_approver_assignments (
                redemption_request_id,
                approval_config_id,
                approver_user_id
            ) VALUES (
                p_redemption_request_id,
                p_approval_config_id,
                approver_record.approver_user_id
            );
        ELSIF approver_record.approver_type = 'role' THEN
            -- Assign all users with this role
            FOR user_record IN
                SELECT u.id
                FROM users u
                JOIN user_roles ur ON u.id = ur.user_id
                WHERE ur.role_id = approver_record.approver_role_id
                  AND u.status IS DISTINCT FROM 'inactive'
            LOOP
                INSERT INTO redemption_approver_assignments (
                    redemption_request_id,
                    approval_config_id,
                    approver_user_id
                ) VALUES (
                    p_redemption_request_id,
                    p_approval_config_id,
                    user_record.id
                ) ON CONFLICT (redemption_request_id, approver_user_id) DO NOTHING;
            END LOOP;
        END IF;
    END LOOP;
    
    RETURN TRUE;
EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE 'Error assigning redemption approvers: %', SQLERRM;
        RETURN FALSE;
END;
$$;


--
-- Name: audit_investor_approval_changes(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.audit_investor_approval_changes() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    IF (TG_OP = 'UPDATE' AND NEW.status != OLD.status) THEN
        INSERT INTO audit_logs (
            entity_id,
            entity_type,
            action,
            user_id,
            details,
            status,
            created_at
        ) VALUES (
            NEW.id,
            'investor_approval',
            'status_change',
            auth.uid(),
            jsonb_build_object(
                'old_status', OLD.status,
                'new_status', NEW.status,
                'investor_id', NEW.investor_id,
                'approval_type', NEW.approval_type
            ),
            'success',
            now()
        );
    END IF;
    RETURN NEW;
END;
$$;


--
-- Name: backup_trigger_definitions(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.backup_trigger_definitions() RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- Create backup table for trigger definitions
  CREATE TABLE IF NOT EXISTS trigger_backup_pre_migration AS
  SELECT 
    trigger_name,
    event_object_table,
    event_manipulation,
    action_statement,
    now() as backup_date
  FROM information_schema.triggers 
  WHERE event_object_schema = 'public'
    AND (trigger_name LIKE '%audit%' 
         OR trigger_name LIKE '%log%' 
         OR action_statement LIKE '%log_%'
         OR action_statement LIKE '%audit%');
         
  RAISE NOTICE 'Trigger definitions backed up to trigger_backup_pre_migration table';
END;
$$;


--
-- Name: begin_transaction(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.begin_transaction() RETURNS boolean
    LANGUAGE plpgsql
    AS $$
BEGIN
    -- PostgreSQL transactions are automatically started with each connection
    -- This function validates we're in a valid state to begin operations
    RETURN true;
EXCEPTION
    WHEN OTHERS THEN
        RETURN false;
END;
$$;


--
-- Name: calculate_batch_climate_risk(uuid[], jsonb); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.calculate_batch_climate_risk(p_receivable_ids uuid[], p_calculation_metadata jsonb DEFAULT '{}'::jsonb) RETURNS TABLE(receivable_id uuid, risk_score integer, discount_rate numeric, status text, error_message text)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  rec_id UUID;
  calc_result RECORD;
  payer_data RECORD;
  asset_data RECORD;
  composite_risk NUMERIC;
  calculated_discount NUMERIC;
  current_timestamp TIMESTAMPTZ := NOW();
BEGIN
  -- Process each receivable in the batch
  FOREACH rec_id IN ARRAY p_receivable_ids
  LOOP
    BEGIN
      -- Get receivable with payer and asset data
      SELECT 
        r.receivable_id,
        r.amount,
        r.due_date,
        p.credit_rating,
        p.financial_health_score,
        p.payment_history,
        COALESCE(a.capacity_mw, 0) as asset_capacity
      INTO calc_result
      FROM climate_receivables r
      LEFT JOIN climate_payers p ON r.payer_id = p.payer_id
      LEFT JOIN energy_assets a ON r.asset_id = a.id
      WHERE r.receivable_id = rec_id;

      IF NOT FOUND THEN
        -- Return error for missing receivable
        SELECT rec_id, NULL, NULL, 'error', 'Receivable not found';
        CONTINUE;
      END IF;

      -- Calculate composite risk score (simplified business logic)
      composite_risk := 
        CASE 
          WHEN calc_result.credit_rating IN ('AAA', 'AA') THEN 15
          WHEN calc_result.credit_rating IN ('A', 'BBB') THEN 35
          WHEN calc_result.credit_rating IN ('BB', 'B') THEN 60
          ELSE 85
        END +
        CASE 
          WHEN calc_result.financial_health_score >= 80 THEN -10
          WHEN calc_result.financial_health_score >= 60 THEN 0
          ELSE 15
        END;

      -- Cap risk score between 5 and 95
      composite_risk := GREATEST(5, LEAST(composite_risk, 95));

      -- Calculate discount rate based on risk
      calculated_discount := 2.0 + (composite_risk / 100.0) * 6.0;

      -- Insert or update risk calculation
      INSERT INTO climate_risk_calculations (
        receivable_id,
        calculated_at,
        production_risk_score,
        production_risk_factors,
        production_risk_confidence,
        credit_risk_score,
        credit_risk_factors,
        credit_risk_confidence,
        policy_risk_score,
        policy_risk_factors,
        policy_risk_confidence,
        composite_risk_score,
        composite_risk_level,
        composite_risk_confidence,
        discount_rate_calculated,
        recommendations,
        alerts,
        next_review_date,
        project_id
      ) VALUES (
        rec_id,
        current_timestamp,
        25.0, -- Placeholder production risk
        ARRAY['asset_capacity', 'seasonal_variation'],
        85.0,
        composite_risk * 0.6, -- Credit component
        ARRAY['credit_rating', 'financial_health'],
        90.0,
        composite_risk * 0.2, -- Policy component  
        ARRAY['regulatory_environment'],
        70.0,
        composite_risk,
        CASE 
          WHEN composite_risk <= 20 THEN 'Low'
          WHEN composite_risk <= 40 THEN 'Medium'
          WHEN composite_risk <= 60 THEN 'High'
          ELSE 'Very High'
        END,
        85.0,
        calculated_discount,
        ARRAY['Monitor credit rating changes', 'Review quarterly'],
        '[]'::jsonb,
        current_timestamp + INTERVAL '90 days',
        calc_result.project_id
      )
      ON CONFLICT (receivable_id) DO UPDATE SET
        calculated_at = EXCLUDED.calculated_at,
        composite_risk_score = EXCLUDED.composite_risk_score,
        composite_risk_level = EXCLUDED.composite_risk_level,
        discount_rate_calculated = EXCLUDED.discount_rate_calculated,
        updated_at = current_timestamp;

      -- Update the receivable with calculated values
      UPDATE climate_receivables 
      SET 
        risk_score = composite_risk::INTEGER,
        discount_rate = calculated_discount,
        updated_at = current_timestamp
      WHERE receivable_id = rec_id;

      -- Return success result
      SELECT rec_id, composite_risk::INTEGER, calculated_discount, 'success', NULL;

    EXCEPTION
      WHEN OTHERS THEN
        -- Return error result but continue with batch
        SELECT rec_id, NULL, NULL, 'error', SQLERRM;
        CONTINUE;
    END;
  END LOOP;

  RETURN;
END;
$$;


--
-- Name: calculate_daily_nav(uuid, date); Type: PROCEDURE; Schema: public; Owner: -
--

CREATE PROCEDURE public.calculate_daily_nav(IN p_project_id uuid, IN p_date date)
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_product RECORD; -- Dynamic per type
  v_nav NUMERIC(18,6); -- Computed NAV
  v_total_assets NUMERIC(78,18); -- Summed assets
  v_asset_name TEXT; -- Name from product table
  v_total_liabilities NUMERIC(78,18) := 0; -- Example: defaults to 0; compute as needed
  v_outstanding_shares NUMERIC(78,18); -- From token views or product
BEGIN
  -- Loop over products for project (union across all product tables for comprehensive coverage)
  FOR v_product IN 
    SELECT id, 'asset_backed' AS type FROM asset_backed_products WHERE project_id = p_project_id
    UNION SELECT id, 'bond' AS type FROM bond_products WHERE project_id = p_project_id
    UNION SELECT id, 'collectible' AS type FROM collectibles_products WHERE project_id = p_project_id
    UNION SELECT id, 'commodity' AS type FROM commodities_products WHERE project_id = p_project_id
    UNION SELECT id, 'climate_receivable' AS type FROM climate_receivables WHERE project_id = p_project_id
    UNION SELECT id, 'digital_fund' AS type FROM digital_tokenised_fund_products WHERE project_id = p_project_id
    UNION SELECT id, 'energy' AS type FROM energy_assets WHERE project_id = p_project_id
    UNION SELECT id, 'equity' AS type FROM equity_products WHERE project_id = p_project_id
    UNION SELECT id, 'fund' AS type FROM funds_products WHERE project_id = p_project_id
    UNION SELECT id, 'infrastructure' AS type FROM infrastructure_products WHERE project_id = p_project_id
    UNION SELECT id, 'private_debt' AS type FROM private_debt_products WHERE project_id = p_project_id
    UNION SELECT id, 'private_equity' AS type FROM private_equity_products WHERE project_id = p_project_id
    UNION SELECT id, 'real_estate' AS type FROM real_estate_products WHERE project_id = p_project_id
    UNION SELECT id, 'structured' AS type FROM structured_products WHERE project_id = p_project_id
    -- Add stablecoin subtypes if separate tables exist; otherwise handle via digital_fund or JSON
    UNION SELECT id, 'stablecoin_fiat' AS type FROM stablecoin_products WHERE project_id = p_project_id AND collateral_type = 'Fiat'
    UNION SELECT id, 'stablecoin_crypto' AS type FROM stablecoin_products WHERE project_id = p_project_id AND collateral_type = 'Crypto'
    UNION SELECT id, 'stablecoin_commodity' AS type FROM stablecoin_products WHERE project_id = p_project_id AND collateral_type = 'Commodity'
    UNION SELECT id, 'stablecoin_algorithmic' AS type FROM stablecoin_products WHERE project_id = p_project_id AND collateral_type = 'Algorithmic'
    UNION SELECT id, 'stablecoin_rebasing' AS type FROM stablecoin_products WHERE project_id = p_project_id AND collateral_type = 'Rebasing' -- Adjust if rebasing is a flag
  LOOP
    -- Compute values based on product type (specialist logic per type; examples based on schema fields/oracles with 2025-09-03 market data)
    CASE v_product.type
      WHEN 'asset_backed' THEN
        -- Specialist: Discounted cash flows, adjust for delinquency/recovery
        SELECT asset_type, current_balance, (current_balance * (1 + (interest_rate / 100)) * (recovery_rate_percentage / 100)), total_supply::NUMERIC(78,18)
        INTO v_asset_name, v_total_assets, v_nav, v_outstanding_shares
        FROM asset_backed_products abp
        LEFT JOIN token_erc20_view tv ON abp.id::text = tv.token_id
        WHERE abp.id = v_product.id;
        -- Adjust for delinquency
        IF delinquency_status > 0 THEN v_total_assets := v_total_assets * (1 - (delinquency_status / 100)); END IF;
        v_nav := COALESCE(v_nav, (v_total_assets - v_total_liabilities) / v_outstanding_shares);

      WHEN 'bond' THEN
        -- Specialist: Mark-to-market with yield adjustment (using ~4.28% for corporate/10Y Treasury on 2025-09-03)
        SELECT issuer_name, face_value, (face_value * (1 + (yield_to_maturity / 100))), outstanding_supply::NUMERIC(78,18)
        INTO v_asset_name, v_total_assets, v_nav, v_outstanding_shares
        FROM bond_products bp
        LEFT JOIN token_erc20_view tv ON bp.id::text = tv.token_id
        WHERE bp.id = v_product.id;
        v_nav := COALESCE(v_nav, (v_total_assets - v_total_liabilities) / v_outstanding_shares);

      WHEN 'collectible' THEN
        -- Specialist: Appraisal-based for uniques
        SELECT description, current_value, current_value, 1 -- Often 1 share
        INTO v_asset_name, v_total_assets, v_nav, v_outstanding_shares
        FROM collectibles_products cp
        WHERE cp.id = v_product.id;
        v_nav := COALESCE(v_nav, (v_total_assets - v_total_liabilities) / v_outstanding_shares);

      WHEN 'commodity' THEN
        -- Specialist: Contract size with liquidity adjustment (e.g., gold ~3537 USD/oz, oil ~65 USD/bbl on 2025-09-03)
        SELECT commodity_name, (contract_size * liquidity_metric), (contract_size * liquidity_metric), total_supply::NUMERIC(78,18)
        INTO v_asset_name, v_total_assets, v_nav, v_outstanding_shares
        FROM commodities_products cp
        LEFT JOIN token_erc20_view tv ON cp.id::text = tv.token_id
        WHERE cp.id = v_product.id;
        v_nav := COALESCE(v_nav, (v_total_assets - v_total_liabilities) / v_outstanding_shares);

      WHEN 'climate_receivable' THEN
        -- Specialist: Discounted green cash flows
        SELECT receivable_type, amount, (amount / (1 + (discount_rate / 100))), 1
        INTO v_asset_name, v_total_assets, v_nav, v_outstanding_shares
        FROM climate_receivables cr
        WHERE cr.id = v_product.id;
        v_nav := COALESCE(v_nav, (v_total_assets - v_total_liabilities) / v_outstanding_shares);

      WHEN 'digital_fund' THEN
        -- Specialist: Mirror underlying with on-chain adjustments
        SELECT fund_name, total_value, total_value / outstanding_units, outstanding_units
        INTO v_asset_name, v_total_assets, v_nav, v_outstanding_shares
        FROM digital_tokenised_fund_products dtf
        LEFT JOIN token_erc20_view tv ON dtf.id::text = tv.token_id
        WHERE dtf.id = v_product.id;
        v_nav := COALESCE(v_nav, (v_total_assets - v_total_liabilities) / v_outstanding_shares);

      WHEN 'energy' THEN
        -- Specialist: Capacity-based with market price (e.g., natural gas ~2.99 USD/MMBtu on 2025-09-03)
        SELECT asset_name, (capacity * production_rate * market_price), (capacity * production_rate * market_price), total_supply::NUMERIC(78,18)
        INTO v_asset_name, v_total_assets, v_nav, v_outstanding_shares
        FROM energy_assets ea
        LEFT JOIN token_erc20_view tv ON ea.id::text = tv.token_id
        WHERE ea.id = v_product.id;
        v_nav := COALESCE(v_nav, (v_total_assets - v_total_liabilities) / v_outstanding_shares);

      WHEN 'equity' THEN
        -- Specialist: Market cap or multiples (e.g., S&P 500 ~6415 on 2025-09-03)
        SELECT company_name, (shares_outstanding * current_share_price), (shares_outstanding * current_share_price), shares_outstanding
        INTO v_asset_name, v_total_assets, v_nav, v_outstanding_shares
        FROM equity_products ep
        WHERE ep.id = v_product.id;
        v_nav := COALESCE(v_nav, (v_total_assets - v_total_liabilities) / v_outstanding_shares);

      WHEN 'fund' THEN
        -- Specialist: Weighted holdings (e.g., MMFs with compliance; yields: Treasuries ~4.13-4.30%, Repos ~4.25%, Commercial Paper ~4.23%, CDs ~4.00-5.00%, Corporate ~4.28-6.00%, Municipal ~2.19-4.62% on 2025-09-03)
        SELECT fund_name, SUM(ah.value * (1 + (ah.oracle_price / 100))), SUM(ah.value * (1 + (ah.oracle_price / 100))) / total_units, total_units
        INTO v_asset_name, v_total_assets, v_nav, v_outstanding_shares
        FROM funds_products fp
        LEFT JOIN asset_holdings ah ON fp.id = ah.asset_id
        LEFT JOIN token_erc20_view tv ON fp.id::text = tv.token_id
        WHERE fp.id = v_product.id AND (ah.maturity_date - p_date) <= 397 -- MMF maturity limit
        GROUP BY fp.fund_name, fp.total_units, tv.total_supply;
        -- Example MMF WAM check (simplified); raise error if >60
        v_nav := COALESCE(v_nav, (v_total_assets - v_total_liabilities) / v_outstanding_shares); -- Aim ~1.00

      WHEN 'infrastructure' THEN
        -- Specialist: Revenue projections with depreciation
        SELECT project_name, (project_value - depreciation_accumulated), (project_value - depreciation_accumulated), total_units
        INTO v_asset_name, v_total_assets, v_nav, v_outstanding_shares
        FROM infrastructure_products ip
        WHERE ip.id = v_product.id;
        v_nav := COALESCE(v_nav, (v_total_assets - v_total_liabilities) / v_outstanding_shares);

      WHEN 'private_debt' THEN
        -- Specialist: Amortized + interest minus impairments
        SELECT debt_type, (principal_amount * (1 + (interest_rate / 100)) - impairment_amount), (principal_amount * (1 + (interest_rate / 100)) - impairment_amount), outstanding_units
        INTO v_asset_name, v_total_assets, v_nav, v_outstanding_shares
        FROM private_debt_products pdp
        WHERE pdp.id = v_product.id;
        v_nav := COALESCE(v_nav, (v_total_assets - v_total_liabilities) / v_outstanding_shares);

      WHEN 'private_equity' THEN
        -- Specialist: Appraisal-based
        SELECT company_name, current_valuation, current_valuation / shares_outstanding, shares_outstanding
        INTO v_asset_name, v_total_assets, v_nav, v_outstanding_shares
        FROM private_equity_products pep
        WHERE pep.id = v_product.id;
        v_nav := COALESCE(v_nav, (v_total_assets - v_total_liabilities) / v_outstanding_shares);

      WHEN 'real_estate' THEN
        -- Specialist: Cap rate on NOI (e.g., indices ~370.9 Dow Jones US Real Estate, +2.9% YoY house prices on 2025-09-03)
        SELECT property_name, (net_operating_income / cap_rate), (net_operating_income / cap_rate), total_units
        INTO v_asset_name, v_total_assets, v_nav, v_outstanding_shares
        FROM real_estate_products rep
        WHERE rep.id = v_product.id;
        v_nav := COALESCE(v_nav, (v_total_assets - v_total_liabilities) / v_outstanding_shares);

      WHEN 'structured' THEN
        -- Specialist: Sum underlying with risk adjustments
        SELECT product_name, SUM(underlying_value) * (1 - risk_factor), SUM(underlying_value) * (1 - risk_factor), total_units
        INTO v_asset_name, v_total_assets, v_nav, v_outstanding_shares
        FROM structured_products sp
        LEFT JOIN asset_holdings ah ON sp.id = ah.asset_id -- Assume holdings for underlyings
        WHERE sp.id = v_product.id
        GROUP BY sp.product_name, sp.total_units;
        v_nav := COALESCE(v_nav, (v_total_assets - v_total_liabilities) / v_outstanding_shares);

      WHEN 'stablecoin_fiat' OR 'stablecoin_crypto' OR 'stablecoin_commodity' OR 'stablecoin_algorithmic' OR 'stablecoin_rebasing' THEN
        -- Specialist: Peg stability; over-collateral for crypto/commodity (USDT/USDC ~1.00 peg on 2025-09-03)
        SELECT stablecoin_name, collateral_value, 1.00, total_supply::NUMERIC(78,18) -- Aim for peg ~1.00
        INTO v_asset_name, v_total_assets, v_nav, v_outstanding_shares
        FROM stablecoin_products scp
        LEFT JOIN token_erc20_view tv ON scp.id::text = tv.token_id
        WHERE scp.id = v_product.id;
        -- For crypto: Ensure over-collateral (e.g., if collateral_value / total_supply < 1.5, flag)
        IF v_product.type = 'stablecoin_rebasing' THEN v_outstanding_shares := v_outstanding_shares * rebasing_factor; END IF; -- Rebase adjustment
        v_nav := COALESCE(v_nav, (v_total_assets - v_total_liabilities) / v_outstanding_shares);

      ELSE
        -- Default/fallback (aggregate from holdings if possible)
        v_asset_name := 'Unknown Asset';
        SELECT SUM(ah.value), COUNT(ah.id)
        INTO v_total_assets, v_outstanding_shares
        FROM asset_holdings ah
        WHERE ah.asset_id = v_product.id;
        v_outstanding_shares := GREATEST(v_outstanding_shares, 1); -- Avoid division by zero
        v_nav := (v_total_assets - v_total_liabilities) / v_outstanding_shares;
    END CASE;

    -- Insert with computed values
    INSERT INTO asset_nav_data (asset_id, project_id, date, nav, total_assets, asset_name, total_liabilities, outstanding_shares, source)
    VALUES (v_product.id, p_project_id, p_date, v_nav, v_total_assets, v_asset_name, v_total_liabilities, v_outstanding_shares, 'calculated')
    ON CONFLICT (asset_id, date) DO UPDATE SET 
      nav = EXCLUDED.nav, 
      total_assets = EXCLUDED.total_assets, 
      asset_name = EXCLUDED.asset_name, 
      total_liabilities = EXCLUDED.total_liabilities, 
      outstanding_shares = EXCLUDED.outstanding_shares,
      updated_at = NOW(); -- Update timestamp
  END LOOP;
END;
$$;


--
-- Name: calculate_nav_change(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.calculate_nav_change() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- Retrieve the most recent previous NAV for the same asset before the current date
  SELECT nav INTO NEW.previous_nav
  FROM public.asset_nav_data
  WHERE asset_id = NEW.asset_id
    AND date < NEW.date
  ORDER BY date DESC
  LIMIT 1;

  -- Calculate changes if a previous NAV exists
  IF NEW.previous_nav IS NOT NULL THEN
    NEW.change_amount := NEW.nav - NEW.previous_nav;
    IF NEW.previous_nav != 0 THEN
      NEW.change_percent := (NEW.change_amount / NEW.previous_nav) * 100;
    ELSE
      NEW.change_percent := NULL;
    END IF;
  ELSE
    NEW.change_amount := NULL;
    NEW.change_percent := NULL;
  END IF;

  RETURN NEW;
END;
$$;


--
-- Name: calculate_portfolio_climate_valuation(uuid[], text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.calculate_portfolio_climate_valuation(p_receivable_ids uuid[], p_calculation_mode text DEFAULT 'comprehensive'::text) RETURNS TABLE(portfolio_summary jsonb, individual_valuations jsonb[])
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  rec_id UUID;
  valuation_result JSONB;
  all_valuations JSONB[] := '{}';
  total_recommended_value NUMERIC := 0;
  total_risk_adjusted_value NUMERIC := 0;
  total_receivables INTEGER := 0;
  avg_risk_score NUMERIC := 0;
  portfolio_confidence NUMERIC := 0;
BEGIN
  -- Calculate valuation for each receivable
  FOREACH rec_id IN ARRAY p_receivable_ids
  LOOP
    BEGIN
      WITH receivable_data AS (
        SELECT 
          r.receivable_id,
          r.amount,
          r.due_date,
          r.risk_score,
          r.discount_rate,
          rc.composite_risk_score,
          rc.composite_risk_confidence
        FROM climate_receivables r
        LEFT JOIN climate_risk_calculations rc ON r.receivable_id = rc.receivable_id
        WHERE r.receivable_id = rec_id
      ),
      valuation_calc AS (
        SELECT 
          receivable_id,
          amount,
          risk_score,
          discount_rate,
          -- Risk-adjusted value calculation
          amount * (100 - COALESCE(risk_score, 50)) / 100.0 as risk_adjusted_value,
          -- NPV calculation  
          amount / POWER(1 + COALESCE(discount_rate, 5.0) / 100.0, 
                        EXTRACT(DAYS FROM due_date - CURRENT_DATE) / 365.0) as npv_value,
          COALESCE(composite_risk_confidence, 75.0) as confidence_level
        FROM receivable_data
      )
      SELECT jsonb_build_object(
        'receivableId', receivable_id,
        'recommendedValue', LEAST(risk_adjusted_value, npv_value),
        'riskAdjustedValue', risk_adjusted_value,
        'cashFlowNPV', npv_value,
        'riskScore', COALESCE(risk_score, 50),
        'confidenceLevel', confidence_level,
        'methodology', 'Portfolio Risk-Adjusted NPV',
        'lastUpdated', NOW(),
        'factors', jsonb_build_object(
          'creditRisk', COALESCE(risk_score, 50) * 0.6,
          'marketRisk', COALESCE(risk_score, 50) * 0.3,
          'operationalRisk', COALESCE(risk_score, 50) * 0.1
        )
      ) INTO valuation_result
      FROM valuation_calc;

      -- Add to results array
      all_valuations := all_valuations || valuation_result;
      
      -- Update running totals
      total_recommended_value := total_recommended_value + (valuation_result->>'recommendedValue')::NUMERIC;
      total_risk_adjusted_value := total_risk_adjusted_value + (valuation_result->>'riskAdjustedValue')::NUMERIC;
      total_receivables := total_receivables + 1;
      avg_risk_score := avg_risk_score + (valuation_result->>'riskScore')::NUMERIC;
      portfolio_confidence := portfolio_confidence + (valuation_result->>'confidenceLevel')::NUMERIC;

    EXCEPTION
      WHEN OTHERS THEN
        -- Continue with other receivables even if one fails
        CONTINUE;
    END;
  END LOOP;

  -- Calculate portfolio averages
  IF total_receivables > 0 THEN
    avg_risk_score := avg_risk_score / total_receivables;
    portfolio_confidence := portfolio_confidence / total_receivables;
  END IF;

  -- Return portfolio summary and individual valuations
  SELECT 
    jsonb_build_object(
      'totalReceivables', total_receivables,
      'totalValue', total_recommended_value,
      'averageRiskScore', ROUND(avg_risk_score, 1),
      'portfolioConfidence', ROUND(portfolio_confidence, 1),
      'valuationDate', NOW(),
      'attribution', jsonb_build_object(
        'assetSelection', 0.02,
        'timing', -0.005,
        'totalAlpha', 0.015
      )
    ),
    all_valuations;

  RETURN;
END;
$$;


--
-- Name: calculate_project_weighted_nav(uuid, date); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.calculate_project_weighted_nav(p_project_id uuid, p_date date) RETURNS numeric
    LANGUAGE plpgsql STABLE
    AS $$
DECLARE
    weighted_nav NUMERIC(18,6);
BEGIN
    SELECT 
        CASE 
            WHEN SUM(total_assets) = 0 THEN 0
            ELSE SUM(nav * total_assets) / SUM(total_assets)
        END
    INTO weighted_nav
    FROM asset_nav_data
    WHERE project_id = p_project_id
    AND date = p_date
    AND validated = true;
    
    RETURN COALESCE(weighted_nav, 0);
END;
$$;


--
-- Name: FUNCTION calculate_project_weighted_nav(p_project_id uuid, p_date date); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.calculate_project_weighted_nav(p_project_id uuid, p_date date) IS 'Calculates the asset-weighted average NAV for all validated assets in a project on a specific date';


--
-- Name: check_all_approvals(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.check_all_approvals() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
    total_approvers INT;
    approved_count INT;
    min_required INT;
    rule_record RECORD;
    template_record RECORD;
BEGIN
    -- Count total approvers for this rule/template
    SELECT COUNT(*) INTO total_approvers 
    FROM policy_rule_approvers 
    WHERE policy_rule_id = NEW.policy_rule_id;
    
    -- Count approved approvers
    SELECT COUNT(*) INTO approved_count 
    FROM policy_rule_approvers 
    WHERE policy_rule_id = NEW.policy_rule_id AND status = 'approved';
    
    -- Check what kind of entity this is
    SELECT * INTO rule_record FROM rules WHERE rule_id = NEW.policy_rule_id;
    IF rule_record IS NOT NULL THEN
        -- It's a rule
        -- Get minimum required approvals if specified in rule details
        IF rule_record.rule_details->'requiredApprovals' IS NOT NULL THEN
            min_required := (rule_record.rule_details->>'requiredApprovals')::int;
        ELSE 
            -- Default to all approvers
            min_required := total_approvers;
        END IF;
        
        -- If enough approvals, update rule status
        IF approved_count >= min_required THEN
            UPDATE rules SET status = 'active' WHERE rule_id = NEW.policy_rule_id;
        END IF;
    ELSE
        -- Check if it's a template
        SELECT * INTO template_record FROM policy_templates WHERE template_id = NEW.policy_rule_id;
        IF template_record IS NOT NULL THEN
            -- It's a template
            -- Get minimum required approvals if specified in template data
            IF template_record.template_data->'requiredApprovals' IS NOT NULL THEN
                min_required := (template_record.template_data->>'requiredApprovals')::int;
            ELSE 
                -- Default to all approvers
                min_required := total_approvers;
            END IF;
            
            -- If enough approvals, update template status
            IF approved_count >= min_required THEN
                UPDATE policy_templates SET status = 'active' WHERE template_id = NEW.policy_rule_id;
            END IF;
        END IF;
    END IF;
    
    RETURN NEW;
END;
$$;


--
-- Name: check_document_expiry(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.check_document_expiry() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    IF NEW.expiry_date IS NOT NULL AND NEW.expiry_date <= now() THEN
        UPDATE documents
        SET status = 'expired'
        WHERE id = NEW.id;
    END IF;
    RETURN NEW;
END;
$$;


--
-- Name: check_duplicate_wallet(uuid, character varying, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.check_duplicate_wallet(p_project_id uuid, p_network character varying, p_credential_type character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
BEGIN
    RETURN EXISTS (
        SELECT 1 FROM project_credentials 
        WHERE project_id = p_project_id 
        AND network = p_network 
        AND credential_type = p_credential_type 
        AND is_active = true 
        AND revoked_at IS NULL
    );
END;
$$;


--
-- Name: FUNCTION check_duplicate_wallet(p_project_id uuid, p_network character varying, p_credential_type character varying); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.check_duplicate_wallet(p_project_id uuid, p_network character varying, p_credential_type character varying) IS 'Check if wallet already exists for project+network combination';


--
-- Name: check_issuer_document_duplicates(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.check_issuer_document_duplicates() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- Check if a document with same issuer_id, document_type, and document_name already exists
  IF EXISTS (
    SELECT 1 FROM issuer_documents 
    WHERE issuer_id = NEW.issuer_id 
    AND document_type = NEW.document_type 
    AND document_name = NEW.document_name 
    AND status = 'active'
    AND id != COALESCE(NEW.id, '00000000-0000-0000-0000-000000000000'::uuid)
  ) THEN
    RAISE EXCEPTION 'Document with name "%" and type "%" already exists for this issuer', NEW.document_name, NEW.document_type;
  END IF;
  
  RETURN NEW;
END;
$$;


--
-- Name: check_permission(text, text, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.check_permission(p_role_name text, p_resource text, p_action text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_role_id UUID;
  v_permission_id UUID;
  v_has_permission BOOLEAN;
BEGIN
  -- Get the role ID
  SELECT id INTO v_role_id
  FROM roles
  WHERE name = p_role_name;
  
  -- If role doesn't exist, return false
  IF v_role_id IS NULL THEN
    RETURN FALSE;
  END IF;
  
  -- Get the permission ID
  SELECT id INTO v_permission_id
  FROM permissions
  WHERE resource = p_resource AND action = p_action;
  
  -- If permission doesn't exist, return false
  IF v_permission_id IS NULL THEN
    RETURN FALSE;
  END IF;
  
  -- Check if the role has this permission
  SELECT EXISTS (
    SELECT 1
    FROM role_permissions
    WHERE role_id = v_role_id
      AND permission_id = v_permission_id
      AND effect = 'allow'
  ) INTO v_has_permission;
  
  RETURN v_has_permission;
END;
$$;


--
-- Name: check_redemption_eligibility(uuid, uuid, numeric, text, uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.check_redemption_eligibility(p_investor_id uuid, p_project_id uuid, p_requested_amount numeric, p_product_type text DEFAULT NULL::text, p_product_id uuid DEFAULT NULL::uuid) RETURNS TABLE(eligible boolean, reason text, max_amount numeric, window_id uuid, distribution_ids uuid[], validation_details jsonb)
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_total_available NUMERIC := 0;
    v_eligibility_record RECORD;
    v_validation JSONB := '{}';
    v_distribution_ids UUID[];
BEGIN
    -- Check if redemptions are open globally
    SELECT INTO v_eligibility_record *
    FROM redemption_rules rr 
    WHERE rr.project_id = p_project_id
      AND (p_product_type IS NULL OR rr.product_type = p_product_type)
      AND (p_product_id IS NULL OR rr.product_id = p_product_id)
    ORDER BY rr.created_at DESC
    LIMIT 1;
    
    -- Principle 1: Check if redemptions are open
    IF NOT FOUND OR v_eligibility_record.is_redemption_open = false THEN
        RETURN QUERY SELECT 
            false,
            'Redemptions are currently closed for this project/product',
            0::NUMERIC,
            NULL::UUID,
            ARRAY[]::UUID[],
            '{"principle_violated": 1, "reason": "redemptions_closed"}'::JSONB;
        RETURN;
    END IF;
    
    -- Principle 2: Check date eligibility
    IF v_eligibility_record.open_after_date IS NOT NULL AND v_eligibility_record.open_after_date > NOW() THEN
        RETURN QUERY SELECT 
            false,
            'Redemption period opens on ' || v_eligibility_record.open_after_date::text,
            0::NUMERIC,
            NULL::UUID,
            ARRAY[]::UUID[],
            jsonb_build_object(
                'principle_violated', 2, 
                'reason', 'not_yet_open',
                'open_date', v_eligibility_record.open_after_date
            );
        RETURN;
    END IF;
    
    -- Principle 3: Check distribution limits and calculate available amounts
    SELECT 
        COALESCE(SUM(re.max_redeemable_amount), 0),
        ARRAY_AGG(re.distribution_id)
    INTO v_total_available, v_distribution_ids
    FROM redemption_eligibility re
    WHERE re.investor_id = p_investor_id
      AND re.project_id = p_project_id
      AND re.is_eligible_now = true
      AND (p_product_type IS NULL OR re.product_type = p_product_type)
      AND (p_product_id IS NULL OR re.product_id = p_product_id);
    
    -- Check if investor has any distributions
    IF v_total_available = 0 OR v_distribution_ids IS NULL THEN
        RETURN QUERY SELECT 
            false,
            'No eligible distributions found for redemption',
            0::NUMERIC,
            NULL::UUID,
            ARRAY[]::UUID[],
            '{"principle_violated": 3, "reason": "no_distributions"}'::JSONB;
        RETURN;
    END IF;
    
    -- Check if requested amount exceeds limits
    IF p_requested_amount > v_total_available THEN
        RETURN QUERY SELECT 
            false,
            'Requested amount exceeds maximum redeemable amount',
            v_total_available,
            NULL::UUID,
            v_distribution_ids,
            jsonb_build_object(
                'principle_violated', 3, 
                'reason', 'amount_exceeds_limit',
                'requested', p_requested_amount,
                'available', v_total_available
            );
        RETURN;
    END IF;
    
    -- All checks passed
    v_validation := jsonb_build_object(
        'all_principles_satisfied', true,
        'continuous_redemption', v_eligibility_record.allow_continuous_redemption,
        'max_percentage', v_eligibility_record.max_redemption_percentage
    );
    
    RETURN QUERY SELECT 
        true,
        'Eligible for redemption',
        v_total_available,
        NULL::UUID,
        v_distribution_ids,
        v_validation;
    RETURN;
END;
$$;


--
-- Name: check_role_exists(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.check_role_exists() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- First check if the role exists directly in the roles table
  IF EXISTS (SELECT 1 FROM roles WHERE name = NEW.role) THEN
    RETURN NEW;
  END IF;
  
  -- If not found directly, try to normalize common role formats
  -- This handles cases like 'Super Admin' vs 'superAdmin' vs 'super_admin'
  DECLARE
    normalized_role TEXT;
  BEGIN
    -- Simple normalization for common patterns
    -- Convert spaces to camelCase
    IF NEW.role LIKE '% %' THEN
      normalized_role := regexp_replace(
        regexp_replace(
          initcap(NEW.role), 
          ' ([A-Za-z])',
          '\1',
          'g'
        ),
        '^([A-Z])',
        lower(substring(NEW.role from 1 for 1)),
        'g'
      );
    -- Convert snake_case to camelCase
    ELSIF NEW.role LIKE '%_%' THEN
      normalized_role := regexp_replace(
        regexp_replace(
          initcap(replace(NEW.role, '_', ' ')), 
          ' ([A-Za-z])',
          '\1',
          'g'
        ),
        '^([A-Z])',
        lower(substring(replace(NEW.role, '_', ' ') from 1 for 1)),
        'g'
      );
    ELSE
      normalized_role := NEW.role;
    END IF;
    
    -- Check if normalized role exists
    IF EXISTS (SELECT 1 FROM roles WHERE name = normalized_role) THEN
      -- Update to the normalized version
      NEW.role := normalized_role;
      RETURN NEW;
    END IF;
    
    -- Last resort: Check for similar roles using pattern matching
    IF EXISTS (SELECT 1 FROM roles WHERE 
               lower(name) LIKE lower(NEW.role) || '%' OR 
               lower(name) LIKE '%' || lower(NEW.role) || '%') THEN
      -- Get the first matching role
      SELECT name INTO normalized_role FROM roles WHERE 
        lower(name) LIKE lower(NEW.role) || '%' OR 
        lower(name) LIKE '%' || lower(NEW.role) || '%'
      LIMIT 1;
      
      -- Update to the matched role
      NEW.role := normalized_role;
      RETURN NEW;
    END IF;
  END;
  
  -- If no existing role could be found or matched, try to add this role to the roles table
  -- This auto-creates missing roles to prevent constraint violations
  INSERT INTO roles (name, description, priority, created_at, updated_at)
  VALUES (
    NEW.role, 
    'Automatically created role from user_roles insert', 
    100, -- default priority
    NOW(),
    NOW()
  );
  
  RETURN NEW;
END;
$$;


--
-- Name: check_user_permission(uuid, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.check_user_permission(user_id uuid, permission text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  has_permission BOOLEAN := FALSE;
  super_admin_exists BOOLEAN := FALSE;
BEGIN
  -- Check if user has Super Admin role (handles multiple roles)
  SELECT EXISTS (
    SELECT 1
    FROM public.user_roles ur
    JOIN public.roles r ON ur.role_id = r.id
    WHERE ur.user_id = check_user_permission.user_id
    AND r.name = 'Super Admin'
  ) INTO super_admin_exists;
  
  -- Super Admin has all permissions
  IF super_admin_exists THEN
    RETURN TRUE;
  END IF;
  
  -- Check specific permission (handles multiple roles)
  SELECT EXISTS (
    SELECT 1
    FROM public.user_roles ur
    JOIN public.role_permissions rp ON ur.role_id = rp.role_id
    WHERE ur.user_id = check_user_permission.user_id
    AND rp.permission_name = check_user_permission.permission
  ) INTO has_permission;
  
  RETURN has_permission;
EXCEPTION
  WHEN OTHERS THEN
    RAISE NOTICE 'Error in check_user_permission: %', SQLERRM;
    RETURN FALSE;
END;
$$;


--
-- Name: FUNCTION check_user_permission(user_id uuid, permission text); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.check_user_permission(user_id uuid, permission text) IS 'Check if a user has a specific permission, with support for multiple roles';


--
-- Name: cleanup_expired_asset_cache(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.cleanup_expired_asset_cache() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
    deleted_count INTEGER;
BEGIN
    DELETE FROM moonpay_asset_cache WHERE expires_at < NOW();
    GET DIAGNOSTICS deleted_count = ROW_COUNT;
    RETURN deleted_count;
END;
$$;


--
-- Name: cleanup_expired_cache(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.cleanup_expired_cache() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  deleted_count INTEGER;
BEGIN
  DELETE FROM climate_market_data_cache WHERE expires_at < NOW();
  GET DIAGNOSTICS deleted_count = ROW_COUNT;
  RETURN deleted_count;
END;
$$;


--
-- Name: FUNCTION cleanup_expired_cache(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.cleanup_expired_cache() IS 'Removes expired cache entries - run periodically';


--
-- Name: cleanup_expired_cache_data(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.cleanup_expired_cache_data() RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  deleted_count INTEGER := 0;
  temp_count INTEGER;
BEGIN
  -- Clean up external API cache
  DELETE FROM external_api_cache WHERE expires_at < NOW();
  GET DIAGNOSTICS temp_count = ROW_COUNT;
  deleted_count := deleted_count + temp_count;

  -- Clean up weather cache (if exists)
  BEGIN
    DELETE FROM weather_cache WHERE expires_at < NOW();
    GET DIAGNOSTICS temp_count = ROW_COUNT;
    deleted_count := deleted_count + temp_count;
  EXCEPTION WHEN others THEN
    -- Table doesn't exist yet, skip
    NULL;
  END;

  -- Clean up user data cache (if exists)
  BEGIN
    DELETE FROM climate_user_data_cache WHERE expires_at < NOW();
    GET DIAGNOSTICS temp_count = ROW_COUNT;
    deleted_count := deleted_count + temp_count;
  EXCEPTION WHEN others THEN
    -- Table doesn't exist yet, skip
    NULL;
  END;

  RETURN deleted_count;
END;
$$;


--
-- Name: FUNCTION cleanup_expired_cache_data(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.cleanup_expired_cache_data() IS 'Clean up expired cache entries to maintain performance';


--
-- Name: cleanup_expired_transaction_drafts(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.cleanup_expired_transaction_drafts() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
    deleted_count INTEGER;
BEGIN
    DELETE FROM wallet_transaction_drafts 
    WHERE expires_at < CURRENT_TIMESTAMP;
    
    GET DIAGNOSTICS deleted_count = ROW_COUNT;
    RETURN deleted_count;
END;
$$;


--
-- Name: cleanup_old_moonpay_policy_logs(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.cleanup_old_moonpay_policy_logs() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
    deleted_count INTEGER;
BEGIN
    DELETE FROM moonpay_policy_logs 
    WHERE created_at < NOW() - (retention_period_days * INTERVAL '1 day');
    GET DIAGNOSTICS deleted_count = ROW_COUNT;
    RETURN deleted_count;
END;
$$;


--
-- Name: cleanup_old_validation_logs(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.cleanup_old_validation_logs() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
    deleted_count INTEGER;
BEGIN
    DELETE FROM restriction_validation_logs 
    WHERE validated_at < CURRENT_TIMESTAMP - INTERVAL '30 days';
    
    GET DIAGNOSTICS deleted_count = ROW_COUNT;
    RETURN deleted_count;
END;
$$;


--
-- Name: cleanup_old_webhook_events(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.cleanup_old_webhook_events() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
    deleted_count INTEGER;
BEGIN
    DELETE FROM moonpay_webhook_events 
    WHERE processed = true 
    AND received_at < NOW() - INTERVAL '30 days';
    GET DIAGNOSTICS deleted_count = ROW_COUNT;
    RETURN deleted_count;
END;
$$;


--
-- Name: cleanup_orphaned_policy_approvers(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.cleanup_orphaned_policy_approvers() RETURNS integer
    LANGUAGE plpgsql
    AS $$
        DECLARE
          deleted_count INTEGER;
        BEGIN
          WITH deleted AS (
            DELETE FROM policy_rule_approvers
            WHERE NOT EXISTS (
              SELECT 1 FROM rules WHERE rule_id = policy_rule_approvers.policy_rule_id
            )
            RETURNING *
          )
          SELECT COUNT(*) INTO deleted_count FROM deleted;
          
          RETURN deleted_count;
        END;
        $$;


--
-- Name: climate_receivables_health_check(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.climate_receivables_health_check() RETURNS jsonb
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  result JSONB;
  receivables_count INTEGER;
  recent_calculations_count INTEGER;
  projections_count INTEGER;
BEGIN
  -- Check receivables table
  SELECT COUNT(*) INTO receivables_count 
  FROM climate_receivables 
  WHERE created_at > NOW() - INTERVAL '30 days';

  -- Check recent risk calculations
  SELECT COUNT(*) INTO recent_calculations_count 
  FROM climate_risk_calculations 
  WHERE calculated_at > NOW() - INTERVAL '7 days';

  -- Check cash flow projections
  SELECT COUNT(*) INTO projections_count 
  FROM climate_cash_flow_projections 
  WHERE created_at > NOW() - INTERVAL '7 days';

  result := jsonb_build_object(
    'status', 'healthy',
    'timestamp', NOW(),
    'metrics', jsonb_build_object(
      'recent_receivables', receivables_count,
      'recent_calculations', recent_calculations_count,
      'recent_projections', projections_count
    ),
    'services', jsonb_build_object(
      'database', 'operational',
      'risk_calculation', CASE WHEN recent_calculations_count > 0 THEN 'active' ELSE 'idle' END,
      'cash_flow_forecasting', CASE WHEN projections_count > 0 THEN 'active' ELSE 'idle' END
    )
  );

  RETURN result;
END;
$$;


--
-- Name: column_exists(text, text, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.column_exists(p_schema_name text, p_table_name text, p_column_name text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
    DECLARE
      exists boolean;
    BEGIN
      SELECT COUNT(*) > 0 INTO exists
      FROM information_schema.columns
      WHERE table_schema = p_schema_name
      AND table_name = p_table_name
      AND column_name = p_column_name;
      
      RETURN exists;
    END;
    $$;


--
-- Name: commit_transaction(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.commit_transaction() RETURNS boolean
    LANGUAGE plpgsql
    AS $$
BEGIN
    -- In PostgreSQL with Supabase, commits happen automatically
    -- This function validates the transaction can be committed
    RETURN true;
EXCEPTION
    WHEN OTHERS THEN
        RETURN false;
END;
$$;


--
-- Name: create_audit_trigger(text, boolean); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.create_audit_trigger(table_name text, is_high_volume boolean DEFAULT false) RETURNS void
    LANGUAGE plpgsql
    AS $$
    DECLARE
      trigger_name text;
      trigger_condition text;
      has_significance boolean;
      has_importance boolean;
    BEGIN
      trigger_name := 'audit_' || table_name || '_trigger';
      
      -- Check if the table has relevant filtering columns
      has_significance := column_exists('public', table_name, 'is_significant');
      has_importance := column_exists('public', table_name, 'importance');
      
      -- Set up the condition
      IF is_high_volume THEN
        IF has_significance THEN
          trigger_condition := 'WHEN (NEW.is_significant = true OR OLD.is_significant = true)';
        ELSIF has_importance THEN
          trigger_condition := 'WHEN (NEW.importance > 5 OR OLD.importance > 5)';
        ELSE
          trigger_condition := '';
        END IF;
      ELSE
        trigger_condition := '';
      END IF;

      -- Drop the trigger if it exists
      EXECUTE 'DROP TRIGGER IF EXISTS ' || trigger_name || ' ON ' || table_name;
      
      -- Create the new trigger
      EXECUTE 'CREATE TRIGGER ' || trigger_name || 
              ' AFTER INSERT OR UPDATE OR DELETE ON ' || table_name || 
              ' FOR EACH ROW ' || trigger_condition || 
              ' EXECUTE FUNCTION log_table_change()';
              
      -- We'll skip logging to avoid circular dependencies
      RAISE NOTICE 'Created audit trigger for %', table_name;
    END;
    $$;


--
-- Name: create_document_version(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.create_document_version() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    IF (TG_OP = 'UPDATE' AND (OLD.file_path != NEW.file_path OR OLD.file_url != NEW.file_url)) THEN
        INSERT INTO document_versions (
            document_id,
            version_number,
            file_path,
            file_url,
            uploaded_by,
            metadata
        ) VALUES (
            NEW.id,
            NEW.version,
            NEW.file_path,
            NEW.file_url,
            NEW.uploaded_by,
            NEW.metadata
        );
        NEW.version = OLD.version + 1;
    END IF;
    RETURN NEW;
END;
$$;


--
-- Name: create_project_with_cap_table(jsonb, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.create_project_with_cap_table(project_data jsonb, cap_table_name text) RETURNS jsonb
    LANGUAGE plpgsql SECURITY DEFINER
    SET statement_timeout TO '60s'
    AS $$
DECLARE
  created_project JSONB;
  project_id UUID;
  duration_value TEXT;
  sub_start_date TEXT;
  sub_end_date TEXT;
  trans_start_date TEXT;
  maturity_date_value TEXT;
BEGIN
  -- Handle the duration field and date fields specially
  duration_value := project_data->>'duration';
  sub_start_date := project_data->>'subscription_start_date';
  sub_end_date := project_data->>'subscription_end_date';
  trans_start_date := project_data->>'transaction_start_date';
  maturity_date_value := project_data->>'maturity_date';
  
  -- Insert the project
  INSERT INTO projects (
    name,
    description,
    project_type,
    token_symbol,
    target_raise,
    authorized_shares,
    share_price,
    company_valuation,
    legal_entity,
    jurisdiction,
    tax_id,
    status,
    is_primary,
    investment_status,
    estimated_yield_percentage,
    duration,
    subscription_start_date,
    subscription_end_date,
    transaction_start_date,
    maturity_date,
    currency,
    minimum_investment,
    total_notional,
    created_at,
    updated_at
  )
  VALUES (
    project_data->>'name',
    project_data->>'description',
    project_data->>'project_type',
    project_data->>'token_symbol',
    (project_data->>'target_raise')::numeric,
    (project_data->>'authorized_shares')::integer,
    (project_data->>'share_price')::numeric,
    (project_data->>'company_valuation')::numeric,
    project_data->>'legal_entity',
    project_data->>'jurisdiction',
    project_data->>'tax_id',
    project_data->>'status',
    (project_data->>'is_primary')::boolean,
    COALESCE(project_data->>'investment_status', 'Open'),
    (project_data->>'estimated_yield_percentage')::numeric,
    CASE
      WHEN duration_value IS NULL OR duration_value = '' THEN NULL
      ELSE duration_value::public.project_duration
    END,
    CASE
      WHEN sub_start_date IS NULL OR sub_start_date = '' THEN NULL
      ELSE sub_start_date::timestamp with time zone
    END,
    CASE
      WHEN sub_end_date IS NULL OR sub_end_date = '' THEN NULL
      ELSE sub_end_date::timestamp with time zone
    END,
    CASE
      WHEN trans_start_date IS NULL OR trans_start_date = '' THEN NULL
      ELSE trans_start_date::timestamp with time zone
    END,
    CASE
      WHEN maturity_date_value IS NULL OR maturity_date_value = '' THEN NULL
      ELSE maturity_date_value::timestamp with time zone
    END,
    COALESCE(project_data->>'currency', 'USD'),
    (project_data->>'minimum_investment')::numeric,
    (project_data->>'total_notional')::numeric,
    COALESCE((project_data->>'created_at')::timestamp with time zone, now()),
    COALESCE((project_data->>'updated_at')::timestamp with time zone, now())
  )
  RETURNING id INTO project_id;

  -- Create a cap table for this project
  INSERT INTO cap_tables (
    project_id,
    name,
    created_at,
    updated_at,
    description
  )
  VALUES (
    project_id,
    cap_table_name,
    COALESCE((project_data->>'created_at')::timestamp with time zone, now()),
    COALESCE((project_data->>'updated_at')::timestamp with time zone, now()),
    NULL
  );

  -- Get the created project to return
  SELECT row_to_json(p)::jsonb INTO created_project
  FROM projects p
  WHERE p.id = project_id;

  RETURN created_project;
END;
$$;


--
-- Name: create_selective_audit_trigger(text, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.create_selective_audit_trigger(p_table text, p_condition text DEFAULT NULL::text) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_trigger_name text;
  v_condition text;
BEGIN
  -- Create simple trigger name
  v_trigger_name := 'audit_' || p_table || '_trigger';
  
  -- Set condition
  IF p_condition IS NULL THEN
    v_condition := '';
  ELSE
    v_condition := ' WHEN ' || p_condition;
  END IF;
  
  -- Drop trigger if exists
  EXECUTE 'DROP TRIGGER IF EXISTS ' || v_trigger_name || ' ON ' || p_table;
  
  -- Create trigger with condition
  EXECUTE 'CREATE TRIGGER ' || v_trigger_name || 
          ' AFTER INSERT OR UPDATE OR DELETE ON ' || p_table || 
          ' FOR EACH ROW' || v_condition || 
          ' EXECUTE FUNCTION log_table_change()';
          
  RAISE NOTICE 'Created selective trigger on high-volume table %', p_table;
EXCEPTION WHEN OTHERS THEN
  RAISE NOTICE 'Error creating selective trigger for %: %', p_table, SQLERRM;
END;
$$;


--
-- Name: create_token_version(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.create_token_version() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
    last_version INTEGER;
BEGIN
    -- Find the highest version number for this token
    SELECT COALESCE(MAX(version), 0) INTO last_version
    FROM token_versions
    WHERE token_id = NEW.id;

    -- Create a new version record
    INSERT INTO token_versions (
        token_id, 
        version, 
        data, 
        created_at, 
        created_by,
        blocks,
        decimals,
        metadata,
        name,
        standard,
        symbol
    ) VALUES (
        NEW.id,
        last_version + 1,
        to_jsonb(NEW),
        now(),
        current_setting('request.jwt.claims', true)::json->>'sub',
        NEW.blocks,
        NEW.decimals,
        NEW.metadata,
        NEW.name,
        NEW.standard,
        NEW.symbol
    );
    
    RETURN NEW;
END;
$$;


--
-- Name: create_transaction_events_table(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.create_transaction_events_table() RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- Table is created in the migration, this is just a placeholder
  -- for the API to call to ensure the table exists
  RETURN;
END;
$$;


--
-- Name: delete_project_cascade(uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.delete_project_cascade(project_id uuid) RETURNS void
    LANGUAGE plpgsql
    AS $_$
DECLARE
  cap_table_ids UUID[];
  subscription_ids UUID[];
BEGIN
  -- Start a transaction to ensure atomicity
  BEGIN
    -- Find cap table IDs related to the project
    SELECT array_agg(id) INTO cap_table_ids FROM cap_tables WHERE project_id = $1;
    
    -- If cap tables exist, delete their investors first
    IF cap_table_ids IS NOT NULL THEN
      DELETE FROM cap_table_investors WHERE cap_table_id = ANY(cap_table_ids);
      
      -- Then delete the cap tables themselves
      DELETE FROM cap_tables WHERE project_id = $1;
    END IF;
    
    -- Find subscription IDs for this project
    SELECT array_agg(id) INTO subscription_ids FROM subscriptions WHERE project_id = $1;
    
    -- If there are subscriptions, delete token allocations first
    IF subscription_ids IS NOT NULL THEN
      DELETE FROM token_allocations WHERE subscription_id = ANY(subscription_ids);
      
      -- Then delete the subscriptions
      DELETE FROM subscriptions WHERE project_id = $1;
    END IF;
    
    -- Delete from all product-related tables
    DELETE FROM structured_products WHERE project_id = $1;
    DELETE FROM equity_products WHERE project_id = $1;
    DELETE FROM commodities_products WHERE project_id = $1;
    DELETE FROM fund_products WHERE project_id = $1;
    DELETE FROM bond_products WHERE project_id = $1;
    DELETE FROM quantitative_investment_strategies_products WHERE project_id = $1;
    DELETE FROM private_equity_products WHERE project_id = $1;
    DELETE FROM private_debt_products WHERE project_id = $1;
    DELETE FROM real_estate_products WHERE project_id = $1;
    DELETE FROM energy_products WHERE project_id = $1;
    DELETE FROM infrastructure_products WHERE project_id = $1;
    DELETE FROM collectibles_products WHERE project_id = $1;
    DELETE FROM asset_backed_products WHERE project_id = $1;
    DELETE FROM digital_tokenized_fund_products WHERE project_id = $1;
    DELETE FROM stablecoin_products WHERE project_id = $1;
    
    -- Delete from other related tables
    DELETE FROM issuer_detail_documents WHERE project_id = $1;
    DELETE FROM token_deployment_history WHERE project_id = $1;
    DELETE FROM investor_groups WHERE project_id = $1;
    DELETE FROM project_credentials WHERE project_id = $1;
    DELETE FROM token_templates WHERE project_id = $1;
    DELETE FROM tokens WHERE project_id = $1;
    DELETE FROM compliance_checks WHERE project_id = $1;
    DELETE FROM distributions WHERE project_id = $1;
    
    -- Finally delete the project
    DELETE FROM projects WHERE id = $1;
    
    -- Explicitly commit the transaction
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      -- Rollback the transaction if any error occurs
      ROLLBACK;
      RAISE;
  END;
END;
$_$;


--
-- Name: FUNCTION delete_project_cascade(project_id uuid); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.delete_project_cascade(project_id uuid) IS 'Safely deletes a project and all related data in proper order to maintain referential integrity';


--
-- Name: delete_user_with_privileges(uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.delete_user_with_privileges(p_user_id uuid) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    SET search_path TO 'public'
    AS $$
BEGIN
    -- Delete from user_roles
    DELETE FROM user_roles WHERE user_id = p_user_id;
    
    -- Delete from any other related tables that might have foreign keys
    -- For example:
    -- DELETE FROM user_preferences WHERE user_id = p_user_id;
    -- DELETE FROM user_logs WHERE user_id = p_user_id;
    
    -- Finally delete from users table
    DELETE FROM users WHERE id = p_user_id;
    
    -- Return success
    RETURN true;
EXCEPTION
    WHEN OTHERS THEN
        RAISE WARNING 'Error deleting user %: %', p_user_id, SQLERRM;
        RETURN false;
END;
$$;


--
-- Name: disable_rls_for_deletion(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.disable_rls_for_deletion() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- Temporarily disable RLS
  ALTER TABLE users DISABLE ROW LEVEL SECURITY;
  ALTER TABLE user_roles DISABLE ROW LEVEL SECURITY;
  ALTER TABLE user_sessions DISABLE ROW LEVEL SECURITY;
  RETURN OLD;
END;
$$;


--
-- Name: enable_rls_after_deletion(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.enable_rls_after_deletion() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- Re-enable RLS
  ALTER TABLE users ENABLE ROW LEVEL SECURITY;
  ALTER TABLE user_roles ENABLE ROW LEVEL SECURITY;
  ALTER TABLE user_sessions ENABLE ROW LEVEL SECURITY;
  RETURN OLD;
END;
$$;


--
-- Name: exec(text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.exec(query text) RETURNS jsonb
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  result JSONB;
BEGIN
  -- Execute the provided query
  EXECUTE query;
  
  -- Return success message
  result := jsonb_build_object('success', true, 'message', 'Query executed successfully');
  
  RETURN result;
EXCEPTION WHEN OTHERS THEN
  -- Return error details on failure
  result := jsonb_build_object(
    'success', false,
    'message', 'Query execution failed',
    'error', SQLERRM,
    'detail', SQLSTATE
  );
  
  RETURN result;
END;
$$;


--
-- Name: FUNCTION exec(query text); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.exec(query text) IS 'Executes arbitrary SQL. Use with caution and proper permissions.';


--
-- Name: execute_safely(text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.execute_safely(p_statement text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  success BOOLEAN := TRUE;
BEGIN
  BEGIN
    EXECUTE p_statement;
    EXCEPTION WHEN OTHERS THEN
      RAISE WARNING 'Error executing statement: %', SQLERRM;
      RAISE WARNING 'Statement was: %', p_statement;
      success := FALSE;
  END;
  RETURN success;
END;
$$;


--
-- Name: extract_severity_from_metadata(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.extract_severity_from_metadata() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    -- If severity column is NULL but exists in metadata, extract it
    IF NEW.severity IS NULL AND 
       NEW.metadata IS NOT NULL AND 
       NEW.metadata->>'severity' IS NOT NULL THEN
        NEW.severity := NEW.metadata->>'severity';
    END IF;
    
    -- If category column is NULL but exists in metadata, extract it
    IF NEW.category IS NULL AND 
       NEW.metadata IS NOT NULL AND 
       NEW.metadata->>'category' IS NOT NULL THEN
        NEW.category := NEW.metadata->>'category';
    END IF;
    
    -- If ip_address column is NULL but exists in metadata, extract it
    IF NEW.ip_address IS NULL AND 
       NEW.metadata IS NOT NULL AND 
       NEW.metadata->>'ip_address' IS NOT NULL THEN
        NEW.ip_address := NEW.metadata->>'ip_address';
    END IF;
    
    -- If user_agent column is NULL but exists in metadata, extract it
    IF NEW.user_agent IS NULL AND 
       NEW.metadata IS NOT NULL AND 
       NEW.metadata->>'user_agent' IS NOT NULL THEN
        NEW.user_agent := NEW.metadata->>'user_agent';
    END IF;
    
    -- If duration column is NULL but exists in metadata, extract it
    IF NEW.duration IS NULL AND 
       NEW.metadata IS NOT NULL AND 
       NEW.metadata->>'duration' IS NOT NULL THEN
        BEGIN
            NEW.duration := (NEW.metadata->>'duration')::INTEGER;
        EXCEPTION WHEN OTHERS THEN
            -- If conversion fails, leave as NULL
            NEW.duration := NULL;
        END;
    END IF;
    
    RETURN NEW;
END;
$$;


--
-- Name: get_activity_counts_by_timeframe(timestamp without time zone, timestamp without time zone, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_activity_counts_by_timeframe(p_start_time timestamp without time zone, p_end_time timestamp without time zone, p_interval text DEFAULT 'day'::text) RETURNS TABLE(time_bucket timestamp without time zone, activity_count bigint)
    LANGUAGE plpgsql
    AS $$
    BEGIN
      RETURN QUERY
      SELECT 
        date_trunc(p_interval, timestamp) AS time_bucket,
        COUNT(*) AS activity_count
      FROM 
        audit_logs
      WHERE 
        timestamp BETWEEN p_start_time AND p_end_time
      GROUP BY 
        time_bucket
      ORDER BY 
        time_bucket;
    END;
    $$;


--
-- Name: get_activity_distribution_by_category(timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_activity_distribution_by_category(p_start_time timestamp without time zone, p_end_time timestamp without time zone) RETURNS TABLE(category text, activity_count bigint, percentage numeric)
    LANGUAGE plpgsql
    AS $$
    DECLARE
      total_count bigint;
    BEGIN
      -- Get total count for percentage calculation
      SELECT COUNT(*) INTO total_count 
      FROM audit_logs
      WHERE timestamp BETWEEN p_start_time AND p_end_time;
      
      RETURN QUERY
      SELECT 
        COALESCE(category, 'uncategorized') AS category,
        COUNT(*) AS activity_count,
        CASE 
          WHEN total_count > 0 THEN (COUNT(*) * 100.0 / total_count)::numeric 
          ELSE 0 
        END AS percentage
      FROM 
        audit_logs
      WHERE 
        timestamp BETWEEN p_start_time AND p_end_time
      GROUP BY 
        category
      ORDER BY 
        activity_count DESC;
    END;
    $$;


--
-- Name: get_activity_hierarchy(uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_activity_hierarchy(root_id uuid) RETURNS TABLE(id uuid, action character varying, activity_timestamp timestamp with time zone, status character varying, level integer)
    LANGUAGE sql
    AS $$
WITH RECURSIVE activity_tree AS (
    -- Base case: start with the root activity
    SELECT 
        id, 
        action, 
        timestamp as activity_timestamp, 
        status, 
        0 as level
    FROM 
        audit_logs
    WHERE 
        id = root_id
    
    UNION ALL
    
    -- Recursive case: add child activities
    SELECT 
        a.id, 
        a.action, 
        a.timestamp as activity_timestamp, 
        a.status, 
        at.level + 1
    FROM 
        audit_logs a
    JOIN 
        activity_tree at ON a.parent_id = at.id
)
SELECT * FROM activity_tree ORDER BY level, activity_timestamp;
$$;


--
-- Name: get_all_table_schemas(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_all_table_schemas() RETURNS TABLE(table_name text, column_name text, data_type text, is_nullable text, column_default text)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  RETURN QUERY
  SELECT 
    t.table_name::TEXT,
    c.column_name::TEXT,
    c.data_type::TEXT,
    c.is_nullable::TEXT,
    c.column_default::TEXT
  FROM information_schema.tables t
  JOIN information_schema.columns c 
    ON t.table_name = c.table_name
  WHERE t.table_schema = 'public'
    AND t.table_type = 'BASE TABLE'
  ORDER BY t.table_name, c.ordinal_position;
END;
$$;


--
-- Name: FUNCTION get_all_table_schemas(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.get_all_table_schemas() IS 'Returns schema information for all tables to enable universal database auditing';


--
-- Name: get_audit_repopulation_summary(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_audit_repopulation_summary() RETURNS TABLE(metric text, value text)
    LANGUAGE plpgsql
    AS $$
DECLARE
    total_tables integer;
    tables_with_timestamps integer;
    current_audit_entries bigint;
    estimated_new_entries bigint;
    total_records bigint;
BEGIN
    -- Get total tables
    SELECT COUNT(*) INTO total_tables
    FROM information_schema.tables
    WHERE table_schema = 'public'
    AND table_type = 'BASE TABLE'
    AND table_name != 'audit_logs';
    
    -- Get tables with timestamps
    SELECT COUNT(DISTINCT table_name) INTO tables_with_timestamps
    FROM information_schema.columns
    WHERE table_schema = 'public'
    AND column_name IN ('created_at', 'updated_at');
    
    -- Get current audit entries
    SELECT COUNT(*) INTO current_audit_entries
    FROM audit_logs;
    
    -- Estimate new entries and total records
    SELECT 
        SUM(estimated_audit_entries),
        SUM(row_count)
    INTO estimated_new_entries, total_records
    FROM get_table_row_counts() t
    JOIN LATERAL analyze_table_for_audit(t.table_name) a ON true;
    
    -- Return results
    metric := 'Total Tables'; value := total_tables::text; RETURN NEXT;
    metric := 'Tables with Timestamps'; value := tables_with_timestamps::text; RETURN NEXT;
    metric := 'Current Audit Entries'; value := current_audit_entries::text; RETURN NEXT;
    metric := 'Total Records'; value := total_records::text; RETURN NEXT;
    metric := 'Estimated New Audit Entries'; value := estimated_new_entries::text; RETURN NEXT;
    metric := 'Estimated Final Audit Entries'; value := (current_audit_entries + estimated_new_entries)::text; RETURN NEXT;
    
    RETURN;
END;
$$;


--
-- Name: get_audit_statistics(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_audit_statistics(p_hours_back integer DEFAULT 24) RETURNS jsonb
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  result JSONB;
  since_time TIMESTAMP;
BEGIN
  since_time := NOW() - (p_hours_back || ' hours')::INTERVAL;
  
  WITH stats AS (
    SELECT 
      COUNT(*) as total_events,
      COUNT(DISTINCT entity_type) as tables_affected,
      COUNT(DISTINCT user_id) as unique_users,
      COUNT(CASE WHEN action LIKE '%create%' OR action LIKE '%insert%' THEN 1 END) as creates,
      COUNT(CASE WHEN action LIKE '%read%' OR action LIKE '%select%' THEN 1 END) as reads,
      COUNT(CASE WHEN action LIKE '%update%' OR action LIKE '%modify%' THEN 1 END) as updates,
      COUNT(CASE WHEN action LIKE '%delete%' OR action LIKE '%remove%' THEN 1 END) as deletes,
      COUNT(CASE WHEN is_automated = true THEN 1 END) as automated_operations,
      COUNT(CASE WHEN severity = 'high' THEN 1 END) as high_severity,
      COUNT(CASE WHEN severity = 'medium' THEN 1 END) as medium_severity,
      COUNT(CASE WHEN severity = 'low' THEN 1 END) as low_severity
    FROM audit_logs 
    WHERE timestamp >= since_time
  ),
  top_tables AS (
    SELECT jsonb_agg(
      jsonb_build_object(
        'table', entity_type,
        'count', cnt
      ) ORDER BY cnt DESC
    ) as top_tables
    FROM (
      SELECT entity_type, COUNT(*) as cnt
      FROM audit_logs 
      WHERE timestamp >= since_time
        AND entity_type IS NOT NULL
      GROUP BY entity_type
      ORDER BY cnt DESC
      LIMIT 10
    ) t
  ),
  top_users AS (
    SELECT jsonb_agg(
      jsonb_build_object(
        'user', username,
        'count', cnt
      ) ORDER BY cnt DESC
    ) as top_users
    FROM (
      SELECT username, COUNT(*) as cnt
      FROM audit_logs 
      WHERE timestamp >= since_time
        AND username IS NOT NULL
        AND is_automated = false
      GROUP BY username
      ORDER BY cnt DESC
      LIMIT 10
    ) u
  )
  SELECT jsonb_build_object(
    'period_hours', p_hours_back,
    'total_events', COALESCE(s.total_events, 0),
    'tables_affected', COALESCE(s.tables_affected, 0),
    'unique_users', COALESCE(s.unique_users, 0),
    'operations', jsonb_build_object(
      'creates', COALESCE(s.creates, 0),
      'reads', COALESCE(s.reads, 0),
      'updates', COALESCE(s.updates, 0),
      'deletes', COALESCE(s.deletes, 0)
    ),
    'automation', jsonb_build_object(
      'automated_operations', COALESCE(s.automated_operations, 0),
      'manual_operations', COALESCE(s.total_events - s.automated_operations, 0)
    ),
    'severity_distribution', jsonb_build_object(
      'high', COALESCE(s.high_severity, 0),
      'medium', COALESCE(s.medium_severity, 0),
      'low', COALESCE(s.low_severity, 0)
    ),
    'top_tables', COALESCE(tt.top_tables, '[]'::jsonb),
    'top_users', COALESCE(tu.top_users, '[]'::jsonb),
    'generated_at', NOW()
  ) INTO result
  FROM stats s
  CROSS JOIN top_tables tt
  CROSS JOIN top_users tu;
  
  RETURN result;
END;
$$;


--
-- Name: FUNCTION get_audit_statistics(p_hours_back integer); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.get_audit_statistics(p_hours_back integer) IS 'Returns comprehensive audit statistics for the specified time period';


--
-- Name: get_enhanced_risk_assessment(uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_enhanced_risk_assessment(p_receivable_id uuid) RETURNS jsonb
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  receivable_data RECORD;
  latest_calculation RECORD;
  result JSONB;
BEGIN
  -- Get receivable and payer data
  SELECT 
    r.*,
    p.name as payer_name, 
    p.credit_rating, 
    p.financial_health_score, 
    p.payment_history, 
    p.esg_score
  INTO receivable_data
  FROM climate_receivables r
  LEFT JOIN climate_payers p ON r.payer_id = p.payer_id
  WHERE r.receivable_id = p_receivable_id;

  IF NOT FOUND THEN
    RETURN jsonb_build_object('error', 'Receivable not found');
  END IF;

  -- Get latest risk calculation
  SELECT *
  INTO latest_calculation
  FROM climate_risk_calculations
  WHERE receivable_id = p_receivable_id
  ORDER BY calculation_date DESC
  LIMIT 1;

  -- Build result
  result := jsonb_build_object(
    'receivable_id', receivable_data.receivable_id,
    'payer_id', receivable_data.payer_id,
    'payer_name', receivable_data.payer_name,
    'credit_profile', jsonb_build_object(
      'credit_rating', receivable_data.credit_rating,
      'financial_health_score', receivable_data.financial_health_score,
      'payment_history', receivable_data.payment_history,
      'esg_score', receivable_data.esg_score
    ),
    'latest_calculation', CASE 
      WHEN latest_calculation IS NOT NULL THEN
        jsonb_build_object(
          'risk_score', COALESCE(latest_calculation.credit_risk_score, latest_calculation.risk_score),
          'discount_rate', COALESCE(latest_calculation.discount_rate_calculated, latest_calculation.discount_rate),
          'confidence_level', COALESCE(latest_calculation.credit_risk_confidence, 85.0),
          'data_completeness', COALESCE(latest_calculation.data_completeness, 'basic'),
          'calculation_date', latest_calculation.calculation_date,
          'market_adjustments', COALESCE(latest_calculation.market_adjustments, '{}'),
          'user_data_sources', COALESCE(latest_calculation.user_data_sources, '[]'),
          'recommendations', COALESCE(latest_calculation.recommendations, '[]')
        )
      ELSE NULL
    END
  );

  RETURN result;
END;
$$;


--
-- Name: FUNCTION get_enhanced_risk_assessment(p_receivable_id uuid); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.get_enhanced_risk_assessment(p_receivable_id uuid) IS 'Get comprehensive risk assessment for a receivable - fixes missing function error';


--
-- Name: get_moonpay_webhook_stats(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_moonpay_webhook_stats() RETURNS TABLE(total_webhooks bigint, active_webhooks bigint, failed_webhooks bigint, avg_success_rate numeric)
    LANGUAGE plpgsql
    AS $$
BEGIN
    RETURN QUERY
    SELECT 
        COUNT(*) as total_webhooks,
        COUNT(*) FILTER (WHERE status = 'active') as active_webhooks,
        COUNT(*) FILTER (WHERE status = 'failed') as failed_webhooks,
        CASE 
            WHEN SUM(delivery_attempts_count) > 0 THEN
                ROUND(
                    (SUM(successful_deliveries_count)::NUMERIC / SUM(delivery_attempts_count)) * 100,
                    2
                )
            ELSE 0
        END as avg_success_rate
    FROM moonpay_webhook_config;
END;
$$;


--
-- Name: get_payer_risk_assessment(uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_payer_risk_assessment(p_payer_id uuid) RETURNS jsonb
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  payer_data RECORD;
  recent_calculations JSONB;
  result JSONB;
BEGIN
  -- Get payer data
  SELECT *
  INTO payer_data
  FROM climate_payers
  WHERE payer_id = p_payer_id;

  IF NOT FOUND THEN
    RETURN jsonb_build_object('error', 'Payer not found');
  END IF;

  -- Get recent risk calculations for this payer
  SELECT jsonb_agg(
    jsonb_build_object(
      'calculation_id', calculation_id,
      'receivable_id', receivable_id,
      'risk_score', COALESCE(credit_risk_score, risk_score),
      'discount_rate', COALESCE(discount_rate_calculated, discount_rate),
      'confidence_level', COALESCE(credit_risk_confidence, 85.0),
      'data_completeness', COALESCE(data_completeness, 'basic'),
      'calculation_date', COALESCE(calculation_date, created_at)
    )
  )
  INTO recent_calculations
  FROM (
    SELECT *
    FROM climate_risk_calculations
    WHERE payer_id = p_payer_id
    ORDER BY COALESCE(calculation_date, created_at) DESC
    LIMIT 5
  ) recent;

  -- Build result
  result := jsonb_build_object(
    'payer_id', payer_data.payer_id,
    'payer_name', payer_data.name,
    'credit_rating', payer_data.credit_rating,
    'financial_health_score', payer_data.financial_health_score,
    'payment_history', payer_data.payment_history,
    'esg_score', payer_data.esg_score,
    'recent_calculations', COALESCE(recent_calculations, '[]'::jsonb),
    'last_updated', payer_data.updated_at
  );

  RETURN result;
END;
$$;


--
-- Name: FUNCTION get_payer_risk_assessment(p_payer_id uuid); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.get_payer_risk_assessment(p_payer_id uuid) IS 'Get payer risk profile with calculation history';


--
-- Name: get_payer_risk_assessment_with_user_data(uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_payer_risk_assessment_with_user_data(p_payer_id uuid) RETURNS jsonb
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  payer_data RECORD;
  user_data_sources JSONB;
  recent_calculations JSONB;
  result JSONB;
BEGIN
  -- Get payer data
  SELECT *
  INTO payer_data
  FROM climate_payers
  WHERE payer_id = p_payer_id;

  IF NOT FOUND THEN
    RETURN jsonb_build_object('error', 'Payer not found');
  END IF;

  -- Get user data sources for this payer (if table exists)
  BEGIN
    SELECT jsonb_agg(
      jsonb_build_object(
        'source_id', uds.source_id,
        'source_name', uds.source_name,
        'source_type', uds.source_type,
        'processing_status', uds.processing_status,
        'data_quality_score', COALESCE(udc.data_quality_score, 0),
        'last_processed', uds.last_processed
      )
    )
    INTO user_data_sources
    FROM climate_user_data_sources uds
    LEFT JOIN climate_user_data_cache udc ON uds.source_id = udc.source_id AND udc.entity_id = p_payer_id::text
    WHERE uds.is_active = true 
      AND uds.processing_status = 'completed'
      AND uds.source_type IN ('credit_report', 'financial_statement');
  EXCEPTION WHEN others THEN
    user_data_sources := '[]'::jsonb;
  END;

  -- Get recent risk calculations for this payer
  SELECT jsonb_agg(
    jsonb_build_object(
      'calculation_id', calculation_id,
      'receivable_id', receivable_id,
      'risk_score', COALESCE(credit_risk_score, risk_score),
      'discount_rate', COALESCE(discount_rate_calculated, discount_rate),
      'confidence_level', COALESCE(credit_risk_confidence, 85.0),
      'data_completeness', COALESCE(data_completeness, 'basic'),
      'calculation_date', COALESCE(calculation_date, created_at)
    )
  )
  INTO recent_calculations
  FROM (
    SELECT *
    FROM climate_risk_calculations
    WHERE payer_id = p_payer_id
    ORDER BY COALESCE(calculation_date, created_at) DESC
    LIMIT 5
  ) recent;

  -- Build result
  result := jsonb_build_object(
    'payer_id', payer_data.payer_id,
    'payer_name', payer_data.name,
    'credit_rating', payer_data.credit_rating,
    'financial_health_score', payer_data.financial_health_score,
    'payment_history', payer_data.payment_history,
    'esg_score', payer_data.esg_score,
    'user_data_sources', COALESCE(user_data_sources, '[]'::jsonb),
    'recent_calculations', COALESCE(recent_calculations, '[]'::jsonb),
    'last_updated', payer_data.updated_at
  );

  RETURN result;
END;
$$;


--
-- Name: FUNCTION get_payer_risk_assessment_with_user_data(p_payer_id uuid); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.get_payer_risk_assessment_with_user_data(p_payer_id uuid) IS 'Get payer risk profile enhanced with user uploaded data';


--
-- Name: get_product_id_for_project(uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_product_id_for_project(p_project_id uuid) RETURNS uuid
    LANGUAGE plpgsql
    AS $_$
DECLARE
    v_project_type TEXT;
    v_table_name TEXT;
    v_product_id UUID;
    v_sql TEXT;
BEGIN
    -- Get the project type
    SELECT project_type INTO v_project_type 
    FROM projects 
    WHERE id = p_project_id;
    
    IF v_project_type IS NULL THEN
        RETURN NULL;
    END IF;
    
    -- Get the appropriate product table name
    v_table_name := get_product_table_name(v_project_type);
    
    IF v_table_name IS NULL THEN
        RETURN NULL;
    END IF;
    
    -- Build dynamic SQL to query the product table
    v_sql := format('SELECT id FROM %I WHERE project_id = $1', v_table_name);
    
    -- Execute the dynamic query
    EXECUTE v_sql USING p_project_id INTO v_product_id;
    
    RETURN v_product_id;
EXCEPTION
    WHEN OTHERS THEN
        RETURN NULL; -- Return NULL if table doesn't exist or query fails
END;
$_$;


--
-- Name: FUNCTION get_product_id_for_project(p_project_id uuid); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.get_product_id_for_project(p_project_id uuid) IS 'Retrieves the product_id for a given project by querying the appropriate product table.';


--
-- Name: get_product_table_name(text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_product_table_name(p_product_type text) RETURNS text
    LANGUAGE plpgsql IMMUTABLE
    AS $$
BEGIN
    RETURN CASE p_product_type
        WHEN 'fund' THEN 'fund_products'
        WHEN 'bond' THEN 'bond_products'
        WHEN 'equity' THEN 'equity_products'
        WHEN 'commodity' THEN 'commodities_products'
        WHEN 'structured' THEN 'structured_products'
        WHEN 'quantitative' THEN 'quantitative_investment_strategies_products'
        WHEN 'private_equity' THEN 'private_equity_products'
        WHEN 'private_debt' THEN 'private_debt_products'
        WHEN 'real_estate' THEN 'real_estate_products'
        WHEN 'energy' THEN 'energy_products'
        WHEN 'infrastructure' THEN 'infrastructure_products'
        WHEN 'collectible' THEN 'collectibles_products'
        WHEN 'asset_backed' THEN 'asset_backed_products'
        WHEN 'digital_fund' THEN 'digital_tokenized_fund_products'
        WHEN 'stablecoin' THEN 'stablecoin_products'
        ELSE NULL
    END;
END;
$$;


--
-- Name: get_project_target_raise(uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_project_target_raise(p_project_id uuid) RETURNS numeric
    LANGUAGE plpgsql
    AS $_$
DECLARE
    v_project_type TEXT;
    v_table_name TEXT;
    v_product_target_raise NUMERIC;
    v_project_target_raise NUMERIC;
    v_sql TEXT;
BEGIN
    -- Get project type and fallback target_raise
    SELECT project_type, target_raise 
    INTO v_project_type, v_project_target_raise
    FROM projects 
    WHERE id = p_project_id;
    
    IF v_project_type IS NULL THEN
        RETURN NULL;
    END IF;
    
    -- Get the appropriate product table name
    v_table_name := get_product_table_name(v_project_type);
    
    IF v_table_name IS NULL THEN
        -- No product table mapping, return project target_raise
        RETURN v_project_target_raise;
    END IF;
    
    -- Build dynamic SQL to get target_raise from product table
    v_sql := format('SELECT target_raise FROM %I WHERE project_id = $1', v_table_name);
    
    -- Execute the dynamic query
    BEGIN
        EXECUTE v_sql USING p_project_id INTO v_product_target_raise;
    EXCEPTION
        WHEN OTHERS THEN
            v_product_target_raise := NULL;
    END;
    
    -- Return product target_raise if available, otherwise project target_raise
    RETURN COALESCE(v_product_target_raise, v_project_target_raise);
END;
$_$;


--
-- Name: get_recent_activities(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_recent_activities(days_back integer DEFAULT 30) RETURNS TABLE(id uuid, activity_time timestamp with time zone, action text, source text, entity_type text, entity_id text, user_id uuid, username text, status text, details text)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  SELECT 
    a.id,
    a.timestamp,
    a.action,
    a.source,
    a.entity_type,
    a.entity_id,
    a.user_id,
    a.username,
    a.status,
    a.details
  FROM audit_logs a
  WHERE a.timestamp >= (CURRENT_TIMESTAMP - (days_back || ' days')::INTERVAL)
  ORDER BY a.timestamp DESC;
END;
$$;


--
-- Name: get_redemption_capacity(uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_redemption_capacity(p_redemption_rule_id uuid) RETURNS TABLE(target_raise_amount numeric, total_redeemed_amount numeric, available_capacity numeric, capacity_percentage numeric)
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_target_raise NUMERIC;
    v_total_redeemed NUMERIC;
    v_project_id UUID;
BEGIN
    -- Get target_raise_amount and project_id for this redemption rule
    SELECT rr.target_raise_amount, rr.project_id
    INTO v_target_raise, v_project_id
    FROM redemption_rules rr 
    WHERE rr.id = p_redemption_rule_id;
    
    -- Calculate total redeemed amount from redemption_requests using project_id relationship
    -- Fixed: Use 'token_amount' instead of 'amount' and project_id instead of redemption_rule_id
    BEGIN
        SELECT COALESCE(SUM(
            CASE 
                WHEN status IN ('completed', 'processed', 'settled', 'approved') THEN token_amount
                ELSE 0
            END
        ), 0)
        INTO v_total_redeemed
        FROM redemption_requests rreq
        WHERE rreq.project_id = v_project_id;
    EXCEPTION
        WHEN undefined_table THEN
            v_total_redeemed := 0;
        WHEN OTHERS THEN
            v_total_redeemed := 0;
    END;
    
    -- Return capacity calculation
    RETURN QUERY SELECT 
        v_target_raise as target_raise_amount,
        v_total_redeemed as total_redeemed_amount,
        GREATEST(0, COALESCE(v_target_raise, 0) - COALESCE(v_total_redeemed, 0)) as available_capacity,
        CASE 
            WHEN v_target_raise IS NULL OR v_target_raise = 0 THEN NULL
            ELSE ROUND((COALESCE(v_total_redeemed, 0) / v_target_raise) * 100, 2)
        END as capacity_percentage;
END;
$$;


--
-- Name: get_redemption_rule_product_details(uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_redemption_rule_product_details(p_redemption_rule_id uuid) RETURNS jsonb
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_result JSONB;
BEGIN
    SELECT product_details 
    INTO v_result
    FROM redemption_rules_with_product_details 
    WHERE id = p_redemption_rule_id;
    
    RETURN COALESCE(v_result, '{}'::jsonb);
END;
$$;


--
-- Name: get_redemption_rules_by_product_type(text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_redemption_rules_by_product_type(p_product_type text) RETURNS TABLE(redemption_rule_id uuid, project_name text, product_name text, product_status text, redemption_type text, is_redemption_open boolean, product_details jsonb)
    LANGUAGE plpgsql
    AS $$
BEGIN
    RETURN QUERY
    SELECT 
        rr.id as redemption_rule_id,
        rr.project_name,
        rr.product_name,
        rr.product_status,
        rr.redemption_type,
        rr.is_redemption_open,
        rr.product_details
    FROM redemption_rules_with_product_details rr
    WHERE rr.product_type = p_product_type
    ORDER BY rr.created_at DESC;
END;
$$;


--
-- Name: get_redemption_rules_near_capacity(numeric); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_redemption_rules_near_capacity(p_threshold_percentage numeric DEFAULT 80) RETURNS TABLE(redemption_rule_id uuid, project_name text, product_name text, target_raise_amount numeric, capacity_percentage numeric, available_capacity numeric, capacity_status text)
    LANGUAGE plpgsql
    AS $$
BEGIN
    RETURN QUERY
    SELECT 
        rr.id as redemption_rule_id,
        rr.project_name,
        rr.product_name,
        rr.target_raise_amount,
        rr.capacity_percentage,
        rr.available_capacity,
        rr.capacity_status
    FROM redemption_rules_with_product_details rr
    WHERE rr.target_raise_amount IS NOT NULL
        AND rr.capacity_percentage >= p_threshold_percentage
    ORDER BY rr.capacity_percentage DESC, rr.target_raise_amount DESC;
END;
$$;


--
-- Name: get_table_row_counts(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_table_row_counts() RETURNS TABLE(table_name text, row_count bigint)
    LANGUAGE plpgsql
    AS $$
DECLARE
    table_record RECORD;
    sql_query text;
    result_count bigint;
BEGIN
    -- Loop through all tables in public schema
    FOR table_record IN 
        SELECT t.table_name
        FROM information_schema.tables t
        WHERE t.table_schema = 'public'
        AND t.table_type = 'BASE TABLE'
        AND t.table_name != 'audit_logs'
        ORDER BY t.table_name
    LOOP
        -- Build dynamic query to count rows
        sql_query := format('SELECT COUNT(*) FROM %I', table_record.table_name);
        
        -- Execute the query and get count
        EXECUTE sql_query INTO result_count;
        
        -- Return the table name and count
        table_name := table_record.table_name;
        row_count := result_count;
        RETURN NEXT;
    END LOOP;
    
    RETURN;
END;
$$;


--
-- Name: get_token_whitelist_addresses(uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_token_whitelist_addresses(p_token_id uuid) RETURNS TABLE(address text, source text, is_active boolean, approved_date timestamp with time zone)
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- Return addresses from token_whitelists table
  RETURN QUERY
  SELECT 
    tw.wallet_address as address,
    'whitelist_table'::TEXT as source,
    tw.is_active,
    tw.approval_date as approved_date
  FROM token_whitelists tw
  WHERE tw.token_id = p_token_id AND tw.is_active = true;
  
  -- TODO: Add logic to extract addresses from JSONB whitelist_config fields
  -- This would require knowing the token standard and parsing the appropriate properties table
END;
$$;


--
-- Name: get_total_redemption_capacity(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_total_redemption_capacity() RETURNS TABLE(total_target_raise numeric, total_redeemed numeric, total_available_capacity numeric, overall_usage_percentage numeric, active_rules_count bigint, rules_with_limits_count bigint)
    LANGUAGE plpgsql
    AS $$
BEGIN
    RETURN QUERY
    SELECT 
        SUM(rr.target_raise_amount) as total_target_raise,
        SUM(rr.total_redeemed_amount) as total_redeemed,
        SUM(rr.available_capacity) as total_available_capacity,
        CASE 
            WHEN SUM(rr.target_raise_amount) > 0 THEN 
                ROUND((SUM(rr.total_redeemed_amount) / SUM(rr.target_raise_amount)) * 100, 2)
            ELSE NULL
        END as overall_usage_percentage,
        COUNT(*) as active_rules_count,
        COUNT(CASE WHEN rr.target_raise_amount IS NOT NULL THEN 1 END) as rules_with_limits_count
    FROM redemption_rules_with_product_details rr
    WHERE rr.is_redemption_open = true;
END;
$$;


--
-- Name: get_unique_group_memberships(text[]); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_unique_group_memberships(investor_ids text[]) RETURNS TABLE(group_id text, investor_count bigint)
    LANGUAGE sql SECURITY DEFINER
    AS $$
  WITH combined_memberships AS (
    -- Get memberships from the new table
    SELECT group_id, investor_id
    FROM investor_groups_investors
    WHERE investor_id::text = ANY(investor_ids)
    
    UNION
    
    -- Get memberships from the old table
    SELECT group_id, investor_id
    FROM investor_group_members
    WHERE investor_id::text = ANY(investor_ids)
  )
  
  -- Count distinct investors per group
  SELECT 
    group_id,
    COUNT(DISTINCT investor_id) AS investor_count
  FROM 
    combined_memberships
  GROUP BY 
    group_id;
$$;


--
-- Name: get_unique_member_count(text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_unique_member_count(group_id_param text) RETURNS integer
    LANGUAGE sql SECURITY DEFINER
    AS $$
  WITH combined_memberships AS (
    -- Get memberships from the new table
    SELECT investor_id
    FROM investor_groups_investors
    WHERE group_id::text = group_id_param
    
    UNION
    
    -- Get memberships from the old table
    SELECT investor_id
    FROM investor_group_members
    WHERE group_id::text = group_id_param
  )
  
  -- Count distinct investors
  SELECT 
    COUNT(DISTINCT investor_id)
  FROM 
    combined_memberships;
$$;


--
-- Name: get_user_profile(uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_user_profile(user_auth_id uuid) RETURNS TABLE(auth_id uuid, user_id uuid, profile_type public.profile_type, first_name text, last_name text, email text, name text, status text, created_at timestamp with time zone, updated_at timestamp with time zone)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  RETURN QUERY
  SELECT 
    p.id as auth_id,
    p.user_id,
    p.profile_type,
    p.first_name,
    p.last_name,
    au.email,
    u.name,
    u.status,
    p.created_at,
    p.updated_at
  FROM public.profiles p
  LEFT JOIN auth.users au ON au.id = p.id
  LEFT JOIN public.users u ON u.id = p.user_id
  WHERE p.id = user_auth_id;
END;
$$;


--
-- Name: get_users_by_role_for_approval(text[]); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_users_by_role_for_approval(role_names text[]) RETURNS TABLE(user_id uuid, user_name text, user_email text, role_name text, role_id uuid)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    RETURN QUERY
    SELECT 
        u.id as user_id,
        u.name as user_name,
        u.email as user_email,
        r.name as role_name,
        r.id as role_id
    FROM users u
    JOIN user_roles ur ON u.id = ur.user_id
    JOIN roles r ON ur.role_id = r.id
    WHERE r.name = ANY(role_names)
      AND u.status IS DISTINCT FROM 'inactive'
    ORDER BY u.name;
END;
$$;


--
-- Name: get_users_with_any_permission(text[]); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_users_with_any_permission(permission_names text[]) RETURNS TABLE(user_id uuid, name text, email text, role text)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  RETURN QUERY
  SELECT DISTINCT
    u.id as user_id,
    u.name,
    u.email,
    r.name as role
  FROM auth.users u
  JOIN user_roles ur ON u.id = ur.user_id
  JOIN roles r ON ur.role_id = r.id
  JOIN role_permissions rp ON r.id = rp.role_id
  WHERE 
    rp.permission_name = ANY(permission_names) AND
    u.deleted_at IS NULL
  ORDER BY u.name;
END;
$$;


--
-- Name: get_users_with_permission(text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_users_with_permission(permission_name text) RETURNS TABLE(user_id uuid, name text, email text, role text)
    LANGUAGE plpgsql
    AS $$
BEGIN
  RETURN QUERY
  -- Get users with Super Admin role (they have all permissions)
  SELECT 
    u.id,
    u.name,
    u.email,
    r.name AS role
  FROM
    public.users u
    JOIN public.user_roles ur ON u.id = ur.user_id
    JOIN public.roles r ON ur.role_id = r.id
  WHERE
    r.name = 'Super Admin'
  
  UNION
  
  -- Get users with the specific permission
  SELECT
    u.id,
    u.name,
    u.email,
    r.name AS role
  FROM
    public.users u
    JOIN public.user_roles ur ON u.id = ur.user_id
    JOIN public.roles r ON ur.role_id = r.id
    JOIN public.role_permissions rp ON r.id = rp.role_id
  WHERE
    rp.permission_name = permission_name;
EXCEPTION
  WHEN OTHERS THEN
    RAISE NOTICE 'Error in get_users_with_permission: %', SQLERRM;
    RETURN;
END;
$$;


--
-- Name: get_users_with_permission_simple(text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_users_with_permission_simple(p_permission_id text) RETURNS SETOF text
    LANGUAGE plpgsql
    AS $$
BEGIN
    RETURN QUERY
    SELECT user_id::text
    FROM users_with_permissions
    WHERE permission_id = p_permission_id;
EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE 'Error in get_users_with_permission_simple: %', SQLERRM;
        -- Return empty result set on error
        RETURN;
END;
$$;


--
-- Name: handle_auth_user_created(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.handle_auth_user_created() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  INSERT INTO public.auth_events (user_id, event_type, metadata)
  VALUES (NEW.id, 'user_created', json_build_object('email', NEW.email));
  RETURN NEW;
END;
$$;


--
-- Name: handle_new_auth_user(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.handle_new_auth_user() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    SET search_path TO 'public'
    AS $$
BEGIN
  -- Check if the public.users record exists before creating profile
  IF EXISTS (SELECT 1 FROM public.users WHERE id = NEW.id) THEN
    INSERT INTO public.profiles (id, user_id, created_at, updated_at)
    VALUES (
      gen_random_uuid(),
      NEW.id,
      NOW(),
      NOW()
    )
    ON CONFLICT (user_id) DO NOTHING;
  END IF;
  
  RETURN NEW;
END;
$$;


--
-- Name: handle_rule_rejection(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.handle_rule_rejection() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    -- If status is changed to rejected
    IF NEW.status = 'rejected' THEN
        -- Check what kind of entity this is
        IF EXISTS (SELECT 1 FROM rules WHERE rule_id = NEW.policy_rule_id) THEN
            -- It's a rule - update its status
            UPDATE rules 
            SET status = 'rejected' 
            WHERE rule_id = NEW.policy_rule_id;
        ELSIF EXISTS (SELECT 1 FROM policy_templates WHERE template_id = NEW.policy_rule_id) THEN
            -- It's a template - update its status
            UPDATE policy_templates 
            SET status = 'rejected' 
            WHERE template_id = NEW.policy_rule_id;
        END IF;
    END IF;
    
    RETURN NEW;
END;
$$;


--
-- Name: handle_token_allocation_deletion(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.handle_token_allocation_deletion() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- If allocation was already distributed, don't allow deletion
  IF OLD.distributed = true THEN
    RAISE EXCEPTION 'Cannot delete token allocation that has already been distributed';
  END IF;
  
  -- Update the subscriptions table to mark as not allocated
  UPDATE subscriptions 
  SET allocated = false,
      updated_at = NOW()
  WHERE id = OLD.subscription_id;
  
  RETURN OLD;
END;
$$;


--
-- Name: handle_token_distribution(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.handle_token_distribution() RETURNS trigger
    LANGUAGE plpgsql
    AS $_$
DECLARE
  tx_proposal transaction_proposals%ROWTYPE;
  investor_wallet text;
BEGIN
  -- Only process when distributed is changed from false to true
  IF (OLD.distributed = false AND NEW.distributed = true) THEN
    -- Find the transaction proposal using distribution_tx_hash if it exists
    IF NEW.distribution_tx_hash IS NOT NULL THEN
      SELECT * INTO tx_proposal 
      FROM transaction_proposals 
      WHERE id::text = NEW.distribution_tx_hash::text
         OR (NEW.distribution_tx_hash ~ '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$' AND id = NEW.distribution_tx_hash::uuid)
      LIMIT 1;
    END IF;
    
    -- Get investor wallet address
    SELECT wallet_address INTO investor_wallet 
    FROM investors 
    WHERE investor_id = NEW.investor_id;
    
    -- Insert record into distributions table
    INSERT INTO distributions (
      token_allocation_id,
      investor_id,
      subscription_id,
      project_id,
      token_type,
      token_amount,
      distribution_date,
      distribution_tx_hash,
      wallet_id,
      blockchain,
      token_address,
      token_symbol,
      to_address,
      notes,
      remaining_amount
    ) VALUES (
      NEW.id,
      NEW.investor_id,
      NEW.subscription_id,
      NEW.project_id,
      NEW.token_type,
      NEW.token_amount,
      COALESCE(NEW.distribution_date, now()),
      COALESCE(NEW.distribution_tx_hash, ''),
      tx_proposal.wallet_id,
      COALESCE(tx_proposal.blockchain, 'ethereum'),
      tx_proposal.token_address,
      COALESCE(NEW.symbol, tx_proposal.token_symbol),
      COALESCE(tx_proposal.to_address, investor_wallet, ''),
      NEW.notes,
      NEW.token_amount
    );
  END IF;
  
  RETURN NEW;
END;
$_$;


--
-- Name: handle_user_deletion(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.handle_user_deletion() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- Temporarily disable RLS
  ALTER TABLE users DISABLE ROW LEVEL SECURITY;
  ALTER TABLE user_roles DISABLE ROW LEVEL SECURITY;
  ALTER TABLE user_sessions DISABLE ROW LEVEL SECURITY;
  
  -- Delete from user_roles first
  DELETE FROM user_roles WHERE user_id = OLD.id;
  
  -- Delete from user_sessions
  DELETE FROM user_sessions WHERE user_id = OLD.id;
  
  -- Set auth_events user_id to null
  UPDATE auth_events SET user_id = NULL WHERE user_id = OLD.id;
  
  -- Re-enable RLS
  ALTER TABLE users ENABLE ROW LEVEL SECURITY;
  ALTER TABLE user_roles ENABLE ROW LEVEL SECURITY;
  ALTER TABLE user_sessions ENABLE ROW LEVEL SECURITY;
  
  RETURN OLD;
END;
$$;


--
-- Name: insert_energy_asset_safe(character varying, character varying, character varying, numeric, uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_energy_asset_safe(p_name character varying, p_type character varying, p_location character varying, p_capacity numeric, p_owner_id uuid DEFAULT NULL::uuid) RETURNS uuid
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_asset_id UUID;
    v_existing_count INTEGER;
BEGIN
    -- Check if asset already exists
    SELECT COUNT(*) INTO v_existing_count
    FROM energy_assets
    WHERE name = p_name 
      AND type = p_type 
      AND location = p_location 
      AND capacity = p_capacity;
    
    -- If asset exists, return existing asset_id
    IF v_existing_count > 0 THEN
        SELECT asset_id INTO v_asset_id
        FROM energy_assets
        WHERE name = p_name 
          AND type = p_type 
          AND location = p_location 
          AND capacity = p_capacity
        LIMIT 1;
        
        RETURN v_asset_id;
    END IF;
    
    -- Insert new asset
    INSERT INTO energy_assets (name, type, location, capacity, owner_id)
    VALUES (p_name, p_type, p_location, p_capacity, p_owner_id)
    RETURNING asset_id INTO v_asset_id;
    
    RETURN v_asset_id;
END;
$$;


--
-- Name: insert_policy_approver(uuid, text, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_policy_approver(p_policy_id uuid, p_user_id text, p_created_by text) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  INSERT INTO policy_rule_approvers (policy_rule_id, user_id, created_by, status)
  VALUES (p_policy_id, p_user_id::UUID, p_created_by::UUID, 'pending')
  ON CONFLICT (policy_rule_id, user_id) 
  DO UPDATE SET status = 'pending', timestamp = now();
END;
$$;


--
-- Name: insert_token_properties(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.insert_token_properties() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    CASE NEW.standard
        WHEN 'ERC-20' THEN
            INSERT INTO "public"."token_erc20_properties" ("token_id") 
            VALUES (NEW.id)
            ON CONFLICT ("token_id") DO NOTHING;
        WHEN 'ERC-721' THEN
            INSERT INTO "public"."token_erc721_properties" ("token_id") 
            VALUES (NEW.id)
            ON CONFLICT ("token_id") DO NOTHING;
        WHEN 'ERC-1155' THEN
            INSERT INTO "public"."token_erc1155_properties" ("token_id") 
            VALUES (NEW.id)
            ON CONFLICT ("token_id") DO NOTHING;
        WHEN 'ERC-1400' THEN
            INSERT INTO "public"."token_erc1400_properties" ("token_id") 
            VALUES (NEW.id)
            ON CONFLICT ("token_id") DO NOTHING;
        WHEN 'ERC-3525' THEN
            INSERT INTO "public"."token_erc3525_properties" ("token_id") 
            VALUES (NEW.id)
            ON CONFLICT ("token_id") DO NOTHING;
        WHEN 'ERC-4626' THEN
            INSERT INTO "public"."token_erc4626_properties" ("token_id") 
            VALUES (NEW.id)
            ON CONFLICT ("token_id") DO NOTHING;
        ELSE
            -- Do nothing for unknown standards
    END CASE;
    RETURN NEW;
END;
$$;


--
-- Name: is_address_whitelisted(uuid, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.is_address_whitelisted(p_token_id uuid, p_address text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
  is_whitelisted BOOLEAN := FALSE;
BEGIN
  -- Check in token_whitelists table
  SELECT EXISTS(
    SELECT 1 FROM token_whitelists 
    WHERE token_id = p_token_id 
    AND wallet_address = p_address 
    AND is_active = true
  ) INTO is_whitelisted;
  
  IF is_whitelisted THEN
    RETURN TRUE;
  END IF;
  
  -- TODO: Add logic to check JSONB whitelist_config fields
  -- This would require joining with the appropriate ERC properties table
  
  RETURN FALSE;
END;
$$;


--
-- Name: link_redemption_request_to_window(uuid, uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.link_redemption_request_to_window(request_id uuid, window_id uuid) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
BEGIN
    -- Update the redemption request with window link
    UPDATE redemption_requests 
    SET redemption_window_id = window_id,
        updated_at = NOW()
    WHERE id = request_id;
    
    -- Statistics will be automatically updated by trigger
    RETURN FOUND;
END;
$$;


--
-- Name: list_tables(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.list_tables() RETURNS TABLE(table_name text)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  RETURN QUERY
  SELECT tablename::text
  FROM pg_catalog.pg_tables
  WHERE schemaname = 'public'
  ORDER BY tablename;
END;
$$;


--
-- Name: log_approval_config_changes(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.log_approval_config_changes() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        INSERT INTO approval_config_history (
            approval_config_id,
            change_type,
            new_data,
            changed_by
        ) VALUES (
            NEW.id,
            'created',
            to_jsonb(NEW),
            NEW.created_by
        );
        RETURN NEW;
    ELSIF TG_OP = 'UPDATE' THEN
        INSERT INTO approval_config_history (
            approval_config_id,
            change_type,
            old_data,
            new_data,
            changed_by
        ) VALUES (
            NEW.id,
            'updated',
            to_jsonb(OLD),
            to_jsonb(NEW),
            NEW.last_modified_by
        );
        RETURN NEW;
    ELSIF TG_OP = 'DELETE' THEN
        INSERT INTO approval_config_history (
            approval_config_id,
            change_type,
            old_data,
            changed_by
        ) VALUES (
            OLD.id,
            'deleted',
            to_jsonb(OLD),
            NULL
        );
        RETURN OLD;
    END IF;
    RETURN NULL;
END;
$$;


--
-- Name: log_approver_assignment_changes(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.log_approver_assignment_changes() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        INSERT INTO approval_config_history (
            approval_config_id,
            change_type,
            new_data,
            changed_by
        ) VALUES (
            NEW.approval_config_id,
            'approver_added',
            jsonb_build_object(
                'approver_type', NEW.approver_type,
                'approver_user_id', NEW.approver_user_id,
                'approver_role_id', NEW.approver_role_id
            ),
            NEW.created_by
        );
        RETURN NEW;
    ELSIF TG_OP = 'DELETE' THEN
        INSERT INTO approval_config_history (
            approval_config_id,
            change_type,
            old_data,
            changed_by
        ) VALUES (
            OLD.approval_config_id,
            'approver_removed',
            jsonb_build_object(
                'approver_type', OLD.approver_type,
                'approver_user_id', OLD.approver_user_id,
                'approver_role_id', OLD.approver_role_id
            ),
            NULL
        );
        RETURN OLD;
    END IF;
    RETURN NULL;
END;
$$;


--
-- Name: log_audit(text, uuid, text, text, text, text, jsonb, jsonb, jsonb); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.log_audit(p_action text, p_user_id uuid, p_entity_type text, p_entity_id text DEFAULT NULL::text, p_details text DEFAULT NULL::text, p_status text DEFAULT 'Success'::text, p_metadata jsonb DEFAULT NULL::jsonb, p_old_data jsonb DEFAULT NULL::jsonb, p_new_data jsonb DEFAULT NULL::jsonb) RETURNS uuid
    LANGUAGE plpgsql
    AS $$
DECLARE
  v_audit_id UUID;
  v_user_email TEXT;
  v_username TEXT;
BEGIN
  -- Get user email and name
  SELECT email, name INTO v_user_email, v_username
  FROM users
  WHERE id = p_user_id;
  
  -- Insert audit log
  INSERT INTO audit_logs (
    action,
    user_id,
    user_email,
    username,
    entity_type,
    entity_id,
    details,
    status,
    metadata,
    old_data,
    new_data
  ) VALUES (
    p_action,
    p_user_id,
    v_user_email,
    v_username,
    p_entity_type,
    p_entity_id,
    p_details,
    p_status,
    p_metadata,
    p_old_data,
    p_new_data
  )
  RETURNING id INTO v_audit_id;
  
  RETURN v_audit_id;
END;
$$;


--
-- Name: log_auth_event(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.log_auth_event() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  INSERT INTO auth_events (user_id, event_type, ip_address, user_agent, metadata)
  VALUES (
    NEW.id,
    TG_ARGV[0],
    current_setting('request.headers')::json->>'x-forwarded-for',
    current_setting('request.headers')::json->>'user-agent',
    json_build_object('email', NEW.email, 'created_at', NEW.created_at)
  );
  RETURN NEW;
END;
$$;


--
-- Name: log_database_changes(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.log_database_changes() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  action_name TEXT;
  entity_name TEXT;
BEGIN
  -- Set the entity name based on the table
  entity_name := TG_TABLE_NAME;
  
  -- Set action based on operation type
  CASE 
    WHEN TG_OP = 'INSERT' THEN action_name := 'create_' || entity_name;
    WHEN TG_OP = 'UPDATE' THEN action_name := 'update_' || entity_name;
    WHEN TG_OP = 'DELETE' THEN action_name := 'delete_' || entity_name;
  END CASE;

  -- Insert audit log entry
  INSERT INTO audit_logs (
    action,
    action_type,
    entity_type,
    entity_id,
    details,
    old_data,
    new_data,
    status,
    is_automated,
    source,
    timestamp
  ) VALUES (
    action_name,
    'system',
    entity_name,
    CASE 
      WHEN TG_OP = 'DELETE' THEN OLD.id::text
      ELSE NEW.id::text
    END,
    'Automatic system record of data change',
    CASE WHEN TG_OP = 'DELETE' OR TG_OP = 'UPDATE' THEN to_jsonb(OLD) ELSE NULL END,
    CASE WHEN TG_OP = 'INSERT' OR TG_OP = 'UPDATE' THEN to_jsonb(NEW) ELSE NULL END,
    'success',
    TRUE,
    'database_trigger',
    NOW()
  );
  
  RETURN NULL;
END;
$$;


--
-- Name: log_database_operation(text, text, text, uuid, jsonb, jsonb, jsonb); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.log_database_operation(p_table_name text, p_operation text, p_record_id text, p_user_id uuid DEFAULT NULL::uuid, p_old_data jsonb DEFAULT NULL::jsonb, p_new_data jsonb DEFAULT NULL::jsonb, p_metadata jsonb DEFAULT NULL::jsonb) RETURNS uuid
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  audit_id UUID;
  user_name TEXT;
BEGIN
  -- Generate audit ID
  audit_id := gen_random_uuid();
  
  -- Get username if user_id provided
  IF p_user_id IS NOT NULL THEN
    SELECT COALESCE(name, email, 'Unknown User') INTO user_name
    FROM auth.users 
    WHERE id = p_user_id;
  ELSE
    user_name := 'System';
  END IF;
  
  -- Insert audit log
  INSERT INTO audit_logs (
    id,
    timestamp,
    action,
    entity_type,
    entity_id,
    user_id,
    username,
    details,
    category,
    severity,
    status,
    metadata,
    old_data,
    new_data,
    is_automated,
    created_at
  ) VALUES (
    audit_id,
    NOW(),
    LOWER(p_operation),
    p_table_name,
    p_record_id,
    p_user_id,
    user_name,
    CASE 
      WHEN p_operation = 'CREATE' THEN 'Created new record in ' || p_table_name
      WHEN p_operation = 'UPDATE' THEN 'Updated record ' || p_record_id || ' in ' || p_table_name
      WHEN p_operation = 'DELETE' THEN 'Deleted record ' || p_record_id || ' from ' || p_table_name
      WHEN p_operation = 'READ' THEN 'Accessed record ' || p_record_id || ' in ' || p_table_name
      ELSE 'Performed ' || p_operation || ' on ' || p_table_name
    END,
    'system',
    CASE 
      WHEN p_operation = 'DELETE' THEN 'high'
      WHEN p_operation = 'UPDATE' THEN 'medium'
      ELSE 'low'
    END,
    'success',
    COALESCE(p_metadata, '{}'::jsonb) || jsonb_build_object(
      'table_name', p_table_name,
      'operation_type', p_operation,
      'automated', (p_user_id IS NULL),
      'tracked_by', 'UniversalDatabaseAuditService'
    ),
    p_old_data,
    p_new_data,
    (p_user_id IS NULL),
    NOW()
  );
  
  RETURN audit_id;
END;
$$;


--
-- Name: FUNCTION log_database_operation(p_table_name text, p_operation text, p_record_id text, p_user_id uuid, p_old_data jsonb, p_new_data jsonb, p_metadata jsonb); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.log_database_operation(p_table_name text, p_operation text, p_record_id text, p_user_id uuid, p_old_data jsonb, p_new_data jsonb, p_metadata jsonb) IS 'Logs database operations for audit tracking without triggers';


--
-- Name: log_table_change(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.log_table_change() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
    DECLARE
      old_data jsonb;
      new_data jsonb;
      action_name text;
      entity_name text;
      change_data jsonb;
    BEGIN
      -- Set the action name based on operation type
      IF (TG_OP = 'INSERT') THEN
        action_name := 'create';
        old_data := null;
        new_data := to_jsonb(NEW);
        change_data := new_data;
      ELSIF (TG_OP = 'UPDATE') THEN
        action_name := 'update';
        old_data := to_jsonb(OLD);
        new_data := to_jsonb(NEW);
        -- Calculate changes by comparing old and new data
        SELECT jsonb_object_agg(key, value) INTO change_data
        FROM jsonb_each(new_data) 
        WHERE NOT new_data->key = old_data->key OR old_data->key IS NULL;
      ELSIF (TG_OP = 'DELETE') THEN
        action_name := 'delete';
        old_data := to_jsonb(OLD);
        new_data := null;
        change_data := old_data;
      END IF;
      
      -- Extract the entity name from trigger name 
      entity_name := TG_TABLE_NAME;
      
      -- Insert into audit_logs table
      INSERT INTO audit_logs (
        action,
        action_type,
        entity_type,
        entity_id,
        old_data,
        new_data,
        changes,
        details,
        status,
        source,
        timestamp
      ) VALUES (
        entity_name || '_' || action_name,
        'database',
        entity_name,
        CASE 
          WHEN TG_OP = 'DELETE' THEN (old_data->>'id')::text
          ELSE (new_data->>'id')::text
        END,
        old_data,
        new_data,
        change_data,
        'Automated audit log for ' || entity_name || ' ' || action_name,
        'success',
        'database_trigger',
        NOW()
      );
      
      -- Return the appropriate row based on operation
      IF (TG_OP = 'DELETE') THEN
        RETURN OLD;
      ELSE
        RETURN NEW;
      END IF;
    END;
    $$;


--
-- Name: log_user_action(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.log_user_action() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  entity_id TEXT;
  action_type TEXT;
  table_exists BOOLEAN;
BEGIN
  -- Check if audit_logs table exists
  SELECT EXISTS (
    SELECT FROM information_schema.tables 
    WHERE table_schema = 'public' 
    AND table_name = 'audit_logs'
  ) INTO table_exists;
  
  -- If audit_logs table doesn't exist, just return and do nothing
  IF NOT table_exists THEN
    RETURN COALESCE(new, old);
  END IF;

  -- Determine the action type
  IF TG_OP = 'INSERT' THEN
    action_type := 'create';
  ELSIF TG_OP = 'UPDATE' THEN
    action_type := 'update';
  ELSIF TG_OP = 'DELETE' THEN
    action_type := 'delete';
  END IF;
  
  -- Get the entity ID based on the table's primary key column
  IF TG_TABLE_NAME = 'policy_templates' THEN
    IF TG_OP = 'DELETE' THEN
      entity_id := old.template_id::text;
    ELSE
      entity_id := new.template_id::text;
    END IF;
  ELSIF TG_TABLE_NAME = 'rules' THEN
    IF TG_OP = 'DELETE' THEN
      entity_id := old.rule_id::text;
    ELSE
      entity_id := new.rule_id::text;
    END IF;
  ELSE
    -- Default fallback for other tables with 'id' column
    IF TG_OP = 'DELETE' THEN
      BEGIN
        entity_id := old.id::text;
      EXCEPTION WHEN undefined_column THEN
        entity_id := 'unknown';
      END;
    ELSE
      BEGIN
        entity_id := new.id::text;
      EXCEPTION WHEN undefined_column THEN
        entity_id := 'unknown';
      END;
    END IF;
  END IF;
  
  -- Use TRY-CATCH to prevent errors during insert
  BEGIN
    -- Insert action into audit_logs table
    INSERT INTO audit_logs (
      action_type,
      entity_type,
      entity_id,
      user_id,
      changes,
      occurred_at
    ) VALUES (
      action_type,
      TG_TABLE_NAME,
      entity_id,
      COALESCE(auth.uid()::text, 'system'),
      CASE
        WHEN TG_OP = 'INSERT' THEN to_jsonb(new)
        WHEN TG_OP = 'UPDATE' THEN jsonb_build_object('old', to_jsonb(old), 'new', to_jsonb(new))
        WHEN TG_OP = 'DELETE' THEN to_jsonb(old)
        ELSE NULL
      END,
      NOW()
    );
  EXCEPTION
    WHEN OTHERS THEN
      -- Log error but continue (don't let trigger failure block main operation)
      RAISE NOTICE 'Failed to log action: %', SQLERRM;
  END;
  
  RETURN COALESCE(new, old);
END;
$$;


--
-- Name: FUNCTION log_user_action(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.log_user_action() IS 'This function handles audit logging for various tables, with special handling for token_templates';


--
-- Name: migrate_token_json_to_tables(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.migrate_token_json_to_tables() RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
    token_record RECORD;
BEGIN
    -- Process ERC20 tokens
    FOR token_record IN SELECT * FROM "public"."tokens" WHERE standard = 'ERC-20' LOOP
        INSERT INTO "public"."token_erc20_properties" (
            token_id, 
            initial_supply, 
            cap, 
            is_mintable, 
            is_burnable, 
            is_pausable,
            token_type,
            access_control,
            allow_management,
            permit,
            snapshot,
            fee_on_transfer,
            rebasing,
            governance_features
        ) VALUES (
            token_record.id,
            token_record.total_supply,
            (token_record.blocks->>'cap')::text,
            (token_record.blocks->>'is_mintable')::boolean,
            (token_record.blocks->>'is_burnable')::boolean,
            (token_record.blocks->>'is_pausable')::boolean,
            (token_record.metadata->>'tokenType')::text,
            (token_record.blocks->>'access_control')::text,
            (token_record.blocks->>'allowance_management')::boolean,
            (token_record.blocks->>'permit')::boolean,
            (token_record.blocks->>'snapshot')::boolean,
            token_record.blocks->'fee_on_transfer',
            token_record.blocks->'rebasing',
            token_record.blocks->'governance_features'
        ) ON CONFLICT (token_id) DO UPDATE SET
            initial_supply = EXCLUDED.initial_supply,
            cap = EXCLUDED.cap,
            is_mintable = EXCLUDED.is_mintable,
            is_burnable = EXCLUDED.is_burnable,
            is_pausable = EXCLUDED.is_pausable,
            token_type = EXCLUDED.token_type,
            access_control = EXCLUDED.access_control,
            allow_management = EXCLUDED.allow_management,
            permit = EXCLUDED.permit,
            snapshot = EXCLUDED.snapshot,
            fee_on_transfer = EXCLUDED.fee_on_transfer,
            rebasing = EXCLUDED.rebasing,
            governance_features = EXCLUDED.governance_features;
    END LOOP;
    
    -- Process ERC721 tokens
    FOR token_record IN SELECT * FROM "public"."tokens" WHERE standard = 'ERC-721' LOOP
        INSERT INTO "public"."token_erc721_properties" (
            token_id,
            base_uri,
            metadata_storage,
            max_supply,
            has_royalty,
            royalty_percentage,
            royalty_receiver,
            is_burnable,
            is_pausable,
            asset_type,
            minting_method,
            auto_increment_ids,
            enumerable,
            uri_storage,
            access_control,
            updatable_uris,
            sales_config,
            whitelist_config,
            permission_config
        ) VALUES (
            token_record.id,
            (token_record.blocks->>'base_uri')::text,
            (token_record.blocks->>'metadata_storage')::text,
            (token_record.blocks->>'max_supply')::text,
            (token_record.blocks->>'has_royalty')::boolean,
            (token_record.blocks->>'royalty_percentage')::text,
            (token_record.blocks->>'royalty_receiver')::text,
            (token_record.blocks->>'is_burnable')::boolean,
            (token_record.blocks->>'is_pausable')::boolean,
            (token_record.blocks->>'asset_type')::text,
            (token_record.blocks->>'minting_method')::text,
            (token_record.blocks->>'auto_increment_ids')::boolean,
            (token_record.blocks->>'enumerable')::boolean,
            (token_record.blocks->>'uri_storage')::text,
            (token_record.blocks->>'access_control')::text,
            (token_record.blocks->>'updatable_uris')::boolean,
            token_record.blocks->'sales_config',
            token_record.blocks->'whitelist_config',
            token_record.blocks->'permission_config'
        ) ON CONFLICT (token_id) DO UPDATE SET
            base_uri = EXCLUDED.base_uri,
            metadata_storage = EXCLUDED.metadata_storage,
            max_supply = EXCLUDED.max_supply,
            has_royalty = EXCLUDED.has_royalty,
            royalty_percentage = EXCLUDED.royalty_percentage,
            royalty_receiver = EXCLUDED.royalty_receiver,
            is_burnable = EXCLUDED.is_burnable,
            is_pausable = EXCLUDED.is_pausable,
            asset_type = EXCLUDED.asset_type,
            minting_method = EXCLUDED.minting_method,
            auto_increment_ids = EXCLUDED.auto_increment_ids,
            enumerable = EXCLUDED.enumerable,
            uri_storage = EXCLUDED.uri_storage,
            access_control = EXCLUDED.access_control,
            updatable_uris = EXCLUDED.updatable_uris,
            sales_config = EXCLUDED.sales_config,
            whitelist_config = EXCLUDED.whitelist_config,
            permission_config = EXCLUDED.permission_config;

        -- Migrate token attributes array
        IF token_record.blocks->'token_attributes' IS NOT NULL AND jsonb_array_length(token_record.blocks->'token_attributes') > 0 THEN
            FOR i IN 0..jsonb_array_length(token_record.blocks->'token_attributes')-1 LOOP
                INSERT INTO "public"."token_erc721_attributes" (
                    token_id,
                    trait_type,
                    values
                ) VALUES (
                    token_record.id,
                    (token_record.blocks->'token_attributes'->i->>'trait_type')::text,
                    (SELECT array_agg(v.value) 
                     FROM jsonb_array_elements_text(token_record.blocks->'token_attributes'->i->'values') as v(value))
                );
            END LOOP;
        END IF;
    END LOOP;

    -- Process other token standards similarly...
    -- (Add more token migration logic here - would need similar blocks for each token standard)
END;
$$;


--
-- Name: prevent_duplicate_lifecycle_events(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.prevent_duplicate_lifecycle_events() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- Check if a similar event was created in the last 5 seconds
  IF EXISTS (
    SELECT 1 FROM product_lifecycle_events
    WHERE product_id = NEW.product_id
      AND event_type = NEW.event_type
      AND created_at > (NEW.created_at - INTERVAL '5 seconds')
      AND created_at < NEW.created_at
      AND id != NEW.id
  ) THEN
    RAISE EXCEPTION 'Duplicate event detected: A similar event was created within the last 5 seconds';
  END IF;
  
  RETURN NEW;
END;
$$;


--
-- Name: projects_audit_function(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.projects_audit_function() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    IF (TG_OP = 'DELETE') THEN
        INSERT INTO audit_logs (action, entity_type, entity_id, old_data, timestamp)
        VALUES ('DELETE', 'project', OLD.id, row_to_json(OLD), NOW());
        RETURN OLD;
    ELSIF (TG_OP = 'UPDATE') THEN
        INSERT INTO audit_logs (action, entity_type, entity_id, old_data, new_data, timestamp)
        VALUES ('UPDATE', 'project', NEW.id, row_to_json(OLD), row_to_json(NEW), NOW());
        RETURN NEW;
    ELSIF (TG_OP = 'INSERT') THEN
        INSERT INTO audit_logs (action, entity_type, entity_id, new_data, timestamp)
        VALUES ('INSERT', 'project', NEW.id, row_to_json(NEW), NOW());
        RETURN NEW;
    END IF;
    RETURN NULL;
END;
$$;


--
-- Name: projects_audit_trigger(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.projects_audit_trigger() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    -- Log project changes for compliance tracking
    INSERT INTO audit_logs (table_name, record_id, action, old_values, new_values, changed_by, changed_at)
    VALUES (
        'projects',
        COALESCE(NEW.id, OLD.id),
        TG_OP,
        CASE WHEN TG_OP = 'DELETE' THEN row_to_json(OLD) ELSE NULL END,
        CASE WHEN TG_OP != 'DELETE' THEN row_to_json(NEW) ELSE NULL END,
        current_user,
        now()
    );
    
    RETURN COALESCE(NEW, OLD);
END;
$$;


--
-- Name: purge_duplicate_lifecycle_events(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.purge_duplicate_lifecycle_events() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  deleted_count INTEGER := 0;
  duplicate_record RECORD;
BEGIN
  -- Find duplicates
  FOR duplicate_record IN (
    SELECT 
      id,
      product_id,
      event_type,
      created_at,
      ROW_NUMBER() OVER (
        PARTITION BY product_id, event_type, 
        FLOOR(EXTRACT(EPOCH FROM created_at) / 5)  -- 5-second window
        ORDER BY created_at
      ) AS row_num
    FROM product_lifecycle_events
  )
  LOOP
    -- Delete all rows except the first one in each group
    IF duplicate_record.row_num > 1 THEN
      DELETE FROM product_lifecycle_events WHERE id = duplicate_record.id;
      deleted_count := deleted_count + 1;
    END IF;
  END LOOP;
  
  RETURN deleted_count;
END;
$$;


--
-- Name: reconcile_redemption_statistics(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.reconcile_redemption_statistics() RETURNS TABLE(window_id uuid, window_name text, before_requests integer, after_requests integer, before_value numeric, after_value numeric)
    LANGUAGE plpgsql
    AS $$
DECLARE
    window_record RECORD;
BEGIN
    FOR window_record IN 
        SELECT rw.id, rw.name, rw.current_requests, rw.total_request_value
        FROM redemption_windows rw
        WHERE rw.is_active = true
    LOOP
        -- Store before values
        window_id := window_record.id;
        window_name := window_record.name;
        before_requests := window_record.current_requests;
        before_value := window_record.total_request_value;
        
        -- Update statistics
        PERFORM update_redemption_window_statistics(window_record.id);
        
        -- Get after values
        SELECT rw.current_requests, rw.total_request_value
        INTO after_requests, after_value
        FROM redemption_windows rw
        WHERE rw.id = window_record.id;
        
        RETURN NEXT;
    END LOOP;
END;
$$;


--
-- Name: refresh_activity_metrics(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.refresh_activity_metrics() RETURNS text
    LANGUAGE plpgsql
    AS $$
BEGIN
  REFRESH MATERIALIZED VIEW activity_metrics_daily;
  REFRESH MATERIALIZED VIEW activity_metrics_hourly;
  REFRESH MATERIALIZED VIEW user_activity_summary;
  
  RETURN 'SUCCESS: All views refreshed at ' || CURRENT_TIMESTAMP;
END;
$$;


--
-- Name: refresh_all_redemption_window_statistics(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.refresh_all_redemption_window_statistics() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
    window_record RECORD;
    updated_count INTEGER := 0;
BEGIN
    -- Update statistics for all redemption windows
    FOR window_record IN 
        SELECT DISTINCT id FROM redemption_windows 
        WHERE is_active = true
    LOOP
        PERFORM update_redemption_window_statistics(window_record.id);
        updated_count := updated_count + 1;
    END LOOP;

    RAISE INFO 'Refreshed statistics for % redemption windows', updated_count;
    RETURN updated_count;
END;
$$;


--
-- Name: remove_investors_from_group(text, text[]); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.remove_investors_from_group(p_group_id text, p_investor_ids text[]) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  sync_timestamp timestamp with time zone := NOW();
BEGIN
  -- Validate input
  IF p_group_id IS NULL THEN
    RAISE EXCEPTION 'Group ID cannot be NULL';
  END IF;

  IF p_investor_ids IS NULL OR array_length(p_investor_ids, 1) IS NULL THEN
    RAISE EXCEPTION 'Investor IDs array cannot be NULL or empty';
  END IF;

  -- Remove from the investor_group_members table (old)
  DELETE FROM investor_group_members
  WHERE group_id::text = p_group_id
  AND investor_id::text = ANY(p_investor_ids);

  -- Try to remove from investor_groups_investors table (new)
  -- This might fail due to RLS but we'll continue anyway
  BEGIN
    DELETE FROM investor_groups_investors
    WHERE group_id::text = p_group_id
    AND investor_id::text = ANY(p_investor_ids);
  EXCEPTION WHEN OTHERS THEN
    -- Log the error but continue - we at least removed from the old table
    RAISE NOTICE 'Error removing from investor_groups_investors: %', SQLERRM;
  END;

  -- Update the group member count
  UPDATE investor_groups
  SET 
    member_count = (SELECT get_unique_member_count(p_group_id)),
    updated_at = sync_timestamp
  WHERE id::text = p_group_id;
END;
$$;


--
-- Name: reserve_redemption_amounts(uuid[], numeric); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.reserve_redemption_amounts(p_distribution_ids uuid[], p_total_amount numeric) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_distribution RECORD;
    v_remaining_to_reserve NUMERIC := p_total_amount;
    v_amount_to_reserve NUMERIC;
BEGIN
    -- Handle null or empty array
    IF p_distribution_ids IS NULL OR array_length(p_distribution_ids, 1) IS NULL THEN
        RETURN false;
    END IF;
    
    -- Loop through distributions and reserve amounts
    FOR v_distribution IN 
        SELECT * FROM distributions 
        WHERE id = ANY(p_distribution_ids)
        ORDER BY distribution_date ASC
    LOOP
        EXIT WHEN v_remaining_to_reserve <= 0;
        
        v_amount_to_reserve := LEAST(
            v_remaining_to_reserve, 
            v_distribution.remaining_amount - COALESCE(v_distribution.redemption_locked_amount, 0)
        );
        
        IF v_amount_to_reserve > 0 THEN
            UPDATE distributions 
            SET 
                redemption_locked_amount = COALESCE(redemption_locked_amount, 0) + v_amount_to_reserve,
                updated_at = NOW()
            WHERE id = v_distribution.id;
            
            v_remaining_to_reserve := v_remaining_to_reserve - v_amount_to_reserve;
        END IF;
    END LOOP;
    
    RETURN v_remaining_to_reserve = 0;
END;
$$;


--
-- Name: rollback_transaction(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.rollback_transaction() RETURNS boolean
    LANGUAGE plpgsql
    AS $$
BEGIN
    -- Raise exception to trigger rollback in the client transaction
    RAISE EXCEPTION 'ROLLBACK_REQUESTED' USING ERRCODE = 'P0001';
    RETURN false; -- Never reached
END;
$$;


--
-- Name: safe_cast_to_uuid(text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.safe_cast_to_uuid(input text) RETURNS uuid
    LANGUAGE plpgsql
    AS $$
DECLARE
  result uuid;
BEGIN
  -- Check if it's already a valid UUID
  BEGIN
    result := input::uuid;
    RETURN result;
  EXCEPTION WHEN others THEN
    -- If it's the special admin value, return a specific UUID
    IF input = 'admin-bypass' THEN
      RETURN '00000000-0000-0000-0000-000000000000'::uuid;
    END IF;
    
    -- Otherwise, generate a new UUID
    RETURN gen_random_uuid();
  END;
END;
$$;


--
-- Name: safe_uuid_cast(text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.safe_uuid_cast(text_id text) RETURNS uuid
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    result UUID;
BEGIN
    -- Try to cast to UUID directly
    BEGIN
        result := text_id::UUID;
        RETURN result;
    EXCEPTION WHEN others THEN
        -- If it fails, generate a deterministic UUID v5
        -- For admin bypass use a special UUID
        IF text_id = 'admin-bypass' THEN
            RETURN '00000000-0000-0000-0000-000000000000'::UUID;
        ELSE
            -- Generate a new UUID (in production you might want to use a deterministic algorithm)
            RETURN gen_random_uuid();
        END IF;
    END;
END;
$$;


--
-- Name: save_consensus_config(text, integer, text[]); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.save_consensus_config(p_consensus_type text, p_required_approvals integer, p_eligible_roles text[]) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    SET search_path TO 'public'
    AS $$
DECLARE
  v_config_id UUID;
  v_existing_id UUID;
BEGIN
  -- Check if we already have a config with this consensus type
  SELECT id INTO v_existing_id 
  FROM approval_configs 
  WHERE consensus_type = p_consensus_type;
  
  IF v_existing_id IS NOT NULL THEN
    -- Update existing record
    UPDATE approval_configs
    SET 
      required_approvals = p_required_approvals,
      eligible_roles = p_eligible_roles,
      updated_at = now()
    WHERE id = v_existing_id;
  ELSE
    -- Create a new standalone consensus config entry
    INSERT INTO consensus_settings (
      consensus_type,
      required_approvals,
      eligible_roles
    ) VALUES (
      p_consensus_type,
      p_required_approvals,
      p_eligible_roles
    );
  END IF;

  RETURN TRUE;
EXCEPTION
  WHEN OTHERS THEN
    RAISE NOTICE 'Error in save_consensus_config: %', SQLERRM;
    RETURN FALSE;
END;
$$;


--
-- Name: save_enhanced_risk_calculation(uuid, integer, numeric, numeric, jsonb, jsonb, character varying, text, jsonb, jsonb, jsonb); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.save_enhanced_risk_calculation(p_receivable_id uuid, p_risk_score integer, p_discount_rate numeric, p_confidence_level numeric DEFAULT 85.0, p_market_adjustments jsonb DEFAULT '{}'::jsonb, p_user_data_sources jsonb DEFAULT '[]'::jsonb, p_data_completeness character varying DEFAULT 'basic'::character varying, p_methodology text DEFAULT ''::text, p_factors_considered jsonb DEFAULT '[]'::jsonb, p_policy_impacts jsonb DEFAULT '[]'::jsonb, p_recommendations jsonb DEFAULT '[]'::jsonb) RETURNS uuid
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  calculation_id UUID;
  payer_id_val UUID;
BEGIN
  -- Get payer_id from receivable
  SELECT payer_id INTO payer_id_val
  FROM climate_receivables
  WHERE receivable_id = p_receivable_id;

  -- Insert risk calculation
  INSERT INTO climate_risk_calculations (
    receivable_id,
    payer_id,
    credit_risk_score,
    credit_risk_confidence,
    discount_rate_calculated,
    market_adjustments,
    user_data_sources,
    data_completeness,
    methodology_used,
    factors_considered,
    policy_impact_assessment,
    recommendations,
    calculation_date
  ) VALUES (
    p_receivable_id,
    payer_id_val,
    p_risk_score,
    p_confidence_level,
    p_discount_rate,
    p_market_adjustments,
    p_user_data_sources,
    p_data_completeness,
    p_methodology,
    p_factors_considered,
    p_policy_impacts,
    p_recommendations,
    NOW()
  ) RETURNING calculation_id INTO calculation_id;

  -- Update receivable with latest risk data
  UPDATE climate_receivables
  SET 
    risk_score = p_risk_score,
    discount_rate = p_discount_rate,
    updated_at = NOW()
  WHERE receivable_id = p_receivable_id;

  RETURN calculation_id;
END;
$$;


--
-- Name: FUNCTION save_enhanced_risk_calculation(p_receivable_id uuid, p_risk_score integer, p_discount_rate numeric, p_confidence_level numeric, p_market_adjustments jsonb, p_user_data_sources jsonb, p_data_completeness character varying, p_methodology text, p_factors_considered jsonb, p_policy_impacts jsonb, p_recommendations jsonb); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.save_enhanced_risk_calculation(p_receivable_id uuid, p_risk_score integer, p_discount_rate numeric, p_confidence_level numeric, p_market_adjustments jsonb, p_user_data_sources jsonb, p_data_completeness character varying, p_methodology text, p_factors_considered jsonb, p_policy_impacts jsonb, p_recommendations jsonb) IS 'Save enhanced risk calculation with market data';


--
-- Name: set_distribution_standard(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.set_distribution_standard() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  fallback_standard public.token_standard_enum;
BEGIN
  -- Step 1: Try to get it from token_allocations
  IF NEW.standard IS NULL THEN
    SELECT ta.standard
    INTO NEW.standard
    FROM public.token_allocations ta
    WHERE ta.id = NEW.token_allocation_id;

    -- Step 2: If still null, try to get from tokens via token_id
    IF NEW.standard IS NULL THEN
      SELECT t.standard
      INTO fallback_standard
      FROM public.tokens t
      JOIN public.token_allocations ta ON ta.token_id = t.id
      WHERE ta.id = NEW.token_allocation_id;

      NEW.standard := fallback_standard;
    END IF;
  END IF;

  RETURN NEW;
END;
$$;


--
-- Name: set_redemption_product_type_on_insert(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.set_redemption_product_type_on_insert() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    -- Auto-populate all fields from associated project
    IF NEW.project_id IS NOT NULL THEN
        SELECT 
            p.project_type, 
            p.organization_id,
            get_product_id_for_project(p.id),
            get_project_target_raise(p.id)
        INTO 
            NEW.product_type, 
            NEW.organization_id,
            NEW.product_id,
            NEW.target_raise_amount
        FROM projects p
        WHERE p.id = NEW.project_id;
    END IF;
    
    RETURN NEW;
END;
$$;


--
-- Name: set_token_allocation_standard(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.set_token_allocation_standard() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
  -- Only attempt to update if token_id is present and standard is null
  if (NEW.token_id is not null and NEW.standard is null) then
    select t.standard into NEW.standard
    from public.tokens t
    where t.id = NEW.token_id;
  end if;
  return NEW;
end;
$$;


--
-- Name: set_updated_at(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.set_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$;


--
-- Name: sidebar_config_matches_user(uuid[], public.profile_type[], uuid[], public.profile_type); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.sidebar_config_matches_user(config_role_ids uuid[], config_profile_enums public.profile_type[], user_role_ids uuid[], user_profile_type public.profile_type) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
BEGIN
    -- Check if user has any of the required roles
    IF config_role_ids IS NOT NULL AND array_length(config_role_ids, 1) > 0 THEN
        IF NOT (config_role_ids && user_role_ids) THEN
            RETURN FALSE;
        END IF;
    END IF;
    
    -- Check if user has required profile type
    IF config_profile_enums IS NOT NULL AND array_length(config_profile_enums, 1) > 0 THEN
        IF user_profile_type IS NULL OR NOT (user_profile_type = ANY(config_profile_enums)) THEN
            RETURN FALSE;
        END IF;
    END IF;
    
    RETURN TRUE;
END;
$$;


--
-- Name: sync_credential_vault_storage(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.sync_credential_vault_storage() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    -- Handle INSERT operations
    IF TG_OP = 'INSERT' THEN
        -- Insert corresponding record in credential_vault_storage
        INSERT INTO credential_vault_storage (
            id,
            credential_id,
            vault_id,
            encrypted_private_key,
            encryption_method,
            access_level,
            backup_created,
            created_at,
            updated_at
        ) VALUES (
            gen_random_uuid(),
            NEW.id,
            COALESCE(NEW.key_vault_id, 'vault_' || NEW.id),
            '', -- Will be populated by application
            'AES256',
            'standard',
            false,
            NOW(),
            NOW()
        )
        ON CONFLICT (credential_id) DO NOTHING; -- Prevent duplicates if record already exists
        
        RETURN NEW;
    END IF;
    
    -- Handle UPDATE operations
    IF TG_OP = 'UPDATE' THEN
        -- Update corresponding record in credential_vault_storage
        UPDATE credential_vault_storage 
        SET 
            vault_id = COALESCE(NEW.key_vault_id, 'vault_' || NEW.id),
            updated_at = NOW(),
            -- If credential is being revoked, mark it in vault storage
            revoked_at = CASE 
                WHEN NEW.revoked_at IS NOT NULL AND OLD.revoked_at IS NULL 
                THEN NEW.revoked_at 
                ELSE revoked_at 
            END,
            revoked_by = CASE 
                WHEN NEW.revoked_at IS NOT NULL AND OLD.revoked_at IS NULL 
                THEN NEW.created_by 
                ELSE revoked_by 
            END
        WHERE credential_id = NEW.id;
        
        -- If no record exists in vault storage, create one
        IF NOT FOUND THEN
            INSERT INTO credential_vault_storage (
                id,
                credential_id,
                vault_id,
                encrypted_private_key,
                encryption_method,
                access_level,
                backup_created,
                created_at,
                updated_at
            ) VALUES (
                gen_random_uuid(),
                NEW.id,
                COALESCE(NEW.key_vault_id, 'vault_' || NEW.id),
                '',
                'AES256',
                'standard',
                false,
                NOW(),
                NOW()
            );
        END IF;
        
        RETURN NEW;
    END IF;
    
    -- Handle DELETE operations
    IF TG_OP = 'DELETE' THEN
        -- Mark as revoked in vault storage (don't delete for audit trail)
        UPDATE credential_vault_storage 
        SET 
            revoked_at = NOW(),
            updated_at = NOW()
        WHERE credential_id = OLD.id;
        
        RETURN OLD;
    END IF;
    
    RETURN NULL;
END;
$$;


--
-- Name: sync_group_memberships(text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.sync_group_memberships(group_id_param text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  sync_timestamp timestamp with time zone := NOW();
BEGIN
  -- Validate input
  IF group_id_param IS NULL THEN
    RAISE EXCEPTION 'group_id_param cannot be NULL';
  END IF;

  -- First sync from old to new table for this group
  BEGIN
    INSERT INTO investor_groups_investors (id, group_id, investor_id, created_at)
    SELECT 
      gen_random_uuid()::text, -- Generate UUID for new records
      old.group_id,
      old.investor_id,
      COALESCE(old.created_at, sync_timestamp)
    FROM 
      investor_group_members old
    WHERE 
      old.group_id::text = group_id_param AND
      old.investor_id IS NOT NULL AND
      NOT EXISTS (
        SELECT 1 
        FROM investor_groups_investors new
        WHERE 
          new.group_id::text = old.group_id::text AND 
          new.investor_id::text = old.investor_id::text
      )
    ON CONFLICT (group_id, investor_id) DO NOTHING;
  EXCEPTION WHEN OTHERS THEN
    -- Log the error but continue with the next step
    RAISE NOTICE 'Error syncing from old to new table: %', SQLERRM;
  END;
  
  -- Then sync from new to old table for this group
  BEGIN
    INSERT INTO investor_group_members (group_id, investor_id, created_at)
    SELECT 
      new.group_id,
      new.investor_id,
      COALESCE(new.created_at, sync_timestamp)
    FROM 
      investor_groups_investors new
    WHERE 
      new.group_id::text = group_id_param AND
      new.investor_id IS NOT NULL AND
      NOT EXISTS (
        SELECT 1 
        FROM investor_group_members old
        WHERE 
          old.group_id::text = new.group_id::text AND 
          old.investor_id::text = new.investor_id::text
      )
    ON CONFLICT (group_id, investor_id) DO NOTHING;
  EXCEPTION WHEN OTHERS THEN
    -- Log the error but continue with the next step
    RAISE NOTICE 'Error syncing from new to old table: %', SQLERRM;
  END;
  
  -- Update the group member count
  BEGIN
    UPDATE investor_groups g
    SET 
      member_count = (
        SELECT get_unique_member_count(g.id::text)
      ),
      updated_at = sync_timestamp
    WHERE 
      g.id::text = group_id_param;
  EXCEPTION WHEN OTHERS THEN
    -- Log the error
    RAISE NOTICE 'Error updating group member count: %', SQLERRM;
  END;
END;
$$;


--
-- Name: sync_investor_group_memberships(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.sync_investor_group_memberships() RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  sync_timestamp timestamp with time zone := NOW();
  v_group_id text;
  groups_cursor CURSOR FOR SELECT id FROM investor_groups WHERE id IS NOT NULL;
BEGIN
  -- Process one group at a time to avoid timeouts
  OPEN groups_cursor;
  LOOP
    FETCH groups_cursor INTO v_group_id;
    EXIT WHEN NOT FOUND;
    
    -- Call the single group sync function for each group
    PERFORM sync_group_memberships(v_group_id::text);
  END LOOP;
  CLOSE groups_cursor;
END;
$$;


--
-- Name: sync_redemption_product_type(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.sync_redemption_product_type() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    -- Update all redemption rules associated with this project
    UPDATE redemption_rules 
    SET product_type = NEW.project_type,
        organization_id = NEW.organization_id,
        product_id = get_product_id_for_project(NEW.id),
        target_raise_amount = get_project_target_raise(NEW.id),
        updated_at = NOW()
    WHERE project_id = NEW.id;
    
    RETURN NEW;
END;
$$;


--
-- Name: sync_redemption_rules_on_product_change(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.sync_redemption_rules_on_product_change() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    -- Update redemption rules when product records change
    IF TG_OP = 'INSERT' THEN
        UPDATE redemption_rules 
        SET product_id = NEW.id,
            updated_at = NOW()
        WHERE project_id = NEW.project_id 
            AND product_id IS NULL;
        RETURN NEW;
    ELSIF TG_OP = 'DELETE' THEN
        UPDATE redemption_rules 
        SET product_id = NULL,
            updated_at = NOW()
        WHERE product_id = OLD.id;
        RETURN OLD;
    END IF;
    
    RETURN NULL;
END;
$$;


--
-- Name: sync_redemption_target_raise_on_product_change(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.sync_redemption_target_raise_on_product_change() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    IF TG_OP = 'UPDATE' AND (OLD.target_raise IS DISTINCT FROM NEW.target_raise) THEN
        -- Update redemption rules when product target_raise changes
        UPDATE redemption_rules 
        SET target_raise_amount = NEW.target_raise,
            updated_at = NOW()
        WHERE product_id = NEW.id;
    END IF;
    
    RETURN NEW;
END;
$$;


--
-- Name: sync_user_to_profile(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.sync_user_to_profile() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  -- When public.users is inserted/updated with auth_id, update profiles.user_id
  IF NEW.auth_id IS NOT NULL THEN
    UPDATE public.profiles
    SET user_id = NEW.id,
        updated_at = NOW()
    WHERE id = NEW.auth_id;
  END IF;
  
  RETURN NEW;
END;
$$;


--
-- Name: table_exists(text, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.table_exists(p_schema_name text, p_table_name text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
    DECLARE
      exists boolean;
    BEGIN
      SELECT COUNT(*) > 0 INTO exists
      FROM information_schema.tables
      WHERE table_schema = p_schema_name
      AND table_name = p_table_name;
      
      RETURN exists;
    END;
    $$;


--
-- Name: track_system_process(text, text, jsonb); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.track_system_process(process_name text, description text DEFAULT NULL::text, metadata jsonb DEFAULT NULL::jsonb) RETURNS uuid
    LANGUAGE plpgsql
    AS $$
DECLARE
    process_id UUID;
BEGIN
    -- Create a new system process record
    INSERT INTO system_processes (
        id,
        process_name,
        description,
        status,
        start_time,
        metadata
    ) VALUES (
        uuid_generate_v4(),
        process_name,
        description,
        'running',
        NOW(),
        metadata
    ) RETURNING id INTO process_id;
    
    -- Return the created process ID
    RETURN process_id;
END;
$$;


--
-- Name: trigger_set_updated_at(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.trigger_set_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$;


--
-- Name: trigger_update_redemption_statistics(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.trigger_update_redemption_statistics() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
    affected_window_id UUID;
BEGIN
    -- Handle INSERT/UPDATE
    IF TG_OP IN ('INSERT', 'UPDATE') THEN
        -- Update statistics for the new/updated window
        IF NEW.window_id IS NOT NULL THEN
            PERFORM update_redemption_window_statistics(NEW.window_id);
        END IF;
        
        IF NEW.redemption_window_id IS NOT NULL THEN
            PERFORM update_redemption_window_statistics(NEW.redemption_window_id);
        END IF;
        
        -- If UPDATE, also update the old window if it changed
        IF TG_OP = 'UPDATE' THEN
            IF OLD.window_id IS NOT NULL AND OLD.window_id != COALESCE(NEW.window_id, OLD.window_id) THEN
                PERFORM update_redemption_window_statistics(OLD.window_id);
            END IF;
            
            IF OLD.redemption_window_id IS NOT NULL AND OLD.redemption_window_id != COALESCE(NEW.redemption_window_id, OLD.redemption_window_id) THEN
                PERFORM update_redemption_window_statistics(OLD.redemption_window_id);
            END IF;
        END IF;
        
        RETURN NEW;
    END IF;
    
    -- Handle DELETE
    IF TG_OP = 'DELETE' THEN
        IF OLD.window_id IS NOT NULL THEN
            PERFORM update_redemption_window_statistics(OLD.window_id);
        END IF;
        
        IF OLD.redemption_window_id IS NOT NULL THEN
            PERFORM update_redemption_window_statistics(OLD.redemption_window_id);
        END IF;
        
        RETURN OLD;
    END IF;
    
    RETURN NULL;
END;
$$;


--
-- Name: universal_update_timestamp(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.universal_update_timestamp() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$;


--
-- Name: FUNCTION universal_update_timestamp(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.universal_update_timestamp() IS 'Universal function for updating timestamp columns. Replaces multiple individual timestamp functions.';


--
-- Name: update_bulk_operation_progress(text, double precision, integer, integer, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_bulk_operation_progress(p_operation_id text, p_progress double precision, p_processed_count integer DEFAULT NULL::integer, p_failed_count integer DEFAULT NULL::integer, p_status character varying DEFAULT NULL::character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_result BOOLEAN;
BEGIN
    UPDATE bulk_operations
    SET 
        progress = p_progress,
        processed_count = COALESCE(p_processed_count, processed_count),
        failed_count = COALESCE(p_failed_count, failed_count),
        status = COALESCE(p_status, status),
        metadata = jsonb_set(
            COALESCE(metadata, '{}'::jsonb),
            '{last_updated}',
            to_jsonb(NOW())
        )
    WHERE id = p_operation_id;
    
    GET DIAGNOSTICS v_result = ROW_COUNT;
    RETURN v_result > 0;
END;
$$;


--
-- Name: update_cache_access(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_cache_access() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.hit_count = OLD.hit_count + 1;
  NEW.last_accessed = NOW();
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$;


--
-- Name: update_climate_cash_flow_projections(jsonb); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_climate_cash_flow_projections(p_projections jsonb) RETURNS jsonb
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  projection JSONB;
  inserted_count INTEGER := 0;
  updated_count INTEGER := 0;
  error_count INTEGER := 0;
  result JSONB;
BEGIN
  -- Process each projection in the array
  FOR projection IN SELECT * FROM jsonb_array_elements(p_projections)
  LOOP
    BEGIN
      -- Insert or update projection
      INSERT INTO climate_cash_flow_projections (
        projection_date,
        projected_amount,
        source_type,
        entity_id,
        created_at,
        updated_at
      ) VALUES (
        (projection->>'projection_date')::DATE,
        (projection->>'projected_amount')::NUMERIC,
        projection->>'source_type',
        CASE 
          WHEN projection->>'entity_id' IS NOT NULL 
          THEN (projection->>'entity_id')::UUID 
          ELSE NULL 
        END,
        NOW(),
        NOW()
      )
      ON CONFLICT (projection_date, source_type) DO UPDATE SET
        projected_amount = EXCLUDED.projected_amount,
        updated_at = NOW();

      IF TG_OP = 'INSERT' THEN
        inserted_count := inserted_count + 1;
      ELSE
        updated_count := updated_count + 1;
      END IF;

    EXCEPTION
      WHEN OTHERS THEN
        error_count := error_count + 1;
        CONTINUE;
    END;
  END LOOP;

  result := jsonb_build_object(
    'success', TRUE,
    'inserted_count', inserted_count,
    'updated_count', updated_count,
    'error_count', error_count,
    'timestamp', NOW()
  );

  RETURN result;
END;
$$;


--
-- Name: update_climate_risk_calculations_updated_at(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_climate_risk_calculations_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$;


--
-- Name: update_consensus_settings_updated_at(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_consensus_settings_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$;


--
-- Name: update_credential_vault_storage_timestamp(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_credential_vault_storage_timestamp() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$;


--
-- Name: update_distribution_remaining_amount(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_distribution_remaining_amount() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- Update the remaining amount in the distribution
  UPDATE distributions
  SET 
    remaining_amount = remaining_amount - NEW.amount_redeemed,
    fully_redeemed = CASE WHEN (remaining_amount - NEW.amount_redeemed) <= 0 THEN true ELSE false END,
    updated_at = now()
  WHERE id = NEW.distribution_id;
  
  RETURN NEW;
END;
$$;


--
-- Name: update_energy_assets_updated_at(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_energy_assets_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$;


--
-- Name: update_group_member_count(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_group_member_count() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- Update the member count based on both tables
  IF TG_OP = 'INSERT' OR TG_OP = 'DELETE' THEN
    -- Get the relevant group_id based on whether we're processing an insert or delete
    DECLARE
      group_id_val uuid;
    BEGIN
      IF TG_OP = 'INSERT' THEN
        group_id_val := NEW.group_id;
      ELSE -- DELETE
        group_id_val := OLD.group_id;
      END IF;
      
      -- Update the count considering both tables
      UPDATE public.investor_groups
      SET 
        member_count = (
          WITH combined_investors AS (
            -- Get all investor_ids from investor_groups_investors
            SELECT investor_id 
            FROM public.investor_groups_investors
            WHERE group_id = group_id_val
            UNION
            -- Get all investor_ids from investor_group_members
            SELECT investor_id
            FROM public.investor_group_members
            WHERE group_id = group_id_val
          )
          -- Count distinct investor_ids
          SELECT COUNT(DISTINCT investor_id) 
          FROM combined_investors
        ),
        updated_at = NOW()
      WHERE id = group_id_val;
    END;
  END IF;
  
  -- Return appropriate record
  IF TG_OP = 'INSERT' THEN
    RETURN NEW;
  ELSIF TG_OP = 'DELETE' THEN
    RETURN OLD;
  END IF;
  RETURN NULL;
END;
$$;


--
-- Name: update_individual_documents_updated_at(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_individual_documents_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$;


--
-- Name: update_modified_column(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_modified_column() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$;


--
-- Name: update_oracle_prices(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_oracle_prices() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- Example: For Treasuries, set oracle_price to 4.13% (2025-09-03 data); in prod, call API
  IF NEW.holding_type = 'Government Securities' THEN NEW.oracle_price := 4.13; END IF;  -- From search
  NEW.last_oracle_update := NOW();
  RETURN NEW;
END;
$$;


--
-- Name: update_project_organization_assignments_timestamp(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_project_organization_assignments_timestamp() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$;


--
-- Name: update_redemption_approvers_updated_at(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_redemption_approvers_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$;


--
-- Name: update_redemption_window_statistics(uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_redemption_window_statistics(window_uuid uuid) RETURNS void
    LANGUAGE plpgsql
    AS $_$
DECLARE
    total_requests_count INTEGER := 0;
    total_value NUMERIC := 0;
    approved_count INTEGER := 0;
    rejected_count INTEGER := 0;
    pending_count INTEGER := 0;
    calculated_approved_value NUMERIC := 0;  -- Renamed to avoid collision
    calculated_rejected_value NUMERIC := 0;  -- Renamed to avoid collision
    calculated_pending_value NUMERIC := 0;   -- Renamed to avoid collision
BEGIN
    -- Calculate statistics from redemption_requests
    SELECT 
        COUNT(*) as total_count,
        COALESCE(SUM(COALESCE(usdc_amount, token_amount, 0)), 0) as total_amount,
        COUNT(*) FILTER (WHERE status = 'approved') as approved_total,
        COUNT(*) FILTER (WHERE status = 'rejected') as rejected_total,
        COUNT(*) FILTER (WHERE status IN ('pending', 'submitted', 'processing')) as pending_total,
        COALESCE(SUM(COALESCE(usdc_amount, token_amount, 0)) FILTER (WHERE status = 'approved'), 0) as approved_amount,
        COALESCE(SUM(COALESCE(usdc_amount, token_amount, 0)) FILTER (WHERE status = 'rejected'), 0) as rejected_amount,
        COALESCE(SUM(COALESCE(usdc_amount, token_amount, 0)) FILTER (WHERE status IN ('pending', 'submitted', 'processing')), 0) as pending_amount
    INTO 
        total_requests_count, total_value, approved_count, rejected_count, pending_count,
        calculated_approved_value, calculated_rejected_value, calculated_pending_value
    FROM redemption_requests 
    WHERE (window_id = window_uuid OR redemption_window_id = window_uuid);

    -- Update redemption_windows table
    UPDATE redemption_windows 
    SET 
        current_requests = total_requests_count,
        total_request_value = total_value,
        approved_requests = approved_count,
        rejected_requests = rejected_count,
        queued_requests = pending_count,
        approved_value = calculated_approved_value,
        rejected_value = calculated_rejected_value,
        queued_value = calculated_pending_value,
        updated_at = NOW(),
        last_status_change_at = NOW()
    WHERE id = window_uuid;

    -- Log the update for audit purposes
    RAISE INFO 'Updated redemption window % with % requests, $% total value', 
               window_uuid, total_requests_count, total_value;

END;
$_$;


--
-- Name: update_redemption_window_timestamp(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_redemption_window_timestamp() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = now();
    
    -- Track status changes
    IF OLD.status IS DISTINCT FROM NEW.status OR 
       OLD.submission_status IS DISTINCT FROM NEW.submission_status OR 
       OLD.processing_status IS DISTINCT FROM NEW.processing_status THEN
        NEW.last_status_change_at = now();
    END IF;
    
    RETURN NEW;
END;
$$;


--
-- Name: update_restriction_rules_updated_at(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_restriction_rules_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$;


--
-- Name: update_rules_updated_at(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_rules_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$;


--
-- Name: update_security_events_updated_at(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_security_events_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$;


--
-- Name: update_settlement_status(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_settlement_status() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = NOW();
    
    -- Auto-complete settlement when both burn and transfer are confirmed
    IF NEW.burn_status = 'confirmed' AND NEW.transfer_status = 'confirmed' AND NEW.status != 'completed' THEN
        NEW.status = 'completed';
        NEW.actual_completion = NOW();
    END IF;
    
    -- Mark as failed if either operation fails
    IF (NEW.burn_status = 'failed' OR NEW.transfer_status = 'failed') AND NEW.status != 'failed' THEN
        NEW.status = 'failed';
    END IF;
    
    RETURN NEW;
END;
$$;


--
-- Name: update_sidebar_configurations_updated_at(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_sidebar_configurations_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$;


--
-- Name: update_sidebar_items_updated_at(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_sidebar_items_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$;


--
-- Name: update_sidebar_sections_updated_at(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_sidebar_sections_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$;


--
-- Name: update_signature_migrations_updated_at(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_signature_migrations_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$;


--
-- Name: update_smart_contract_wallet_updated_at(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_smart_contract_wallet_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$;


--
-- Name: update_stripe_conversion_transactions_updated_at(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_stripe_conversion_transactions_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$;


--
-- Name: update_stripe_stablecoin_accounts_updated_at(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_stripe_stablecoin_accounts_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$;


--
-- Name: update_system_process_progress(text, double precision, integer, character varying); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_system_process_progress(p_process_id text, p_progress double precision, p_processed_count integer DEFAULT NULL::integer, p_status character varying DEFAULT NULL::character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_result BOOLEAN;
BEGIN
    UPDATE system_processes
    SET 
        progress = p_progress,
        metadata = jsonb_set(
            COALESCE(metadata, '{}'::jsonb),
            '{processed_count}',
            COALESCE(to_jsonb(p_processed_count), COALESCE(metadata->'processed_count', '0'::jsonb))
        ),
        status = COALESCE(p_status, status),
        updated_at = NOW()
    WHERE id = p_process_id;
    
    GET DIAGNOSTICS v_result = ROW_COUNT;
    RETURN v_result > 0;
END;
$$;


--
-- Name: update_system_process_status(uuid, text, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_system_process_status(process_id uuid, new_status text, error_details text DEFAULT NULL::text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
    updated_rows INTEGER;
BEGIN
    -- Update the system process status
    UPDATE system_processes
    SET 
        status = new_status,
        end_time = CASE WHEN new_status IN ('completed', 'failed', 'cancelled') THEN NOW() ELSE end_time END,
        error_details = CASE WHEN new_status = 'failed' THEN error_details ELSE NULL END
    WHERE 
        id = process_id
    RETURNING 1 INTO updated_rows;
    
    -- Return true if the update was successful
    RETURN updated_rows = 1;
END;
$$;


--
-- Name: update_timestamp(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_timestamp() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$;


--
-- Name: update_timestamp_column(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_timestamp_column() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
   NEW.updated_at = now(); 
   RETURN NEW;
END;
$$;


--
-- Name: update_total_assets(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_total_assets() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  UPDATE public.asset_nav_data
  SET total_assets = (SELECT SUM(value) FROM public.asset_holdings WHERE asset_id = NEW.asset_id),
      updated_at = NOW()
  WHERE asset_id = NEW.asset_id AND date = CURRENT_DATE;  -- Respects unique_asset_date
  RETURN NEW;
END;
$$;


--
-- Name: update_updated_at_column(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_updated_at_column() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$;


--
-- Name: update_user_role(uuid, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_user_role(p_user_id uuid, p_role text) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- First check if the role exists in roles table
  IF NOT EXISTS (SELECT 1 FROM roles WHERE name = p_role) THEN
    RAISE EXCEPTION 'Role "%" does not exist in the roles table', p_role;
  END IF;

  -- Delete any existing roles
  DELETE FROM user_roles WHERE user_id = p_user_id;
  
  -- Add the new role
  INSERT INTO user_roles (user_id, role, created_at, updated_at)
  VALUES (p_user_id, p_role, NOW(), NOW());
END;
$$;


--
-- Name: update_user_sidebar_preferences_updated_at(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_user_sidebar_preferences_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$;


--
-- Name: update_wallet_locks_updated_at(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_wallet_locks_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$;


--
-- Name: update_wallet_signatories_updated_at(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_wallet_signatories_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$;


--
-- Name: update_wallet_transaction_drafts_updated_at(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_wallet_transaction_drafts_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$;


--
-- Name: update_whitelist_entries_updated_at(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_whitelist_entries_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$;


--
-- Name: upsert_policy_template_approver(uuid, uuid, text, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.upsert_policy_template_approver(p_template_id uuid, p_user_id uuid, p_created_by text, p_status text DEFAULT 'pending'::text) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- First try to update any existing record
  UPDATE policy_template_approvers
  SET 
    created_by = p_created_by,
    status = p_status,
    timestamp = NOW()
  WHERE 
    template_id = p_template_id AND
    user_id = p_user_id;
    
  -- If no record was updated, insert a new one
  IF NOT FOUND THEN
    INSERT INTO policy_template_approvers (
      template_id, 
      user_id, 
      created_by, 
      status, 
      timestamp
    ) VALUES (
      p_template_id,
      p_user_id,
      p_created_by,
      p_status,
      NOW()
    );
  END IF;
END;
$$;


--
-- Name: FUNCTION upsert_policy_template_approver(p_template_id uuid, p_user_id uuid, p_created_by text, p_status text); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.upsert_policy_template_approver(p_template_id uuid, p_user_id uuid, p_created_by text, p_status text) IS 'Safely adds or updates approvers for a policy template without creating duplicates.';


--
-- Name: user_has_delete_permission(uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.user_has_delete_permission(p_user_id uuid) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    -- Check if the current user has the necessary role permissions
    RETURN EXISTS (
        SELECT 1
        FROM user_roles ur
        WHERE ur.user_id = auth.uid()
        AND ur.role IN ('superAdmin', 'owner', 'complianceManager', 'admin', 'Super Admin', 'Owner', 'Compliance Manager')
    );
END;
$$;


--
-- Name: validate_blockchain_address(text, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.validate_blockchain_address(blockchain text, address text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$
BEGIN
  -- Ethereum, Polygon, Avalanche, Optimism, Base, ZkSync, Arbitrum, Mantle, Hedera (EVM-compatible)
  IF blockchain IN ('ethereum', 'polygon', 'avalanche', 'optimism', 'base', 'zksync', 'arbitrum', 'mantle', 'hedera') THEN
    RETURN address ~* '^0x[a-fA-F0-9]{40}$';
  -- Bitcoin
  ELSIF blockchain = 'bitcoin' THEN
    RETURN address ~* '^(bc1|[13])[a-zA-HJ-NP-Z0-9]{25,62}$';
  -- Ripple (XRP)
  ELSIF blockchain = 'ripple' THEN
    RETURN address ~* '^r[a-zA-Z0-9]{24,34}$';
  -- Solana
  ELSIF blockchain = 'solana' THEN
    RETURN address ~* '^[1-9A-HJ-NP-Za-km-z]{32,44}$';
  -- Aptos
  ELSIF blockchain = 'aptos' THEN
    RETURN address ~* '^0x[a-fA-F0-9]{1,64}$';
  -- Sui
  ELSIF blockchain = 'sui' THEN
    RETURN address ~* '^0x[a-fA-F0-9]{1,64}$';
  -- Stellar
  ELSIF blockchain = 'stellar' THEN
    RETURN address ~* '^G[A-Z0-9]{55}$';
  -- NEAR
  ELSIF blockchain = 'near' THEN
    RETURN address ~* '^[a-z0-9_-]{2,64}(\.near)?$';
  -- Default case for unsupported blockchains
  ELSE
    RETURN TRUE; -- Allow any address format for unsupported blockchains
  END IF;
END;
$_$;


--
-- Name: validate_geographic_restriction(uuid, character, numeric); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.validate_geographic_restriction(p_token_id uuid, p_investor_country_code character, p_investment_amount numeric DEFAULT NULL::numeric) RETURNS TABLE(is_allowed boolean, restriction_type text, max_ownership_percentage numeric, requires_enhanced_dd boolean, blocking_reason text)
    LANGUAGE plpgsql
    AS $$
DECLARE
  restriction_record RECORD;
  token_record RECORD;
  jurisdiction_record RECORD;
BEGIN
  -- Get token settings
  SELECT use_geographic_restrictions, default_restriction_policy 
  INTO token_record
  FROM public.tokens t
  LEFT JOIN public.token_erc20_properties erc20 ON t.id = erc20.token_id AND t.standard = 'ERC-20'
  LEFT JOIN public.token_erc721_properties erc721 ON t.id = erc721.token_id AND t.standard = 'ERC-721'
  LEFT JOIN public.token_erc1155_properties erc1155 ON t.id = erc1155.token_id AND t.standard = 'ERC-1155'
  LEFT JOIN public.token_erc1400_properties erc1400 ON t.id = erc1400.token_id AND t.standard = 'ERC-1400'
  LEFT JOIN public.token_erc3525_properties erc3525 ON t.id = erc3525.token_id AND t.standard = 'ERC-3525'
  LEFT JOIN public.token_erc4626_properties erc4626 ON t.id = erc4626.token_id AND t.standard = 'ERC-4626'
  WHERE t.id = p_token_id;

  -- If geographic restrictions not enabled, use default policy
  IF NOT COALESCE(token_record.use_geographic_restrictions, false) THEN
    RETURN QUERY SELECT 
      CASE WHEN COALESCE(token_record.default_restriction_policy, 'allowed') = 'allowed' THEN true ELSE false END,
      'none'::TEXT,
      NULL::NUMERIC,
      false,
      CASE WHEN COALESCE(token_record.default_restriction_policy, 'allowed') = 'blocked' 
           THEN 'Geographic restrictions not configured' 
           ELSE NULL END;
    RETURN;
  END IF;

  -- Get jurisdiction info
  SELECT sanctions_risk_level, is_ofac_sanctioned, is_eu_sanctioned, is_un_sanctioned
  INTO jurisdiction_record
  FROM public.geographic_jurisdictions
  WHERE country_code = p_investor_country_code;

  -- Check for auto-sanctions blocking
  IF COALESCE(jurisdiction_record.is_ofac_sanctioned, false) OR 
     COALESCE(jurisdiction_record.is_eu_sanctioned, false) OR 
     COALESCE(jurisdiction_record.is_un_sanctioned, false) THEN
    RETURN QUERY SELECT 
      false,
      'blocked'::TEXT,
      NULL::NUMERIC,
      false,
      'Country is subject to international sanctions';
    RETURN;
  END IF;

  -- Check specific restriction rules
  SELECT * INTO restriction_record
  FROM public.token_geographic_restrictions
  WHERE token_id = p_token_id 
    AND country_code = p_investor_country_code
    AND (effective_date IS NULL OR effective_date <= CURRENT_DATE)
    AND (expiry_date IS NULL OR expiry_date > CURRENT_DATE);

  -- If specific rule exists, apply it
  IF FOUND THEN
    CASE restriction_record.restriction_type
      WHEN 'blocked' THEN
        RETURN QUERY SELECT 
          false,
          'blocked'::TEXT,
          restriction_record.max_ownership_percentage,
          false,
          'Country is blocked for this token';
      WHEN 'allowed' THEN
        RETURN QUERY SELECT 
          true,
          'allowed'::TEXT,
          restriction_record.max_ownership_percentage,
          false,
          NULL::TEXT;
      WHEN 'limited' THEN
        RETURN QUERY SELECT 
          true,
          'limited'::TEXT,
          restriction_record.max_ownership_percentage,
          false,
          NULL::TEXT;
      WHEN 'enhanced_dd' THEN
        RETURN QUERY SELECT 
          true,
          'enhanced_dd'::TEXT,
          restriction_record.max_ownership_percentage,
          true,
          NULL::TEXT;
      ELSE
        RETURN QUERY SELECT 
          false,
          'unknown'::TEXT,
          NULL::NUMERIC,
          false,
          'Unknown restriction type';
    END CASE;
  ELSE
    -- No specific rule, use default policy
    RETURN QUERY SELECT 
      CASE WHEN COALESCE(token_record.default_restriction_policy, 'allowed') = 'allowed' THEN true ELSE false END,
      'default'::TEXT,
      NULL::NUMERIC,
      false,
      CASE WHEN COALESCE(token_record.default_restriction_policy, 'allowed') = 'blocked' 
           THEN 'Country not in allowed list' 
           ELSE NULL END;
  END IF;

END;
$$;


--
-- Name: FUNCTION validate_geographic_restriction(p_token_id uuid, p_investor_country_code character, p_investment_amount numeric); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.validate_geographic_restriction(p_token_id uuid, p_investor_country_code character, p_investment_amount numeric) IS 'Validates if an investor from a specific country can invest in a token';


--
-- Name: validate_project_type(text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.validate_project_type(p_project_type text) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
    valid_types text[] := ARRAY[
        -- Traditional Assets
        'structured_products',
        'equity', 
        'commodities',
        'funds_etfs_etps',
        'bonds',
        'quantitative_investment_strategies',
        -- Alternative Assets
        'private_equity',
        'private_debt',
        'real_estate',
        'energy',
        'infrastructure',
        'collectibles',
        'receivables',
        'solar_wind_climate',
        -- Digital Assets
        'digital_tokenised_fund',
        'fiat_backed_stablecoin',
        'crypto_backed_stablecoin',
        'commodity_backed_stablecoin',
        'algorithmic_stablecoin',
        'rebasing_stablecoin'
    ];
BEGIN
    RETURN p_project_type = ANY(valid_types);
END;
$$;


--
-- Name: FUNCTION validate_project_type(p_project_type text); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.validate_project_type(p_project_type text) IS 'Validates project type against allowed values for Traditional, Alternative, and Digital assets including all stablecoin types';


--
-- Name: validate_redemption_amount(uuid, numeric); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.validate_redemption_amount(p_redemption_rule_id uuid, p_requested_amount numeric) RETURNS TABLE(is_valid boolean, error_message text, available_capacity numeric, target_raise_amount numeric)
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_capacity_info RECORD;
BEGIN
    -- Get current capacity information
    SELECT * INTO v_capacity_info
    FROM get_redemption_capacity(p_redemption_rule_id);
    
    -- Check if target_raise is set
    IF v_capacity_info.target_raise_amount IS NULL THEN
        RETURN QUERY SELECT 
            TRUE as is_valid,
            NULL as error_message,
            NULL as available_capacity,
            NULL as target_raise_amount;
        RETURN;
    END IF;
    
    -- Check if requested amount exceeds available capacity
    IF p_requested_amount > v_capacity_info.available_capacity THEN
        RETURN QUERY SELECT 
            FALSE as is_valid,
            format('Requested amount %s exceeds available capacity %s (%.2f%% of target raise already redeemed)', 
                   p_requested_amount::TEXT, 
                   v_capacity_info.available_capacity::TEXT,
                   v_capacity_info.capacity_percentage) as error_message,
            v_capacity_info.available_capacity,
            v_capacity_info.target_raise_amount;
        RETURN;
    END IF;
    
    -- Validation passed
    RETURN QUERY SELECT 
        TRUE as is_valid,
        format('Valid redemption: %s of %s available (%.2f%% capacity remaining)', 
               p_requested_amount::TEXT, 
               v_capacity_info.available_capacity::TEXT,
               100 - COALESCE(v_capacity_info.capacity_percentage, 0)) as error_message,
        v_capacity_info.available_capacity,
        v_capacity_info.target_raise_amount;
END;
$$;


--
-- Name: validate_token_data(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.validate_token_data() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    -- Ensure blocks has required fields based on token standard
    IF NEW.standard = 'ERC-20' AND NOT (NEW.blocks->>'name' IS NOT NULL AND NEW.blocks->>'symbol' IS NOT NULL) THEN
        RAISE EXCEPTION 'ERC-20 tokens require name and symbol in blocks data';
    END IF;
    
    -- Other validations as needed
    
    RETURN NEW;
END;
$$;


--
-- Name: validate_token_exists(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.validate_token_exists() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    -- Check if the token_id exists in tokens table
    IF NOT EXISTS (SELECT 1 FROM tokens WHERE id = NEW.token_id) THEN
        RAISE EXCEPTION 'Token with id % does not exist in tokens table', NEW.token_id;
    END IF;
    
    RETURN NEW;
END;
$$;


--
-- Name: FUNCTION validate_token_exists(); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.validate_token_exists() IS 'Validates that token_id exists in tokens table before insert/update operations';


--
-- Name: validate_wallet_address(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.validate_wallet_address() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF NOT validate_blockchain_address(NEW.blockchain, NEW.address) THEN
    RAISE EXCEPTION 'Invalid address format for blockchain %', NEW.blockchain;
  END IF;
  RETURN NEW;
END;
$$;


--
-- Name: validate_whitelist_config_permissive(jsonb); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.validate_whitelist_config_permissive(config jsonb) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- If config is NULL, it's valid (optional field)
  IF config IS NULL THEN
    RETURN TRUE;
  END IF;
  
  -- Must be an object (allow empty objects)
  IF jsonb_typeof(config) != 'object' THEN
    RETURN FALSE;
  END IF;
  
  -- If it's an empty object, it's valid
  IF config = '{}'::jsonb THEN
    RETURN TRUE;
  END IF;
  
  -- If enabled field exists, it must be boolean
  IF config ? 'enabled' AND jsonb_typeof(config->'enabled') != 'boolean' THEN
    RETURN FALSE;
  END IF;
  
  -- If addresses field exists, it must be an array
  IF config ? 'addresses' AND jsonb_typeof(config->'addresses') != 'array' THEN
    RETURN FALSE;
  END IF;
  
  -- If whitelistType field exists, it must be a string
  IF config ? 'whitelistType' AND jsonb_typeof(config->'whitelistType') != 'string' THEN
    RETURN FALSE;
  END IF;
  
  RETURN TRUE;
END;
$$;


--
-- Name: FUNCTION validate_whitelist_config_permissive(config jsonb); Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON FUNCTION public.validate_whitelist_config_permissive(config jsonb) IS 'Permissive validation for whitelist configuration JSON structure across all ERC standards - allows empty objects and flexible structure';


SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: distributions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.distributions (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    token_allocation_id uuid NOT NULL,
    investor_id uuid NOT NULL,
    subscription_id uuid NOT NULL,
    project_id uuid,
    token_type text NOT NULL,
    token_amount numeric NOT NULL,
    distribution_date timestamp with time zone NOT NULL,
    distribution_tx_hash text NOT NULL,
    wallet_id uuid,
    blockchain text NOT NULL,
    token_address text,
    token_symbol text,
    to_address text NOT NULL,
    status text DEFAULT 'confirmed'::text NOT NULL,
    notes text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now(),
    remaining_amount numeric NOT NULL,
    fully_redeemed boolean DEFAULT false NOT NULL,
    standard public.token_standard_enum,
    redemption_status text,
    redemption_percentage_used numeric DEFAULT 0,
    redemption_locked_amount numeric DEFAULT 0,
    CONSTRAINT distributions_remaining_amount_check CHECK ((remaining_amount >= (0)::numeric)),
    CONSTRAINT distributions_token_amount_check CHECK ((token_amount > (0)::numeric))
);


--
-- Name: TABLE distributions; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.distributions IS 'Records of confirmed token distributions with blockchain transaction data';


--
-- Name: redemption_rules; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.redemption_rules (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    rule_id uuid,
    redemption_type text NOT NULL,
    require_multi_sig_approval boolean DEFAULT true,
    required_approvers integer DEFAULT 2,
    total_approvers integer DEFAULT 3,
    notify_investors boolean DEFAULT true,
    settlement_method text DEFAULT 'stablecoin'::text,
    immediate_execution boolean,
    use_latest_nav boolean,
    allow_any_time_redemption boolean,
    repurchase_frequency text,
    lock_up_period integer,
    submission_window_days integer,
    lock_tokens_on_request boolean,
    use_window_nav boolean,
    enable_pro_rata_distribution boolean,
    queue_unprocessed_requests boolean,
    enable_admin_override boolean,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    project_id uuid,
    organization_id uuid,
    product_type text,
    product_id uuid,
    is_redemption_open boolean DEFAULT false,
    open_after_date timestamp with time zone,
    allow_continuous_redemption boolean DEFAULT false,
    max_redemption_percentage numeric,
    redemption_eligibility_rules jsonb DEFAULT '{}'::jsonb,
    target_raise_amount numeric,
    redemption_window_id uuid,
    approval_config_id uuid,
    CONSTRAINT redemption_rules_max_percentage_check CHECK (((max_redemption_percentage IS NULL) OR (max_redemption_percentage <= (100)::numeric) OR (target_raise_amount IS NULL))),
    CONSTRAINT redemption_rules_product_type_check CHECK ((product_type = ANY (ARRAY['structured_products'::text, 'equity'::text, 'commodities'::text, 'funds_etfs_etps'::text, 'bonds'::text, 'quantitative_investment_strategies'::text, 'private_equity'::text, 'private_debt'::text, 'real_estate'::text, 'energy'::text, 'infrastructure'::text, 'collectibles'::text, 'receivables'::text, 'solar_wind_climate'::text, 'digital_tokenised_fund'::text, 'fiat_backed_stablecoin'::text, 'crypto_backed_stablecoin'::text, 'commodity_backed_stablecoin'::text, 'algorithmic_stablecoin'::text, 'rebasing_stablecoin'::text]))),
    CONSTRAINT redemption_rules_redemption_type_check CHECK ((redemption_type = ANY (ARRAY['standard'::text, 'interval'::text]))),
    CONSTRAINT redemption_rules_settlement_method_check CHECK ((settlement_method = ANY (ARRAY['stablecoin'::text, 'fiat'::text, 'hybrid'::text])))
);


--
-- Name: COLUMN redemption_rules.product_type; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.redemption_rules.product_type IS 'Automatically synchronized with projects.project_type via triggers. Represents the financial product category for this redemption rule.';


--
-- Name: COLUMN redemption_rules.product_id; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.redemption_rules.product_id IS 'Foreign key to the specific product record in the appropriate product table based on project_type. Automatically managed via triggers.';


--
-- Name: COLUMN redemption_rules.target_raise_amount; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.redemption_rules.target_raise_amount IS 'Maximum redeemable amount (100% of product/project target_raise). Auto-synced from product tables.';


--
-- Name: redemption_eligibility; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.redemption_eligibility AS
 SELECT d.id AS distribution_id,
    d.investor_id,
    d.project_id,
    d.token_amount AS total_distributed,
    d.remaining_amount,
    d.redemption_percentage_used,
    d.fully_redeemed,
    rr.id AS rule_id,
    rr.is_redemption_open,
    rr.open_after_date,
    rr.allow_continuous_redemption,
    rr.max_redemption_percentage,
    rr.lock_up_period,
    rr.product_type,
    rr.product_id,
    NULL::uuid AS active_window_id,
    NULL::timestamp without time zone AS window_start,
    NULL::timestamp without time zone AS window_end,
    NULL::timestamp without time zone AS submission_start_date,
    NULL::timestamp without time zone AS submission_end_date,
    NULL::text AS window_status,
        CASE
            WHEN d.fully_redeemed THEN false
            WHEN (rr.is_redemption_open = false) THEN false
            WHEN ((rr.open_after_date IS NOT NULL) AND (rr.open_after_date > now())) THEN false
            WHEN (rr.allow_continuous_redemption = true) THEN true
            ELSE false
        END AS is_eligible_now,
        CASE
            WHEN (rr.max_redemption_percentage IS NOT NULL) THEN LEAST(d.remaining_amount, ((d.token_amount * rr.max_redemption_percentage) / (100)::numeric))
            ELSE d.remaining_amount
        END AS max_redeemable_amount,
        CASE
            WHEN d.fully_redeemed THEN 'Distribution fully redeemed'::text
            WHEN (rr.is_redemption_open = false) THEN 'Redemptions are closed'::text
            WHEN ((rr.open_after_date IS NOT NULL) AND (rr.open_after_date > now())) THEN ('Redemption period not yet open until '::text || (rr.open_after_date)::text)
            WHEN (rr.allow_continuous_redemption = false) THEN 'Window-based redemption configured but no active window management'::text
            ELSE 'Eligible'::text
        END AS eligibility_reason
   FROM (public.distributions d
     LEFT JOIN public.redemption_rules rr ON ((rr.project_id = d.project_id)))
  WHERE (d.remaining_amount > (0)::numeric);


--
-- Name: active_redemption_opportunities; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.active_redemption_opportunities AS
 SELECT re.project_id,
    re.investor_id,
    re.product_type,
    re.product_id,
    count(re.distribution_id) AS eligible_distributions,
    sum(re.total_distributed) AS total_distributed_amount,
    sum(re.remaining_amount) AS total_remaining_amount,
    sum(re.max_redeemable_amount) AS total_max_redeemable,
    array_agg(re.distribution_id) AS distribution_ids,
    min(re.window_start) AS earliest_window_start,
    max(re.window_end) AS latest_window_end,
    bool_and(re.is_eligible_now) AS all_eligible,
    string_agg(DISTINCT re.eligibility_reason, '; '::text) AS combined_reasons
   FROM public.redemption_eligibility re
  WHERE (re.is_eligible_now = true)
  GROUP BY re.project_id, re.investor_id, re.product_type, re.product_id;


--
-- Name: audit_logs; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.audit_logs (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    "timestamp" timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    action text NOT NULL,
    username text DEFAULT 'system'::text,
    details text DEFAULT 'system action'::text,
    status text DEFAULT 'Success'::text,
    signature text,
    verified boolean DEFAULT false,
    user_email text,
    user_id uuid,
    entity_type text,
    entity_id text,
    old_data jsonb,
    new_data jsonb,
    metadata jsonb,
    project_id uuid,
    action_type text,
    changes jsonb,
    occurred_at timestamp with time zone DEFAULT now(),
    system_process_id uuid,
    batch_operation_id uuid,
    severity text DEFAULT 'info'::text,
    duration integer,
    source text,
    is_automated boolean DEFAULT false,
    category character varying,
    parent_id uuid,
    correlation_id character varying,
    session_id character varying,
    ip_address character varying,
    user_agent character varying,
    api_version character varying,
    request_id character varying,
    importance integer DEFAULT 1
);


--
-- Name: TABLE audit_logs; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.audit_logs IS '@omit create,update,delete
Retention policy: 90 days';


--
-- Name: activity_analytics; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.activity_analytics AS
 SELECT audit_logs.id,
    audit_logs.action,
    audit_logs.action_type AS source,
    audit_logs.category,
    audit_logs.severity,
    audit_logs."timestamp",
    audit_logs.user_id,
    audit_logs.user_email,
    audit_logs.entity_type,
    audit_logs.entity_id,
    audit_logs.status,
    audit_logs.duration,
    audit_logs.system_process_id,
    audit_logs.batch_operation_id,
    audit_logs.project_id,
    audit_logs.correlation_id,
    audit_logs.ip_address,
    audit_logs.session_id
   FROM public.audit_logs;


--
-- Name: alerts; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.alerts (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    severity text NOT NULL,
    service text NOT NULL,
    title text NOT NULL,
    description text,
    status text DEFAULT 'OPEN'::text NOT NULL,
    assignee text,
    metadata jsonb DEFAULT '{}'::jsonb,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT alerts_severity_check CHECK ((severity = ANY (ARRAY['LOW'::text, 'MEDIUM'::text, 'HIGH'::text, 'CRITICAL'::text]))),
    CONSTRAINT alerts_status_check CHECK ((status = ANY (ARRAY['OPEN'::text, 'ACKNOWLEDGED'::text, 'RESOLVED'::text])))
);


--
-- Name: approval_config_approvers; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.approval_config_approvers (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    approval_config_id uuid NOT NULL,
    approver_type text NOT NULL,
    approver_user_id uuid,
    approver_role_id uuid,
    is_required boolean DEFAULT true,
    order_priority integer DEFAULT 0,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    created_by uuid,
    CONSTRAINT approval_config_approvers_approver_type_check CHECK ((approver_type = ANY (ARRAY['user'::text, 'role'::text]))),
    CONSTRAINT check_approver_reference CHECK ((((approver_type = 'user'::text) AND (approver_user_id IS NOT NULL) AND (approver_role_id IS NULL)) OR ((approver_type = 'role'::text) AND (approver_role_id IS NOT NULL) AND (approver_user_id IS NULL))))
);


--
-- Name: TABLE approval_config_approvers; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.approval_config_approvers IS 'Junction table linking approval configs to specific users or roles as approvers';


--
-- Name: approval_config_history; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.approval_config_history (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    approval_config_id uuid NOT NULL,
    change_type text NOT NULL,
    old_data jsonb,
    new_data jsonb,
    changed_by uuid,
    change_reason text,
    created_at timestamp with time zone DEFAULT now(),
    CONSTRAINT approval_config_history_change_type_check CHECK ((change_type = ANY (ARRAY['created'::text, 'updated'::text, 'deleted'::text, 'approver_added'::text, 'approver_removed'::text])))
);


--
-- Name: TABLE approval_config_history; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.approval_config_history IS 'Audit trail for changes to approval configurations';


--
-- Name: approval_configs; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.approval_configs (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    permission_id uuid NOT NULL,
    required_approvals integer DEFAULT 2 NOT NULL,
    eligible_roles text[] NOT NULL,
    auto_approval_conditions jsonb,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    consensus_type text DEFAULT '2of3'::text NOT NULL,
    config_name text,
    config_description text,
    approval_mode text DEFAULT 'mixed'::text,
    requires_all_approvers boolean DEFAULT false,
    auto_approve_threshold integer DEFAULT 0,
    escalation_config jsonb,
    notification_config jsonb,
    active boolean DEFAULT true,
    created_by uuid,
    last_modified_by uuid,
    CONSTRAINT approval_configs_approval_mode_check CHECK ((approval_mode = ANY (ARRAY['role_based'::text, 'user_specific'::text, 'mixed'::text])))
);


--
-- Name: COLUMN approval_configs.approval_mode; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.approval_configs.approval_mode IS 'Determines if config uses role-based, user-specific, or mixed approver assignment';


--
-- Name: COLUMN approval_configs.requires_all_approvers; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.approval_configs.requires_all_approvers IS 'If true, ALL configured approvers must approve; overrides consensus_type';


--
-- Name: COLUMN approval_configs.auto_approve_threshold; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.approval_configs.auto_approve_threshold IS 'Automatic approval if request amount is below this threshold';


--
-- Name: roles; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.roles (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    name text NOT NULL,
    description text NOT NULL,
    priority integer NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);


--
-- Name: users; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.users (
    id uuid NOT NULL,
    name text NOT NULL,
    email text NOT NULL,
    status text DEFAULT 'active'::text NOT NULL,
    public_key text,
    encrypted_private_key text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    auth_id uuid
);


--
-- Name: approval_configs_with_approvers; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.approval_configs_with_approvers AS
 SELECT ac.id,
    ac.permission_id,
    ac.config_name,
    ac.config_description,
    ac.approval_mode,
    ac.required_approvals,
    ac.requires_all_approvers,
    ac.consensus_type,
    ac.eligible_roles,
    ac.auto_approval_conditions,
    ac.auto_approve_threshold,
    ac.escalation_config,
    ac.notification_config,
    ac.active,
    ac.created_at,
    ac.updated_at,
    ac.created_by,
    ac.last_modified_by,
    COALESCE(json_agg(
        CASE
            WHEN (aca.approver_type = 'user'::text) THEN json_build_object('type', 'user', 'id', aca.approver_user_id, 'name', u.name, 'email', u.email, 'is_required', aca.is_required, 'order_priority', aca.order_priority)
            WHEN (aca.approver_type = 'role'::text) THEN json_build_object('type', 'role', 'id', aca.approver_role_id, 'name', r.name, 'description', r.description, 'is_required', aca.is_required, 'order_priority', aca.order_priority)
            ELSE NULL::json
        END ORDER BY aca.order_priority, aca.created_at) FILTER (WHERE (aca.id IS NOT NULL)), '[]'::json) AS configured_approvers,
    count(aca.id) AS approver_count
   FROM (((public.approval_configs ac
     LEFT JOIN public.approval_config_approvers aca ON ((ac.id = aca.approval_config_id)))
     LEFT JOIN public.users u ON ((aca.approver_user_id = u.id)))
     LEFT JOIN public.roles r ON ((aca.approver_role_id = r.id)))
  GROUP BY ac.id, ac.permission_id, ac.config_name, ac.config_description, ac.approval_mode, ac.required_approvals, ac.requires_all_approvers, ac.consensus_type, ac.eligible_roles, ac.auto_approval_conditions, ac.auto_approve_threshold, ac.escalation_config, ac.notification_config, ac.active, ac.created_at, ac.updated_at, ac.created_by, ac.last_modified_by;


--
-- Name: VIEW approval_configs_with_approvers; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON VIEW public.approval_configs_with_approvers IS 'Consolidated view of approval configs with their configured approvers';


--
-- Name: approval_requests; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.approval_requests (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    action character varying(100) NOT NULL,
    resource character varying(100) NOT NULL,
    resource_id character varying(100) NOT NULL,
    requested_by uuid NOT NULL,
    status character varying(20) DEFAULT 'pending'::character varying NOT NULL,
    approvers uuid[] NOT NULL,
    approved_by uuid[] DEFAULT '{}'::uuid[] NOT NULL,
    rejected_by uuid[] DEFAULT '{}'::uuid[] NOT NULL,
    required_approvals integer DEFAULT 2 NOT NULL,
    metadata jsonb,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT approval_requests_status_check CHECK (((status)::text = ANY (ARRAY[('pending'::character varying)::text, ('approved'::character varying)::text, ('rejected'::character varying)::text])))
);


--
-- Name: asset_backed_products; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.asset_backed_products (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    project_id uuid NOT NULL,
    asset_number character varying(50),
    asset_type character varying(100),
    origination_date timestamp with time zone,
    original_amount numeric,
    maturity_date timestamp with time zone,
    interest_rate numeric,
    accrual_type character varying(50),
    lien_position character varying(50),
    payment_frequency character varying(50),
    current_balance numeric,
    modification_indicator boolean,
    prepayment_penalty numeric,
    delinquency_status integer,
    repurchase_amount numeric,
    demand_resolution_date timestamp with time zone,
    repurchaser text,
    status character varying(50),
    target_raise numeric,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    debtor_credit_quality character varying,
    collection_period_days integer,
    recovery_rate_percentage numeric,
    diversification_metrics character varying
);


--
-- Name: TABLE asset_backed_products; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.asset_backed_products IS 'Asset-backed securities and receivables products with unique constraint on project_id to ensure one product per project';


--
-- Name: asset_holdings; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.asset_holdings (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    asset_id uuid NOT NULL,
    holding_type text NOT NULL,
    quantity numeric(78,18) NOT NULL,
    value numeric(78,18) NOT NULL,
    maturity_date date,
    credit_rating text,
    source text DEFAULT 'oracle'::text NOT NULL,
    updated_at timestamp with time zone DEFAULT now(),
    oracle_price numeric(78,18) DEFAULT 0,
    last_oracle_update timestamp with time zone DEFAULT now(),
    CONSTRAINT asset_holdings_source_check CHECK ((source = ANY (ARRAY['manual'::text, 'oracle'::text, 'calculated'::text, 'administrator'::text]))),
    CONSTRAINT chk_holdings_quantity_positive CHECK (((quantity IS NULL) OR (quantity > (0)::numeric))),
    CONSTRAINT mmf_maturity_check CHECK (
CASE
    WHEN (holding_type = ANY (ARRAY['Government Securities'::text, 'Repos'::text, 'Commercial Paper'::text, 'CDs'::text, 'Corporate Debt'::text, 'Municipal Debt'::text])) THEN ((maturity_date - CURRENT_DATE) <= 397)
    ELSE true
END),
    CONSTRAINT positive_quantity CHECK ((quantity > (0)::numeric)),
    CONSTRAINT positive_value CHECK ((value > (0)::numeric))
);


--
-- Name: asset_nav_data; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.asset_nav_data (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    asset_id uuid NOT NULL,
    project_id uuid NOT NULL,
    date date NOT NULL,
    nav numeric(18,6) NOT NULL,
    total_assets numeric(78,18) NOT NULL,
    asset_name text NOT NULL,
    total_liabilities numeric(78,18) DEFAULT 0 NOT NULL,
    outstanding_shares numeric(78,18) NOT NULL,
    previous_nav numeric(18,6),
    change_amount numeric(18,6),
    change_percent numeric(8,4),
    source text DEFAULT 'manual'::text NOT NULL,
    validated boolean DEFAULT false,
    validated_by uuid,
    validated_at timestamp with time zone,
    notes text,
    calculation_method text,
    market_conditions text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    created_by uuid,
    calculated_nav numeric(18,6) GENERATED ALWAYS AS (
CASE
    WHEN (total_assets > total_liabilities) THEN ((total_assets - total_liabilities) / outstanding_shares)
    ELSE NULL::numeric
END) STORED,
    CONSTRAINT asset_nav_data_source_check CHECK ((source = ANY (ARRAY['manual'::text, 'oracle'::text, 'calculated'::text, 'administrator'::text]))),
    CONSTRAINT non_negative_liabilities CHECK ((total_liabilities >= (0)::numeric)),
    CONSTRAINT positive_assets CHECK ((total_assets > (0)::numeric)),
    CONSTRAINT positive_nav CHECK ((nav > (0)::numeric)),
    CONSTRAINT positive_shares CHECK ((outstanding_shares > (0)::numeric))
);


--
-- Name: audit_coverage; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.audit_coverage AS
 SELECT tgt.tgname AS trigger_name,
    nsp.nspname AS schema_name,
    cls.relname AS table_name,
    p.proname AS function_name
   FROM (((pg_trigger tgt
     JOIN pg_class cls ON ((tgt.tgrelid = cls.oid)))
     JOIN pg_namespace nsp ON ((cls.relnamespace = nsp.oid)))
     JOIN pg_proc p ON ((tgt.tgfoid = p.oid)))
  WHERE ((p.proname = 'log_table_change'::name) AND (nsp.nspname <> ALL (ARRAY['pg_catalog'::name, 'information_schema'::name])))
  ORDER BY nsp.nspname, cls.relname;


--
-- Name: auth_events; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.auth_events (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    user_id uuid,
    event_type text NOT NULL,
    ip_address text,
    user_agent text,
    metadata jsonb,
    created_at timestamp with time zone DEFAULT now()
);


--
-- Name: batch_operations; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.batch_operations (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_operation_id uuid NOT NULL,
    operation_index integer NOT NULL,
    target_address text NOT NULL,
    value text NOT NULL,
    call_data text NOT NULL,
    success boolean DEFAULT false,
    return_data text,
    gas_used bigint,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP
);


--
-- Name: TABLE batch_operations; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.batch_operations IS 'Individual operations within batched user operations';


--
-- Name: COLUMN batch_operations.operation_index; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.batch_operations.operation_index IS 'Index of operation within the batch (0-based)';


--
-- Name: COLUMN batch_operations.success; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.batch_operations.success IS 'Whether this individual operation succeeded';


--
-- Name: bond_products; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.bond_products (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    project_id uuid NOT NULL,
    bond_isin_cusip character varying(50),
    issuer_name text,
    coupon_rate numeric,
    face_value numeric,
    credit_rating character varying(10),
    bond_type character varying(50),
    callable_flag boolean,
    call_put_dates timestamp with time zone[],
    yield_to_maturity numeric,
    duration numeric,
    currency character varying(10),
    issue_date timestamp with time zone,
    maturity_date timestamp with time zone,
    status character varying(50),
    coupon_payment_history jsonb,
    redemption_call_date timestamp with time zone,
    accrued_interest numeric,
    coupon_frequency character varying(50),
    callable_features boolean,
    call_date timestamp with time zone,
    call_price numeric,
    security_collateral text,
    target_raise numeric,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    bond_identifier character varying
);


--
-- Name: bulk_operations; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.bulk_operations (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    completed_at timestamp with time zone,
    created_by uuid,
    metadata jsonb,
    operation_type text,
    status text,
    tags text[],
    target_ids uuid[],
    created_at timestamp with time zone DEFAULT now(),
    progress double precision DEFAULT 0,
    processed_count integer DEFAULT 0,
    failed_count integer DEFAULT 0,
    error_details jsonb
);


--
-- Name: TABLE bulk_operations; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.bulk_operations IS 'Tracks bulk operations performed in the system';


--
-- Name: cap_tables; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.cap_tables (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    name text NOT NULL,
    description text,
    project_id uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: carbon_offsets; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.carbon_offsets (
    offset_id uuid DEFAULT gen_random_uuid() NOT NULL,
    project_id uuid NOT NULL,
    type character varying(50) NOT NULL,
    amount numeric(15,2) NOT NULL,
    price_per_ton numeric(10,2) NOT NULL,
    total_value numeric(15,2) NOT NULL,
    verification_standard character varying(100),
    verification_date date,
    expiration_date date,
    status character varying(50) NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: climate_market_data_cache; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.climate_market_data_cache (
    cache_id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    cache_key character varying(100) NOT NULL,
    data jsonb NOT NULL,
    cached_at timestamp with time zone DEFAULT now(),
    expires_at timestamp with time zone NOT NULL,
    hit_count integer DEFAULT 0,
    last_accessed timestamp with time zone DEFAULT now(),
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: TABLE climate_market_data_cache; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.climate_market_data_cache IS 'Caches government API data to avoid CORS issues and reduce API calls';


--
-- Name: climate_cache_performance; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.climate_cache_performance AS
 SELECT climate_market_data_cache.cache_key,
    climate_market_data_cache.hit_count,
    climate_market_data_cache.cached_at,
    climate_market_data_cache.expires_at,
    climate_market_data_cache.last_accessed,
    (EXTRACT(epoch FROM (climate_market_data_cache.expires_at - climate_market_data_cache.cached_at)) / (3600)::numeric) AS ttl_hours,
    (EXTRACT(epoch FROM (now() - climate_market_data_cache.last_accessed)) / (60)::numeric) AS minutes_since_access,
        CASE
            WHEN (climate_market_data_cache.expires_at > now()) THEN 'valid'::text
            ELSE 'expired'::text
        END AS status
   FROM public.climate_market_data_cache
  ORDER BY climate_market_data_cache.hit_count DESC, climate_market_data_cache.last_accessed DESC;


--
-- Name: VIEW climate_cache_performance; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON VIEW public.climate_cache_performance IS 'Monitoring view for cache hit rates and performance';


--
-- Name: climate_cash_flow_projections; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.climate_cash_flow_projections (
    projection_id uuid DEFAULT gen_random_uuid() NOT NULL,
    projection_date date NOT NULL,
    projected_amount numeric(15,2) NOT NULL,
    source_type character varying(50) NOT NULL,
    entity_id uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: climate_cash_flow_forecast; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.climate_cash_flow_forecast AS
 SELECT climate_cash_flow_projections.projection_date,
    sum(climate_cash_flow_projections.projected_amount) AS total_projected,
    climate_cash_flow_projections.source_type
   FROM public.climate_cash_flow_projections
  GROUP BY climate_cash_flow_projections.projection_date, climate_cash_flow_projections.source_type
  ORDER BY climate_cash_flow_projections.projection_date;


--
-- Name: climate_incentives; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.climate_incentives (
    incentive_id uuid DEFAULT gen_random_uuid() NOT NULL,
    type character varying(50) NOT NULL,
    amount numeric(15,2) NOT NULL,
    status character varying(50) NOT NULL,
    asset_id uuid,
    receivable_id uuid,
    expected_receipt_date date,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    project_id uuid
);


--
-- Name: COLUMN climate_incentives.project_id; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.climate_incentives.project_id IS 'Links to projects.id for project-based filtering';


--
-- Name: climate_investor_pools; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.climate_investor_pools (
    investor_id uuid NOT NULL,
    pool_id uuid NOT NULL,
    investment_amount numeric(15,2) NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    project_id uuid
);


--
-- Name: climate_pool_receivables; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.climate_pool_receivables (
    pool_id uuid NOT NULL,
    receivable_id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    project_id uuid
);


--
-- Name: climate_receivables; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.climate_receivables (
    receivable_id uuid DEFAULT gen_random_uuid() NOT NULL,
    asset_id uuid,
    payer_id uuid,
    amount numeric(15,2) NOT NULL,
    due_date date NOT NULL,
    risk_score integer,
    discount_rate numeric(5,2),
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    project_id uuid,
    climate_nav_value numeric(15,2),
    monte_carlo_nav_value numeric(15,2),
    nav_variance_percentage numeric(6,4),
    nav_reconciliation_status text,
    investment_recommendation text,
    recommendation_confidence numeric(4,3),
    target_price numeric(15,2),
    climate_nav_last_calculated timestamp with time zone,
    CONSTRAINT climate_receivables_investment_recommendation_check CHECK ((investment_recommendation = ANY (ARRAY['BUY'::text, 'HOLD'::text, 'SELL'::text, 'UNDER_REVIEW'::text]))),
    CONSTRAINT climate_receivables_nav_reconciliation_status_check CHECK ((nav_reconciliation_status = ANY (ARRAY['LOW_VARIANCE'::text, 'MEDIUM_VARIANCE'::text, 'HIGH_VARIANCE'::text, 'REQUIRES_REVIEW'::text]))),
    CONSTRAINT climate_receivables_risk_score_check CHECK (((risk_score >= 0) AND (risk_score <= 100)))
);


--
-- Name: COLUMN climate_receivables.climate_nav_value; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.climate_receivables.climate_nav_value IS 'Climate-specific NAV using LCOE/PPA/Carbon methodology';


--
-- Name: COLUMN climate_receivables.nav_variance_percentage; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.climate_receivables.nav_variance_percentage IS 'Variance between Climate NAV and Monte Carlo NAV methods';


--
-- Name: climate_tokenization_pools; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.climate_tokenization_pools (
    pool_id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(255) NOT NULL,
    total_value numeric(15,2) NOT NULL,
    risk_profile character varying(50),
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    project_id uuid
);


--
-- Name: climate_investor_pool_summary; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.climate_investor_pool_summary AS
 SELECT ipa.investor_id,
    ipa.pool_id,
    ctp.name AS pool_name,
    ipa.investment_amount,
    sum(cr.amount) AS total_receivables,
    avg(cr.risk_score) AS avg_risk_score
   FROM (((public.climate_investor_pools ipa
     JOIN public.climate_tokenization_pools ctp ON ((ipa.pool_id = ctp.pool_id)))
     JOIN public.climate_pool_receivables cpr ON ((ctp.pool_id = cpr.pool_id)))
     JOIN public.climate_receivables cr ON ((cpr.receivable_id = cr.receivable_id)))
  GROUP BY ipa.investor_id, ipa.pool_id, ctp.name, ipa.investment_amount;


--
-- Name: climate_nav_calculations; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.climate_nav_calculations (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    receivable_id uuid NOT NULL,
    asset_id uuid,
    calculation_type text NOT NULL,
    lcoe_capex numeric(15,2),
    lcoe_opex_annual numeric(12,2),
    lcoe_maintenance_costs jsonb,
    lcoe_tax_credits jsonb,
    lcoe_calculated numeric(10,4),
    lcoe_competitiveness text,
    ppa_contract_type text,
    ppa_base_rate numeric(10,4),
    ppa_escalation_rate numeric(6,4),
    ppa_market_comparison numeric(10,4),
    ppa_counterparty_rating text,
    ppa_risk_premium numeric(6,4),
    carbon_credits_annual integer,
    carbon_price_current numeric(8,2),
    carbon_verification_standard text,
    additionality_financial boolean,
    additionality_regulatory boolean,
    additionality_common_practice boolean,
    additionality_barrier boolean,
    additionality_premium_percentage numeric(5,2),
    climate_nav_value numeric(15,2),
    monte_carlo_nav_value numeric(15,2),
    valuation_variance numeric(6,4),
    recommended_value numeric(15,2),
    investment_recommendation text,
    confidence_level numeric(4,3),
    calculation_methodology text,
    data_sources jsonb,
    risk_adjustments jsonb,
    created_at timestamp with time zone DEFAULT now(),
    calculated_by text,
    CONSTRAINT climate_nav_calculations_calculation_type_check CHECK ((calculation_type = ANY (ARRAY['LCOE_BENCHMARK'::text, 'PPA_ANALYSIS'::text, 'CARBON_CREDIT'::text, 'INTEGRATED_VALUATION'::text]))),
    CONSTRAINT climate_nav_calculations_carbon_verification_standard_check CHECK ((carbon_verification_standard = ANY (ARRAY['VCS'::text, 'CDM'::text, 'GOLD_STANDARD'::text, 'CAR'::text]))),
    CONSTRAINT climate_nav_calculations_lcoe_competitiveness_check CHECK ((lcoe_competitiveness = ANY (ARRAY['EXCELLENT'::text, 'GOOD'::text, 'MARKET'::text, 'POOR'::text]))),
    CONSTRAINT climate_nav_calculations_ppa_contract_type_check CHECK ((ppa_contract_type = ANY (ARRAY['FIXED'::text, 'ESCALATING'::text, 'INDEXED'::text])))
);


--
-- Name: TABLE climate_nav_calculations; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.climate_nav_calculations IS 'Historical climate NAV calculations with detailed methodology tracking';


--
-- Name: climate_payers; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.climate_payers (
    payer_id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(255) NOT NULL,
    credit_rating character varying(10),
    financial_health_score integer,
    payment_history jsonb,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    project_id uuid,
    esg_score integer,
    CONSTRAINT climate_payers_esg_score_check CHECK (((esg_score >= 0) AND (esg_score <= 100))),
    CONSTRAINT climate_payers_financial_health_score_check CHECK (((financial_health_score >= 0) AND (financial_health_score <= 100)))
);


--
-- Name: climate_policies; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.climate_policies (
    policy_id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(255) NOT NULL,
    description text,
    impact_level character varying(50),
    effective_date date NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    project_id uuid
);


--
-- Name: climate_policy_impacts; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.climate_policy_impacts (
    impact_id uuid DEFAULT gen_random_uuid() NOT NULL,
    policy_id uuid,
    receivable_id uuid,
    asset_id uuid,
    impact_description text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    project_id uuid
);


--
-- Name: climate_pool_energy_assets; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.climate_pool_energy_assets (
    pool_id uuid NOT NULL,
    asset_id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    project_id uuid
);


--
-- Name: climate_pool_incentives; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.climate_pool_incentives (
    pool_id uuid NOT NULL,
    incentive_id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    project_id uuid
);


--
-- Name: climate_pool_recs; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.climate_pool_recs (
    pool_id uuid NOT NULL,
    rec_id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    project_id uuid
);


--
-- Name: climate_reports; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.climate_reports (
    report_id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    report_type character varying(50) NOT NULL,
    generated_by uuid,
    parameters jsonb NOT NULL,
    file_path text NOT NULL,
    file_size bigint,
    status character varying(20) DEFAULT 'pending'::character varying,
    created_at timestamp with time zone DEFAULT now(),
    expires_at timestamp with time zone,
    download_count integer DEFAULT 0
);


--
-- Name: climate_risk_calculations; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.climate_risk_calculations (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    receivable_id uuid NOT NULL,
    calculated_at timestamp with time zone DEFAULT now() NOT NULL,
    production_risk_score numeric(5,4) NOT NULL,
    production_risk_factors text[] DEFAULT '{}'::text[] NOT NULL,
    production_risk_confidence numeric(5,4) NOT NULL,
    last_weather_update timestamp with time zone,
    credit_risk_score numeric(5,4) NOT NULL,
    credit_risk_factors text[] DEFAULT '{}'::text[] NOT NULL,
    credit_risk_confidence numeric(5,4) NOT NULL,
    last_credit_update timestamp with time zone,
    policy_risk_score numeric(5,4) NOT NULL,
    policy_risk_factors text[] DEFAULT '{}'::text[] NOT NULL,
    policy_risk_confidence numeric(5,4) NOT NULL,
    last_policy_update timestamp with time zone,
    composite_risk_score numeric(5,4) NOT NULL,
    composite_risk_level text NOT NULL,
    composite_risk_confidence numeric(5,4) NOT NULL,
    discount_rate_calculated numeric(8,4) NOT NULL,
    discount_rate_previous numeric(8,4),
    discount_rate_change numeric(8,4),
    discount_rate_reason text,
    recommendations text[] DEFAULT '{}'::text[] NOT NULL,
    alerts jsonb DEFAULT '[]'::jsonb NOT NULL,
    next_review_date timestamp with time zone NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    project_id uuid,
    market_adjustments jsonb DEFAULT '{}'::jsonb,
    user_data_sources jsonb DEFAULT '[]'::jsonb,
    data_completeness character varying(20) DEFAULT 'basic'::character varying,
    methodology_used text,
    factors_considered jsonb DEFAULT '[]'::jsonb,
    policy_impact_assessment jsonb DEFAULT '[]'::jsonb,
    calculation_date timestamp with time zone DEFAULT now(),
    CONSTRAINT climate_risk_calculations_composite_risk_confidence_check CHECK (((composite_risk_confidence >= (0)::numeric) AND (composite_risk_confidence <= (1)::numeric))),
    CONSTRAINT climate_risk_calculations_composite_risk_level_check CHECK ((composite_risk_level = ANY (ARRAY['LOW'::text, 'MEDIUM'::text, 'HIGH'::text, 'CRITICAL'::text]))),
    CONSTRAINT climate_risk_calculations_composite_risk_score_check CHECK (((composite_risk_score >= (0)::numeric) AND (composite_risk_score <= (1)::numeric))),
    CONSTRAINT climate_risk_calculations_credit_risk_confidence_check CHECK (((credit_risk_confidence >= (0)::numeric) AND (credit_risk_confidence <= (1)::numeric))),
    CONSTRAINT climate_risk_calculations_credit_risk_score_check CHECK (((credit_risk_score >= (0)::numeric) AND (credit_risk_score <= (1)::numeric))),
    CONSTRAINT climate_risk_calculations_data_completeness_check CHECK (((data_completeness)::text = ANY ((ARRAY['basic'::character varying, 'enhanced'::character varying, 'comprehensive'::character varying])::text[]))),
    CONSTRAINT climate_risk_calculations_policy_risk_confidence_check CHECK (((policy_risk_confidence >= (0)::numeric) AND (policy_risk_confidence <= (1)::numeric))),
    CONSTRAINT climate_risk_calculations_policy_risk_score_check CHECK (((policy_risk_score >= (0)::numeric) AND (policy_risk_score <= (1)::numeric))),
    CONSTRAINT climate_risk_calculations_production_risk_confidence_check CHECK (((production_risk_confidence >= (0)::numeric) AND (production_risk_confidence <= (1)::numeric))),
    CONSTRAINT climate_risk_calculations_production_risk_score_check CHECK (((production_risk_score >= (0)::numeric) AND (production_risk_score <= (1)::numeric)))
);


--
-- Name: TABLE climate_risk_calculations; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.climate_risk_calculations IS 'Automated risk calculation results for climate receivables including production, credit, and policy risk components. Access controlled by authentication status.';


--
-- Name: climate_risk_factors; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.climate_risk_factors (
    factor_id uuid DEFAULT gen_random_uuid() NOT NULL,
    receivable_id uuid,
    production_risk numeric(5,2),
    credit_risk numeric(5,2),
    policy_risk numeric(5,2),
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    project_id uuid
);


--
-- Name: token_climate_properties; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_climate_properties (
    token_id uuid NOT NULL,
    pool_id uuid,
    average_risk_score numeric(5,2),
    discounted_value numeric(15,2),
    discount_amount numeric(15,2),
    average_discount_rate numeric(5,2),
    security_interest_details text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    project_id uuid
);


--
-- Name: tokens; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.tokens (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    project_id uuid NOT NULL,
    name text NOT NULL,
    symbol text NOT NULL,
    decimals integer DEFAULT 18 NOT NULL,
    standard public.token_standard_enum NOT NULL,
    blocks jsonb NOT NULL,
    metadata jsonb,
    status public.token_status_enum DEFAULT 'DRAFT'::public.token_status_enum NOT NULL,
    reviewers text[] DEFAULT '{}'::text[],
    approvals text[] DEFAULT '{}'::text[],
    contract_preview text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    total_supply text,
    config_mode public.token_config_mode_enum DEFAULT 'min'::public.token_config_mode_enum,
    address character varying(255),
    blockchain character varying(100),
    deployment_status character varying(50) DEFAULT 'pending'::character varying,
    deployment_timestamp timestamp without time zone,
    deployment_transaction character varying(255),
    deployment_error text,
    deployed_by uuid,
    deployment_environment character varying(50),
    description text
);


--
-- Name: COLUMN tokens.config_mode; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.tokens.config_mode IS 'Indicates if token uses minimal or maximal configuration (values: min, max)';


--
-- Name: climate_token_summary; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.climate_token_summary AS
 SELECT t.id AS token_id,
    t.name,
    t.symbol,
    t.project_id,
    t.status,
    tcp.pool_id,
    ctp.name AS pool_name,
    t.total_supply,
    tcp.average_risk_score,
    tcp.discounted_value,
    tcp.discount_amount,
    tcp.average_discount_rate,
    ctp.risk_profile
   FROM ((public.tokens t
     JOIN public.token_climate_properties tcp ON ((t.id = tcp.token_id)))
     JOIN public.climate_tokenization_pools ctp ON ((tcp.pool_id = ctp.pool_id)));


--
-- Name: climate_user_data_cache; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.climate_user_data_cache (
    cache_id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    source_id uuid,
    entity_id character varying(255) NOT NULL,
    data_type character varying(50) NOT NULL,
    processed_data jsonb NOT NULL,
    extracted_at timestamp with time zone DEFAULT now(),
    expires_at timestamp with time zone NOT NULL,
    data_quality_score numeric(3,2) DEFAULT 0.5,
    created_at timestamp with time zone DEFAULT now(),
    CONSTRAINT climate_user_data_cache_data_quality_score_check CHECK (((data_quality_score >= (0)::numeric) AND (data_quality_score <= 1.0))),
    CONSTRAINT climate_user_data_cache_data_type_check CHECK (((data_type)::text = ANY ((ARRAY['credit_score'::character varying, 'financial_metrics'::character varying, 'payment_history'::character varying])::text[])))
);


--
-- Name: TABLE climate_user_data_cache; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.climate_user_data_cache IS 'Processed and cached data extracted from user uploads';


--
-- Name: climate_user_data_sources; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.climate_user_data_sources (
    source_id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    user_id uuid,
    project_id uuid,
    source_name character varying(255) NOT NULL,
    source_type character varying(50) NOT NULL,
    data_format character varying(20) NOT NULL,
    file_path text NOT NULL,
    file_size bigint NOT NULL,
    data_schema jsonb DEFAULT '{}'::jsonb,
    upload_date timestamp with time zone DEFAULT now(),
    last_processed timestamp with time zone,
    processing_status character varying(20) DEFAULT 'pending'::character varying,
    validation_errors jsonb DEFAULT '[]'::jsonb,
    refresh_frequency character varying(20) DEFAULT 'manual'::character varying,
    is_active boolean DEFAULT true,
    metadata jsonb DEFAULT '{}'::jsonb,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT climate_user_data_sources_data_format_check CHECK (((data_format)::text = ANY ((ARRAY['csv'::character varying, 'xlsx'::character varying, 'json'::character varying, 'xml'::character varying, 'pdf'::character varying])::text[]))),
    CONSTRAINT climate_user_data_sources_file_size_check CHECK ((file_size > 0)),
    CONSTRAINT climate_user_data_sources_processing_status_check CHECK (((processing_status)::text = ANY ((ARRAY['pending'::character varying, 'processing'::character varying, 'completed'::character varying, 'error'::character varying])::text[]))),
    CONSTRAINT climate_user_data_sources_refresh_frequency_check CHECK (((refresh_frequency)::text = ANY ((ARRAY['manual'::character varying, 'daily'::character varying, 'weekly'::character varying, 'monthly'::character varying])::text[]))),
    CONSTRAINT climate_user_data_sources_source_type_check CHECK (((source_type)::text = ANY ((ARRAY['credit_report'::character varying, 'financial_statement'::character varying, 'market_data'::character varying, 'custom'::character varying])::text[])))
);


--
-- Name: TABLE climate_user_data_sources; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.climate_user_data_sources IS 'User-uploaded data sources for enhanced risk assessment';


--
-- Name: collectibles_products; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.collectibles_products (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    project_id uuid NOT NULL,
    asset_id character varying(50),
    asset_type character varying(100),
    description text,
    acquisition_date timestamp with time zone,
    purchase_price numeric,
    current_value numeric,
    condition character varying(50),
    location text,
    owner text,
    insurance_details numeric,
    appraisal_date timestamp with time zone,
    sale_date timestamp with time zone,
    sale_price numeric,
    status character varying(50),
    target_raise numeric,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: commodities_products; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.commodities_products (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    project_id uuid NOT NULL,
    commodity_id character varying(20),
    commodity_name text,
    commodity_type character varying(50),
    unit_of_measure character varying(50),
    contract_size numeric,
    grade_quality text,
    exchange character varying(50),
    delivery_months text[],
    liquidity_metric numeric,
    currency character varying(10),
    contract_issue_date timestamp with time zone,
    expiration_date timestamp with time zone,
    status character varying(50),
    roll_history jsonb,
    storage_delivery_costs numeric,
    production_inventory_levels jsonb,
    target_raise numeric,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: compliance_checks; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.compliance_checks (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    investor_id uuid NOT NULL,
    project_id uuid NOT NULL,
    risk_level text NOT NULL,
    risk_reason text NOT NULL,
    status text NOT NULL,
    reviewed_by uuid,
    reviewed_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT compliance_checks_risk_level_check CHECK ((risk_level = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text]))),
    CONSTRAINT compliance_checks_status_check CHECK ((status = ANY (ARRAY['pending_approval'::text, 'approved'::text, 'rejected'::text])))
);


--
-- Name: compliance_reports; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.compliance_reports (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    issuer_id uuid NOT NULL,
    generated_at timestamp with time zone DEFAULT now() NOT NULL,
    status public.compliance_status DEFAULT 'pending_review'::public.compliance_status NOT NULL,
    findings jsonb DEFAULT '[]'::jsonb NOT NULL,
    metadata jsonb DEFAULT '{}'::jsonb NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    created_by uuid NOT NULL,
    updated_by uuid NOT NULL
);


--
-- Name: compliance_settings; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.compliance_settings (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    organization_id text NOT NULL,
    kyc_status text DEFAULT 'not_started'::text NOT NULL,
    require_accreditation boolean DEFAULT false NOT NULL,
    minimum_investment integer DEFAULT 0 NOT NULL,
    jurisdictions text[] DEFAULT '{}'::text[],
    investor_count integer DEFAULT 0 NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);


--
-- Name: consensus_settings; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.consensus_settings (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    consensus_type text NOT NULL,
    required_approvals integer NOT NULL,
    eligible_roles text[] NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);


--
-- Name: credential_usage_logs; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.credential_usage_logs (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    credential_id uuid NOT NULL,
    action_type text NOT NULL,
    action_details jsonb,
    performed_by uuid,
    performed_at timestamp with time zone DEFAULT now(),
    ip_address text,
    user_agent text
);


--
-- Name: data_source_mappings; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.data_source_mappings (
    mapping_id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    source_id uuid,
    source_field character varying(255) NOT NULL,
    target_field character varying(255) NOT NULL,
    data_transform text DEFAULT ''::text,
    validation_rules jsonb DEFAULT '{}'::jsonb,
    created_at timestamp with time zone DEFAULT now()
);


--
-- Name: TABLE data_source_mappings; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.data_source_mappings IS 'Field mappings for standardizing user uploaded data';


--
-- Name: database_audit_coverage; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.database_audit_coverage AS
 WITH all_tables AS (
         SELECT tables.table_name
           FROM information_schema.tables
          WHERE (((tables.table_schema)::name = 'public'::name) AND ((tables.table_type)::text = 'BASE TABLE'::text))
        ), audited_tables AS (
         SELECT DISTINCT audit_logs.entity_type AS table_name
           FROM public.audit_logs
          WHERE ((audit_logs."timestamp" >= (now() - '7 days'::interval)) AND (audit_logs.entity_type IS NOT NULL))
        )
 SELECT at.table_name,
        CASE
            WHEN (aud.table_name IS NOT NULL) THEN true
            ELSE false
        END AS has_recent_audit,
    COALESCE(al.event_count, (0)::bigint) AS recent_event_count,
    COALESCE(al.last_event, NULL::timestamp with time zone) AS last_audit_event
   FROM ((all_tables at
     LEFT JOIN audited_tables aud ON (((at.table_name)::name = aud.table_name)))
     LEFT JOIN ( SELECT audit_logs.entity_type,
            count(*) AS event_count,
            max(audit_logs."timestamp") AS last_event
           FROM public.audit_logs
          WHERE (audit_logs."timestamp" >= (now() - '7 days'::interval))
          GROUP BY audit_logs.entity_type) al ON (((at.table_name)::name = al.entity_type)))
  ORDER BY COALESCE(al.event_count, (0)::bigint) DESC, at.table_name;


--
-- Name: VIEW database_audit_coverage; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON VIEW public.database_audit_coverage IS 'Shows audit coverage across all database tables';


--
-- Name: deployment_rate_limits; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.deployment_rate_limits (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    user_id uuid NOT NULL,
    project_id uuid NOT NULL,
    token_id uuid NOT NULL,
    started_at timestamp with time zone DEFAULT now() NOT NULL,
    completed_at timestamp with time zone,
    status text NOT NULL,
    network text,
    environment text,
    CONSTRAINT deployment_rate_limits_status_check CHECK ((status = ANY (ARRAY['started'::text, 'completed'::text, 'failed'::text])))
);


--
-- Name: dfns_activity_logs; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_activity_logs (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    activity_type text NOT NULL,
    entity_id text NOT NULL,
    entity_type text NOT NULL,
    description text NOT NULL,
    user_id text,
    status text NOT NULL,
    metadata jsonb,
    ip_address inet,
    user_agent text,
    organization_id text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT dfns_activity_logs_status_check CHECK ((status = ANY (ARRAY['success'::text, 'failed'::text, 'pending'::text])))
);


--
-- Name: dfns_api_requests; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_api_requests (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    endpoint text NOT NULL,
    method text NOT NULL,
    request_id text,
    request_body jsonb,
    response_body jsonb,
    status_code integer NOT NULL,
    response_time_ms integer,
    error_message text,
    user_id text,
    organization_id text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: dfns_applications; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_applications (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    app_id text NOT NULL,
    name text NOT NULL,
    description text,
    kind text NOT NULL,
    origin text,
    relying_party text,
    status text DEFAULT 'Active'::text NOT NULL,
    external_id text,
    logo_url text,
    terms_of_service_url text,
    privacy_policy_url text,
    organization_id text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT dfns_applications_kind_check CHECK ((kind = ANY (ARRAY['ClientSide'::text, 'ServerSide'::text]))),
    CONSTRAINT dfns_applications_status_check CHECK ((status = ANY (ARRAY['Active'::text, 'Inactive'::text, 'Archived'::text])))
);


--
-- Name: dfns_authentication_challenges; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_authentication_challenges (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    challenge_id text NOT NULL,
    user_id text NOT NULL,
    challenge_data jsonb NOT NULL,
    status text DEFAULT 'pending'::text NOT NULL,
    expires_at timestamp with time zone NOT NULL,
    completed_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT dfns_authentication_challenges_status_check CHECK ((status = ANY (ARRAY['pending'::text, 'completed'::text, 'expired'::text, 'failed'::text])))
);


--
-- Name: TABLE dfns_authentication_challenges; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.dfns_authentication_challenges IS 'Stores authentication challenges for DFNS login flows';


--
-- Name: dfns_broadcast_transactions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_broadcast_transactions (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    broadcast_id text NOT NULL,
    wallet_id text,
    kind text NOT NULL,
    transaction text NOT NULL,
    external_id text,
    status text DEFAULT 'Pending'::text NOT NULL,
    tx_hash text,
    date_created timestamp with time zone DEFAULT now() NOT NULL,
    date_broadcast timestamp with time zone,
    date_confirmed timestamp with time zone,
    error_message text,
    dfns_broadcast_id text NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT dfns_broadcast_transactions_status_check CHECK ((status = ANY (ARRAY['Pending'::text, 'Broadcasted'::text, 'Confirmed'::text, 'Failed'::text, 'Cancelled'::text])))
);


--
-- Name: dfns_credential_challenges; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_credential_challenges (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    challenge_id text NOT NULL,
    user_id text NOT NULL,
    credential_type text NOT NULL,
    challenge_data jsonb NOT NULL,
    status text DEFAULT 'pending'::text NOT NULL,
    expires_at timestamp with time zone NOT NULL,
    completed_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT dfns_credential_challenges_credential_type_check CHECK ((credential_type = ANY (ARRAY['webauthn'::text, 'passkey'::text, 'private_key'::text]))),
    CONSTRAINT dfns_credential_challenges_status_check CHECK ((status = ANY (ARRAY['pending'::text, 'completed'::text, 'expired'::text, 'failed'::text])))
);


--
-- Name: TABLE dfns_credential_challenges; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.dfns_credential_challenges IS 'Stores challenges for DFNS credential creation (WebAuthn/Passkeys)';


--
-- Name: dfns_credentials; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_credentials (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    credential_id text NOT NULL,
    user_id uuid,
    name text,
    kind text NOT NULL,
    status text DEFAULT 'Active'::text NOT NULL,
    public_key text NOT NULL,
    algorithm text NOT NULL,
    attestation_type text,
    authenticator_info jsonb,
    enrolled_at timestamp with time zone DEFAULT now() NOT NULL,
    last_used_at timestamp with time zone,
    dfns_credential_id text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT dfns_credentials_kind_check CHECK ((kind = ANY (ARRAY['Fido2'::text, 'Key'::text, 'Password'::text, 'RecoveryKey'::text]))),
    CONSTRAINT dfns_credentials_status_check CHECK ((status = ANY (ARRAY['Active'::text, 'Inactive'::text])))
);


--
-- Name: dfns_exchange_accounts; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_exchange_accounts (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    account_id text NOT NULL,
    exchange_integration_id text,
    account_type text NOT NULL,
    trading_enabled boolean DEFAULT false,
    withdrawal_enabled boolean DEFAULT false,
    last_updated timestamp with time zone DEFAULT now(),
    dfns_account_id text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: dfns_exchange_balances; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_exchange_balances (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    account_id text,
    asset text NOT NULL,
    total text DEFAULT '0'::text NOT NULL,
    available text DEFAULT '0'::text NOT NULL,
    locked text DEFAULT '0'::text NOT NULL,
    last_updated timestamp with time zone DEFAULT now(),
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: dfns_exchange_integrations; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_exchange_integrations (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    integration_id text NOT NULL,
    name text NOT NULL,
    exchange_kind text NOT NULL,
    credentials jsonb NOT NULL,
    status text DEFAULT 'Active'::text NOT NULL,
    config jsonb,
    last_sync_at timestamp with time zone,
    organization_id text,
    dfns_exchange_id text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT dfns_exchange_integrations_exchange_kind_check CHECK ((exchange_kind = ANY (ARRAY['Kraken'::text, 'Binance'::text, 'CoinbasePrime'::text]))),
    CONSTRAINT dfns_exchange_integrations_status_check CHECK ((status = ANY (ARRAY['Active'::text, 'Inactive'::text, 'Error'::text])))
);


--
-- Name: dfns_fee_sponsors; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_fee_sponsors (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    sponsor_id text NOT NULL,
    name text NOT NULL,
    sponsor_address text NOT NULL,
    network text NOT NULL,
    status text DEFAULT 'Active'::text NOT NULL,
    balance text DEFAULT '0'::text NOT NULL,
    spent_amount text DEFAULT '0'::text NOT NULL,
    transaction_count integer DEFAULT 0,
    external_id text,
    organization_id text,
    dfns_sponsor_id text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT dfns_fee_sponsors_status_check CHECK ((status = ANY (ARRAY['Active'::text, 'Inactive'::text, 'Depleted'::text])))
);


--
-- Name: dfns_fiat_activity_logs; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_fiat_activity_logs (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    transaction_id uuid NOT NULL,
    activity_type text NOT NULL,
    status text NOT NULL,
    description text,
    provider_data jsonb,
    error_details jsonb,
    created_at timestamp with time zone DEFAULT now()
);


--
-- Name: TABLE dfns_fiat_activity_logs; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.dfns_fiat_activity_logs IS 'Activity logs for fiat transaction tracking';


--
-- Name: dfns_fiat_provider_configs; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_fiat_provider_configs (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    provider text NOT NULL,
    configuration jsonb NOT NULL,
    is_enabled boolean DEFAULT true,
    supported_currencies text[] DEFAULT '{}'::text[],
    supported_payment_methods text[] DEFAULT '{}'::text[],
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT dfns_fiat_provider_configs_provider_check CHECK ((provider = ANY (ARRAY['ramp_network'::text, 'mt_pelerin'::text])))
);


--
-- Name: TABLE dfns_fiat_provider_configs; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.dfns_fiat_provider_configs IS 'Configuration for fiat service providers';


--
-- Name: dfns_fiat_quotes; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_fiat_quotes (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    provider text NOT NULL,
    type text NOT NULL,
    from_amount numeric(20,8) NOT NULL,
    from_currency text NOT NULL,
    to_amount numeric(20,8) NOT NULL,
    to_currency text NOT NULL,
    exchange_rate numeric(20,8) NOT NULL,
    fees jsonb NOT NULL,
    payment_method text NOT NULL,
    estimated_processing_time text,
    expires_at timestamp with time zone NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    CONSTRAINT dfns_fiat_quotes_provider_check CHECK ((provider = ANY (ARRAY['ramp_network'::text, 'mt_pelerin'::text]))),
    CONSTRAINT dfns_fiat_quotes_type_check CHECK ((type = ANY (ARRAY['onramp'::text, 'offramp'::text])))
);


--
-- Name: TABLE dfns_fiat_quotes; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.dfns_fiat_quotes IS 'Stores temporary fiat conversion quotes with expiration';


--
-- Name: dfns_fiat_transactions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_fiat_transactions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    provider text NOT NULL,
    provider_transaction_id text NOT NULL,
    type text NOT NULL,
    status text NOT NULL,
    amount numeric(20,8) NOT NULL,
    currency text NOT NULL,
    crypto_asset text NOT NULL,
    wallet_address text NOT NULL,
    wallet_id uuid,
    payment_method text,
    bank_account jsonb,
    payment_url text,
    withdrawal_address text,
    tx_hash text,
    exchange_rate jsonb,
    fees jsonb,
    estimated_completion_time text,
    expires_at timestamp with time zone,
    metadata jsonb DEFAULT '{}'::jsonb,
    user_id uuid,
    project_id uuid,
    organization_id uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT dfns_fiat_transactions_amount_check CHECK ((amount > (0)::numeric)),
    CONSTRAINT dfns_fiat_transactions_provider_check CHECK ((provider = ANY (ARRAY['ramp_network'::text, 'mt_pelerin'::text]))),
    CONSTRAINT dfns_fiat_transactions_status_check CHECK ((status = ANY (ARRAY['pending'::text, 'processing'::text, 'waiting_for_payment'::text, 'payment_received'::text, 'completed'::text, 'failed'::text, 'cancelled'::text, 'expired'::text]))),
    CONSTRAINT dfns_fiat_transactions_type_check CHECK ((type = ANY (ARRAY['onramp'::text, 'offramp'::text])))
);


--
-- Name: TABLE dfns_fiat_transactions; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.dfns_fiat_transactions IS 'Stores fiat on/off-ramp transactions through DFNS providers';


--
-- Name: COLUMN dfns_fiat_transactions.provider; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.dfns_fiat_transactions.provider IS 'Fiat service provider (ramp_network, mt_pelerin)';


--
-- Name: COLUMN dfns_fiat_transactions.type; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.dfns_fiat_transactions.type IS 'Transaction type (onramp = fiat→crypto, offramp = crypto→fiat)';


--
-- Name: COLUMN dfns_fiat_transactions.status; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.dfns_fiat_transactions.status IS 'Current transaction status';


--
-- Name: COLUMN dfns_fiat_transactions.bank_account; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.dfns_fiat_transactions.bank_account IS 'Bank account information for off-ramp transactions';


--
-- Name: COLUMN dfns_fiat_transactions.payment_url; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.dfns_fiat_transactions.payment_url IS 'Provider payment URL for completing on-ramp transactions';


--
-- Name: COLUMN dfns_fiat_transactions.withdrawal_address; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.dfns_fiat_transactions.withdrawal_address IS 'Provider address for sending crypto in off-ramp transactions';


--
-- Name: COLUMN dfns_fiat_transactions.exchange_rate; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.dfns_fiat_transactions.exchange_rate IS 'Exchange rate information including rate, timestamp, and provider';


--
-- Name: COLUMN dfns_fiat_transactions.fees; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.dfns_fiat_transactions.fees IS 'Fee breakdown including provider fees, network fees, and total';


--
-- Name: dfns_permission_assignments; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_permission_assignments (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    permission_id text,
    identity_id text NOT NULL,
    identity_kind text NOT NULL,
    assigned_by text NOT NULL,
    assigned_at timestamp with time zone DEFAULT now() NOT NULL,
    organization_id text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT dfns_permission_assignments_identity_kind_check CHECK ((identity_kind = ANY (ARRAY['User'::text, 'ServiceAccount'::text, 'PersonalAccessToken'::text])))
);


--
-- Name: dfns_permissions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_permissions (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    permission_id text NOT NULL,
    name text NOT NULL,
    resources text[] NOT NULL,
    operations text[] NOT NULL,
    effect text NOT NULL,
    condition jsonb,
    status text DEFAULT 'Active'::text NOT NULL,
    description text,
    category text,
    organization_id text,
    dfns_permission_id text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT dfns_permissions_effect_check CHECK ((effect = ANY (ARRAY['Allow'::text, 'Deny'::text]))),
    CONSTRAINT dfns_permissions_status_check CHECK ((status = ANY (ARRAY['Active'::text, 'Inactive'::text])))
);


--
-- Name: dfns_personal_access_tokens; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_personal_access_tokens (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    name text NOT NULL,
    status text DEFAULT 'Active'::text NOT NULL,
    expires_at timestamp with time zone,
    last_used_at timestamp with time zone,
    permission_assignments jsonb,
    user_id uuid,
    dfns_token_id text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT dfns_personal_access_tokens_status_check CHECK ((status = ANY (ARRAY['Active'::text, 'Inactive'::text, 'Expired'::text])))
);


--
-- Name: dfns_policies; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_policies (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    policy_id text NOT NULL,
    name text NOT NULL,
    description text,
    rule_legacy jsonb NOT NULL,
    activity_kind text NOT NULL,
    status text DEFAULT 'Active'::text NOT NULL,
    external_id text,
    organization_id text,
    dfns_policy_id text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    rule_kind text,
    rule_configuration jsonb,
    action_kind text,
    action_configuration jsonb,
    filters jsonb,
    metadata jsonb,
    CONSTRAINT dfns_policies_action_kind_check CHECK (((action_kind IS NULL) OR (action_kind = ANY (ARRAY['Block'::text, 'RequestApproval'::text, 'NoAction'::text])))),
    CONSTRAINT dfns_policies_activity_kind_check CHECK ((activity_kind = ANY (ARRAY['Wallets:Sign'::text, 'Wallets:IncomingTransaction'::text, 'Permissions:Assign'::text, 'Permissions:Modify'::text, 'Policies:Modify'::text]))),
    CONSTRAINT dfns_policies_rule_kind_check CHECK (((rule_kind IS NULL) OR (rule_kind = ANY (ARRAY['AlwaysTrigger'::text, 'TransactionAmountLimit'::text, 'TransactionAmountVelocity'::text, 'TransactionCountVelocity'::text, 'TransactionRecipientWhitelist'::text, 'ChainalysisTransactionPrescreening'::text, 'ChainalysisTransactionScreening'::text])))),
    CONSTRAINT dfns_policies_status_check CHECK ((status = ANY (ARRAY['Active'::text, 'Archived'::text])))
);


--
-- Name: TABLE dfns_policies; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.dfns_policies IS 'DFNS Policy Engine policies with rules, actions, and filters (enhanced from existing table)';


--
-- Name: dfns_policy_approval_decisions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_policy_approval_decisions (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    approval_id uuid,
    dfns_approval_id text NOT NULL,
    user_id text NOT NULL,
    decision_value text NOT NULL,
    reason text,
    date_actioned timestamp with time zone DEFAULT now(),
    organization_id text,
    created_at timestamp with time zone DEFAULT now(),
    CONSTRAINT dfns_policy_approval_decisions_decision_value_check CHECK ((decision_value = ANY (ARRAY['Approved'::text, 'Denied'::text])))
);


--
-- Name: TABLE dfns_policy_approval_decisions; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.dfns_policy_approval_decisions IS 'Individual approval/denial decisions by users';


--
-- Name: dfns_policy_approval_groups; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_policy_approval_groups (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    policy_id uuid,
    dfns_policy_id text NOT NULL,
    group_name text,
    quorum integer DEFAULT 1 NOT NULL,
    approvers jsonb NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: TABLE dfns_policy_approval_groups; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.dfns_policy_approval_groups IS 'Approval groups for RequestApproval policy actions';


--
-- Name: dfns_policy_approvals; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_policy_approvals (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    approval_id text NOT NULL,
    activity_id text NOT NULL,
    policy_id text,
    status text DEFAULT 'Pending'::text NOT NULL,
    reason text,
    approved_by text,
    approved_at timestamp with time zone,
    rejected_by text,
    rejected_at timestamp with time zone,
    metadata jsonb,
    organization_id text,
    dfns_approval_id text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    dfns_policy_id text,
    initiator_id text,
    expiration_date timestamp with time zone,
    activity_details jsonb,
    evaluated_policies jsonb,
    CONSTRAINT dfns_policy_approvals_status_check CHECK ((status = ANY (ARRAY['Pending'::text, 'Approved'::text, 'Denied'::text, 'AutoApproved'::text, 'Expired'::text])))
);


--
-- Name: TABLE dfns_policy_approvals; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.dfns_policy_approvals IS 'DFNS approval processes (enhanced from existing table)';


--
-- Name: dfns_policy_change_requests; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_policy_change_requests (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    dfns_change_request_id text NOT NULL,
    kind text DEFAULT 'Policy'::text NOT NULL,
    operation_kind text NOT NULL,
    status text DEFAULT 'Pending'::text NOT NULL,
    requester_user_id text NOT NULL,
    entity_id text NOT NULL,
    dfns_approval_id text,
    request_body jsonb NOT NULL,
    organization_id text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT dfns_policy_change_requests_operation_kind_check CHECK ((operation_kind = ANY (ARRAY['Update'::text, 'Archive'::text]))),
    CONSTRAINT dfns_policy_change_requests_status_check CHECK ((status = ANY (ARRAY['Pending'::text, 'Approved'::text, 'Denied'::text, 'Executed'::text])))
);


--
-- Name: TABLE dfns_policy_change_requests; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.dfns_policy_change_requests IS 'Policy modification requests requiring approval';


--
-- Name: dfns_policy_evaluations; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_policy_evaluations (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    dfns_policy_id text NOT NULL,
    activity_id text NOT NULL,
    trigger_status text NOT NULL,
    reason text,
    evaluation_timestamp timestamp with time zone DEFAULT now(),
    activity_kind text NOT NULL,
    activity_details jsonb,
    organization_id text,
    created_at timestamp with time zone DEFAULT now(),
    CONSTRAINT dfns_policy_evaluations_trigger_status_check CHECK ((trigger_status = ANY (ARRAY['Triggered'::text, 'Skipped'::text])))
);


--
-- Name: TABLE dfns_policy_evaluations; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.dfns_policy_evaluations IS 'History of policy evaluations and triggers';


--
-- Name: dfns_service_accounts; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_service_accounts (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    name text NOT NULL,
    status text DEFAULT 'Active'::text NOT NULL,
    external_id text,
    public_key text,
    permission_assignments jsonb,
    organization_id text,
    dfns_service_account_id text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT dfns_service_accounts_status_check CHECK ((status = ANY (ARRAY['Active'::text, 'Inactive'::text])))
);


--
-- Name: dfns_signatures; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_signatures (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    signature_id text NOT NULL,
    key_id text,
    kind text NOT NULL,
    message text NOT NULL,
    external_id text,
    status text DEFAULT 'Pending'::text NOT NULL,
    signature text,
    public_key text NOT NULL,
    date_created timestamp with time zone DEFAULT now() NOT NULL,
    date_completed timestamp with time zone,
    error_message text,
    dfns_signature_id text NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT dfns_signatures_status_check CHECK ((status = ANY (ARRAY['Pending'::text, 'Signed'::text, 'Failed'::text, 'Cancelled'::text])))
);


--
-- Name: dfns_signing_keys; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_signing_keys (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    key_id text NOT NULL,
    public_key text NOT NULL,
    network text NOT NULL,
    curve text NOT NULL,
    scheme text NOT NULL,
    status text DEFAULT 'Active'::text NOT NULL,
    delegated boolean DEFAULT false,
    delegated_to text,
    external_id text,
    tags text[],
    imported boolean DEFAULT false,
    exported boolean DEFAULT false,
    date_exported timestamp with time zone,
    organization_id text,
    dfns_key_id text NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT dfns_signing_keys_curve_check CHECK ((curve = ANY (ARRAY['ed25519'::text, 'secp256k1'::text, 'secp256r1'::text]))),
    CONSTRAINT dfns_signing_keys_scheme_check CHECK ((scheme = ANY (ARRAY['EdDSA'::text, 'ECDSA'::text]))),
    CONSTRAINT dfns_signing_keys_status_check CHECK ((status = ANY (ARRAY['Active'::text, 'Inactive'::text])))
);


--
-- Name: dfns_sponsored_fees; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_sponsored_fees (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    sponsored_fee_id text NOT NULL,
    fee_sponsor_id text,
    wallet_id text,
    tx_hash text NOT NULL,
    amount text NOT NULL,
    asset text NOT NULL,
    status text DEFAULT 'Pending'::text NOT NULL,
    sponsored_at timestamp with time zone DEFAULT now() NOT NULL,
    error_message text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT dfns_sponsored_fees_status_check CHECK ((status = ANY (ARRAY['Pending'::text, 'Sponsored'::text, 'Failed'::text])))
);


--
-- Name: dfns_staking_integrations; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_staking_integrations (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    staking_id text NOT NULL,
    wallet_id text,
    network text NOT NULL,
    validator_address text,
    delegation_amount text DEFAULT '0'::text NOT NULL,
    status text NOT NULL,
    total_rewards text DEFAULT '0'::text NOT NULL,
    pending_rewards text DEFAULT '0'::text NOT NULL,
    claimed_rewards text DEFAULT '0'::text NOT NULL,
    last_reward_at timestamp with time zone,
    last_claim_at timestamp with time zone,
    apr text,
    unstaking_period text,
    dfns_staking_id text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT dfns_staking_integrations_status_check CHECK ((status = ANY (ARRAY['Delegated'::text, 'Undelegating'::text, 'Undelegated'::text, 'Slashed'::text])))
);


--
-- Name: dfns_sync_status; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_sync_status (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    entity_type text NOT NULL,
    entity_id text,
    last_sync_at timestamp with time zone DEFAULT now() NOT NULL,
    sync_status text NOT NULL,
    error_message text,
    next_sync_at timestamp with time zone,
    organization_id text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT dfns_sync_status_sync_status_check CHECK ((sync_status = ANY (ARRAY['success'::text, 'failed'::text, 'in_progress'::text])))
);


--
-- Name: dfns_transaction_history; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_transaction_history (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    wallet_id text,
    tx_hash text NOT NULL,
    direction text NOT NULL,
    status text NOT NULL,
    asset_symbol text NOT NULL,
    asset_name text,
    contract_address text,
    amount text NOT NULL,
    fee text,
    to_address text,
    from_address text,
    block_number bigint,
    block_hash text,
    "timestamp" timestamp with time zone NOT NULL,
    metadata jsonb,
    last_updated timestamp with time zone DEFAULT now(),
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT dfns_transaction_history_direction_check CHECK ((direction = ANY (ARRAY['Incoming'::text, 'Outgoing'::text]))),
    CONSTRAINT dfns_transaction_history_status_check CHECK ((status = ANY (ARRAY['Pending'::text, 'Confirmed'::text, 'Failed'::text, 'Cancelled'::text])))
);


--
-- Name: dfns_transfers; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_transfers (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    transfer_id text NOT NULL,
    wallet_id text,
    to_address text NOT NULL,
    amount text NOT NULL,
    asset text,
    memo text,
    external_id text,
    nonce integer,
    gas_limit text,
    gas_price text,
    max_fee_per_gas text,
    max_priority_fee_per_gas text,
    status text DEFAULT 'Pending'::text NOT NULL,
    tx_hash text,
    fee text,
    date_created timestamp with time zone DEFAULT now() NOT NULL,
    date_broadcast timestamp with time zone,
    date_confirmed timestamp with time zone,
    estimated_confirmation_time text,
    error_message text,
    dfns_transfer_id text NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT dfns_transfers_status_check CHECK ((status = ANY (ARRAY['Pending'::text, 'Broadcasted'::text, 'Confirmed'::text, 'Failed'::text, 'Cancelled'::text])))
);


--
-- Name: dfns_user_action_challenges; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_user_action_challenges (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    challenge_id text NOT NULL,
    user_id text NOT NULL,
    action_type text NOT NULL,
    action_data jsonb NOT NULL,
    challenge text NOT NULL,
    signature text,
    signing_method text,
    credential_id text,
    status text DEFAULT 'pending'::text NOT NULL,
    expires_at timestamp with time zone NOT NULL,
    verified_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT dfns_user_action_challenges_action_type_check CHECK ((action_type = ANY (ARRAY['CreateWallet'::text, 'Transfer'::text, 'UpdatePolicy'::text, 'CreateCredential'::text]))),
    CONSTRAINT dfns_user_action_challenges_signing_method_check CHECK ((signing_method = ANY (ARRAY['private_key'::text, 'webauthn'::text, 'passkey'::text]))),
    CONSTRAINT dfns_user_action_challenges_status_check CHECK ((status = ANY (ARRAY['pending'::text, 'verified'::text, 'failed'::text, 'expired'::text])))
);


--
-- Name: TABLE dfns_user_action_challenges; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.dfns_user_action_challenges IS 'Stores cryptographic challenges for DFNS user actions requiring signatures';


--
-- Name: dfns_user_sessions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_user_sessions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    session_id text NOT NULL,
    user_id text NOT NULL,
    access_token text NOT NULL,
    refresh_token text NOT NULL,
    expires_at timestamp with time zone NOT NULL,
    remember_me boolean DEFAULT false NOT NULL,
    status text DEFAULT 'active'::text NOT NULL,
    logged_out_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT dfns_user_sessions_status_check CHECK ((status = ANY (ARRAY['active'::text, 'expired'::text, 'logged_out'::text, 'revoked'::text])))
);


--
-- Name: TABLE dfns_user_sessions; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.dfns_user_sessions IS 'Stores active DFNS user sessions with access/refresh tokens';


--
-- Name: dfns_users; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_users (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    username text NOT NULL,
    email text,
    status text DEFAULT 'Active'::text NOT NULL,
    kind text NOT NULL,
    external_id text,
    public_key text,
    recovery_setup boolean DEFAULT false,
    mfa_enabled boolean DEFAULT false,
    last_login_at timestamp with time zone,
    registered_at timestamp with time zone DEFAULT now() NOT NULL,
    organization_id text,
    dfns_user_id text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT dfns_users_kind_check CHECK ((kind = ANY (ARRAY['EndUser'::text, 'Employee'::text, 'PatientUser'::text]))),
    CONSTRAINT dfns_users_status_check CHECK ((status = ANY (ARRAY['Active'::text, 'Inactive'::text, 'Pending'::text, 'Suspended'::text])))
);


--
-- Name: dfns_validators; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_validators (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    validator_address text NOT NULL,
    network text NOT NULL,
    name text,
    commission text DEFAULT '0'::text NOT NULL,
    delegated_amount text DEFAULT '0'::text NOT NULL,
    status text NOT NULL,
    apr text,
    uptime text,
    rank integer,
    last_updated timestamp with time zone DEFAULT now(),
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT dfns_validators_status_check CHECK ((status = ANY (ARRAY['Active'::text, 'Inactive'::text, 'Jailed'::text])))
);


--
-- Name: dfns_wallet_balances; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_wallet_balances (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    wallet_id text,
    asset_symbol text NOT NULL,
    asset_name text,
    contract_address text,
    balance text DEFAULT '0'::text NOT NULL,
    value_in_usd text,
    decimals integer DEFAULT 18 NOT NULL,
    verified boolean DEFAULT false,
    native_asset boolean DEFAULT false,
    last_updated timestamp with time zone DEFAULT now(),
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: dfns_wallet_nfts; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_wallet_nfts (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    wallet_id text,
    contract text NOT NULL,
    token_id text NOT NULL,
    collection text,
    name text,
    description text,
    image_url text,
    external_url text,
    attributes jsonb,
    last_updated timestamp with time zone DEFAULT now(),
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: dfns_wallets; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_wallets (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    wallet_id text NOT NULL,
    network text NOT NULL,
    name text,
    address text NOT NULL,
    signing_key_id text,
    custodial boolean DEFAULT true,
    imported boolean DEFAULT false,
    exported boolean DEFAULT false,
    date_exported timestamp with time zone,
    external_id text,
    tags text[],
    status text DEFAULT 'Active'::text NOT NULL,
    delegated boolean DEFAULT false,
    delegated_to text,
    organization_id text,
    project_id uuid,
    investor_id uuid,
    dfns_wallet_id text NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT dfns_wallets_status_check CHECK ((status = ANY (ARRAY['Active'::text, 'Inactive'::text])))
);


--
-- Name: dfns_webhook_deliveries; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_webhook_deliveries (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    delivery_id text NOT NULL,
    webhook_id text,
    event text NOT NULL,
    payload jsonb NOT NULL,
    status text DEFAULT 'Pending'::text NOT NULL,
    response_code integer,
    response_body text,
    attempts integer DEFAULT 0,
    next_retry_at timestamp with time zone,
    delivered_at timestamp with time zone,
    error_message text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT dfns_webhook_deliveries_status_check CHECK ((status = ANY (ARRAY['Pending'::text, 'Delivered'::text, 'Failed'::text, 'Retrying'::text])))
);


--
-- Name: dfns_webhooks; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.dfns_webhooks (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    webhook_id text NOT NULL,
    name text NOT NULL,
    url text NOT NULL,
    description text,
    events text[] NOT NULL,
    status text DEFAULT 'Active'::text NOT NULL,
    secret text,
    headers jsonb,
    external_id text,
    organization_id text,
    dfns_webhook_id text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT dfns_webhooks_status_check CHECK ((status = ANY (ARRAY['Active'::text, 'Inactive'::text])))
);


--
-- Name: digital_tokenised_funds; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.digital_tokenised_funds (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    project_id uuid NOT NULL,
    asset_name character varying(255),
    asset_symbol character varying(50),
    asset_type character varying(100),
    issuer character varying(255),
    blockchain_network character varying(100),
    smart_contract_address character varying(255),
    issuance_date timestamp with time zone,
    total_supply numeric(18,8),
    circulating_supply numeric(18,8),
    peg_value numeric(10,4),
    nav numeric(18,8),
    fractionalization_enabled boolean DEFAULT true,
    management_fee numeric(5,2),
    performance_fee numeric(5,2),
    redemption_terms text,
    compliance_rules text,
    permission_controls text,
    embedded_rights text,
    provenance_history_enabled boolean DEFAULT true,
    status character varying(50),
    target_raise numeric,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: digital_tokenized_fund_products; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.digital_tokenized_fund_products (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    project_id uuid NOT NULL,
    asset_name character varying,
    asset_symbol character varying,
    asset_type character varying,
    issuer character varying,
    blockchain_network character varying,
    smart_contract_address character varying,
    issuance_date timestamp with time zone,
    total_supply numeric,
    circulating_supply numeric,
    nav numeric,
    fractionalization_enabled boolean,
    compliance_rules text,
    permission_controls text,
    embedded_rights text,
    provenance_history_enabled boolean,
    status character varying,
    target_raise numeric,
    token_economics character varying,
    custody_arrangements character varying,
    upgrade_governance character varying,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: distribution_redemptions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.distribution_redemptions (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    distribution_id uuid NOT NULL,
    redemption_request_id uuid NOT NULL,
    amount_redeemed numeric NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now(),
    organization_id uuid,
    project_id uuid,
    CONSTRAINT distribution_redemptions_amount_check CHECK ((amount_redeemed > (0)::numeric))
);


--
-- Name: TABLE distribution_redemptions; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.distribution_redemptions IS 'Tracks which distributions have been included in redemption requests';


--
-- Name: document_approvals; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.document_approvals (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    document_id uuid,
    approver_id uuid,
    status text NOT NULL,
    comments text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT document_approvals_status_check CHECK ((status = ANY (ARRAY['pending'::text, 'approved'::text, 'rejected'::text])))
);


--
-- Name: document_versions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.document_versions (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    document_id uuid,
    version_number integer NOT NULL,
    file_path text,
    file_url text,
    uploaded_by uuid,
    metadata jsonb,
    created_at timestamp with time zone DEFAULT now()
);


--
-- Name: document_workflows; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.document_workflows (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    document_id uuid NOT NULL,
    required_signers uuid[] NOT NULL,
    completed_signers uuid[] DEFAULT '{}'::uuid[] NOT NULL,
    status public.workflow_status DEFAULT 'pending'::public.workflow_status NOT NULL,
    deadline timestamp with time zone,
    metadata jsonb DEFAULT '{}'::jsonb NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    created_by uuid NOT NULL,
    updated_by uuid NOT NULL,
    CONSTRAINT valid_deadline CHECK ((deadline > created_at)),
    CONSTRAINT valid_signers CHECK (((array_length(completed_signers, 1) <= array_length(required_signers, 1)) AND (completed_signers <@ required_signers)))
);


--
-- Name: documents; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.documents (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    name text NOT NULL,
    type text NOT NULL,
    status text DEFAULT 'pending'::text NOT NULL,
    file_path text,
    file_url text,
    entity_id uuid NOT NULL,
    entity_type text NOT NULL,
    metadata jsonb DEFAULT '{}'::jsonb,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    category text,
    project_id uuid,
    uploaded_by uuid,
    expiry_date timestamp with time zone,
    workflow_stage_id text,
    version integer DEFAULT 1
);


--
-- Name: energy_assets; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.energy_assets (
    asset_id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(255) NOT NULL,
    type character varying(50) NOT NULL,
    location character varying(255) NOT NULL,
    capacity numeric(10,2) NOT NULL,
    owner_id uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    lcoe_calculated numeric(10,4),
    lcoe_industry_benchmark numeric(10,4),
    lcoe_competitiveness_ratio numeric(6,4),
    lcoe_last_calculated timestamp with time zone,
    capacity_factor_actual numeric(6,4),
    capacity_factor_theoretical numeric(6,4),
    capacity_factor_industry_avg numeric(6,4),
    capacity_factor_percentile integer,
    capacity_factor_last_calculated timestamp with time zone
);


--
-- Name: COLUMN energy_assets.lcoe_calculated; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.energy_assets.lcoe_calculated IS 'Calculated Levelized Cost of Energy in $/MWh';


--
-- Name: COLUMN energy_assets.capacity_factor_actual; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.energy_assets.capacity_factor_actual IS 'Actual capacity factor (0.20 = 20% efficiency)';


--
-- Name: energy_products; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.energy_products (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    project_id uuid NOT NULL,
    project_identifier character varying(50),
    project_name text,
    project_type character varying(100),
    capacity numeric,
    project_status character varying(50),
    site_id character varying(50),
    site_location text,
    owner text,
    electricity_purchaser text,
    land_type character varying(100),
    expected_online_date timestamp with time zone,
    financial_data jsonb,
    regulatory_compliance text,
    timeline_data jsonb,
    field_service_logs text,
    performance_metrics jsonb,
    receivable_amount numeric,
    decommission_date timestamp with time zone,
    project_capacity_mw numeric,
    power_purchase_agreements text,
    regulatory_approvals text[],
    carbon_offset_potential numeric,
    status character varying(50),
    target_raise numeric,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: equity_products; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.equity_products (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    project_id uuid NOT NULL,
    ticker_symbol character varying(20),
    company_name text,
    exchange character varying(50),
    sector_industry character varying(100),
    market_capitalization numeric,
    authorized_shares integer,
    shares_outstanding numeric,
    dividend_yield numeric,
    earnings_per_share numeric,
    price_earnings_ratio numeric,
    currency character varying(10),
    ipo_date timestamp with time zone,
    delisting_date timestamp with time zone,
    status character varying(50),
    corporate_actions_history jsonb,
    dividend_payment_dates timestamp with time zone[],
    acquisition_disposal_date timestamp with time zone,
    voting_rights character varying(100),
    dividend_policy text,
    dilution_protection text[],
    exit_strategy character varying(100),
    target_raise numeric,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: external_api_cache; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.external_api_cache (
    cache_id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    cache_key character varying(255) NOT NULL,
    data jsonb NOT NULL,
    "timestamp" timestamp with time zone DEFAULT now(),
    expires_at timestamp with time zone NOT NULL,
    api_source character varying(100),
    request_count integer DEFAULT 1,
    last_accessed timestamp with time zone DEFAULT now(),
    created_at timestamp with time zone DEFAULT now()
);


--
-- Name: TABLE external_api_cache; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.external_api_cache IS 'Cache for external API calls used by PayerRiskAssessmentService';


--
-- Name: facet_registry; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.facet_registry (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name text NOT NULL,
    address text NOT NULL,
    version text NOT NULL,
    description text,
    function_selectors text[] DEFAULT '{}'::text[] NOT NULL,
    source_code_hash text NOT NULL,
    audit_report_url text,
    audit_status text DEFAULT 'pending'::text,
    is_active boolean DEFAULT false,
    deployed_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT facet_registry_audit_status_check CHECK ((audit_status = ANY (ARRAY['pending'::text, 'passed'::text, 'failed'::text])))
);


--
-- Name: faucet_requests; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.faucet_requests (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    wallet_address text NOT NULL,
    token_address text,
    amount text NOT NULL,
    network text NOT NULL,
    status text DEFAULT 'PENDING'::text NOT NULL,
    transaction_hash text,
    user_id uuid,
    ip_address text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone,
    CONSTRAINT faucet_requests_status_check CHECK ((status = ANY (ARRAY['PENDING'::text, 'COMPLETED'::text, 'FAILED'::text])))
);


--
-- Name: TABLE faucet_requests; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.faucet_requests IS 'Requests for testnet tokens from the faucet';


--
-- Name: COLUMN faucet_requests.wallet_address; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.faucet_requests.wallet_address IS 'Wallet address that requested tokens';


--
-- Name: COLUMN faucet_requests.token_address; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.faucet_requests.token_address IS 'Address of the token requested (null for native tokens)';


--
-- Name: COLUMN faucet_requests.amount; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.faucet_requests.amount IS 'Amount of tokens requested';


--
-- Name: COLUMN faucet_requests.network; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.faucet_requests.network IS 'Network the tokens were requested on (e.g., sepolia, mumbai)';


--
-- Name: COLUMN faucet_requests.status; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.faucet_requests.status IS 'Status of the request (PENDING, COMPLETED, FAILED)';


--
-- Name: COLUMN faucet_requests.transaction_hash; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.faucet_requests.transaction_hash IS 'Transaction hash for the token transfer';


--
-- Name: COLUMN faucet_requests.user_id; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.faucet_requests.user_id IS 'ID of the user who made the request';


--
-- Name: fiat_quotes; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.fiat_quotes (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    provider text NOT NULL,
    type text NOT NULL,
    from_amount numeric(20,8) NOT NULL,
    from_currency text NOT NULL,
    to_amount numeric(20,8) NOT NULL,
    to_currency text NOT NULL,
    exchange_rate numeric(20,8) NOT NULL,
    fees jsonb NOT NULL,
    payment_method text NOT NULL,
    estimated_processing_time text,
    expires_at timestamp with time zone NOT NULL,
    user_id uuid,
    session_id text,
    converted_to_transaction_id uuid,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT fiat_quotes_provider_check CHECK ((provider = ANY (ARRAY['ramp_network'::text, 'mt_pelerin'::text]))),
    CONSTRAINT fiat_quotes_type_check CHECK ((type = ANY (ARRAY['onramp'::text, 'offramp'::text])))
);


--
-- Name: TABLE fiat_quotes; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.fiat_quotes IS 'Stores fiat transaction quotes with expiration tracking';


--
-- Name: fiat_transactions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.fiat_transactions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    provider text NOT NULL,
    provider_transaction_id text NOT NULL,
    type text NOT NULL,
    status text NOT NULL,
    amount numeric(20,8) NOT NULL,
    currency text NOT NULL,
    crypto_asset text NOT NULL,
    wallet_address text NOT NULL,
    wallet_id uuid,
    payment_method text,
    bank_account jsonb,
    payment_url text,
    withdrawal_address text,
    tx_hash text,
    exchange_rate jsonb,
    fees jsonb,
    estimated_completion_time text,
    expires_at timestamp with time zone,
    metadata jsonb DEFAULT '{}'::jsonb,
    user_id uuid,
    project_id uuid,
    organization_id uuid,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT fiat_transactions_provider_check CHECK ((provider = ANY (ARRAY['ramp_network'::text, 'mt_pelerin'::text]))),
    CONSTRAINT fiat_transactions_status_check CHECK ((status = ANY (ARRAY['pending'::text, 'processing'::text, 'waiting_for_payment'::text, 'payment_received'::text, 'completed'::text, 'failed'::text, 'cancelled'::text, 'expired'::text]))),
    CONSTRAINT fiat_transactions_type_check CHECK ((type = ANY (ARRAY['onramp'::text, 'offramp'::text])))
);


--
-- Name: TABLE fiat_transactions; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.fiat_transactions IS 'Stores fiat on/off-ramp transactions from all providers including RAMP Network';


--
-- Name: fund_nav_data; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.fund_nav_data (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    fund_id uuid NOT NULL,
    date date NOT NULL,
    nav numeric(18,6) NOT NULL,
    total_assets numeric(78,18) NOT NULL,
    total_liabilities numeric(78,18) DEFAULT 0 NOT NULL,
    outstanding_shares numeric(78,18) NOT NULL,
    previous_nav numeric(18,6),
    change_amount numeric(18,6),
    change_percent numeric(8,4),
    source text DEFAULT 'manual'::text NOT NULL,
    validated boolean DEFAULT false,
    validated_by uuid,
    validated_at timestamp with time zone,
    notes text,
    calculation_method text,
    market_conditions text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    created_by uuid,
    CONSTRAINT fund_nav_data_source_check CHECK ((source = ANY (ARRAY['manual'::text, 'oracle'::text, 'calculated'::text, 'administrator'::text]))),
    CONSTRAINT non_negative_liabilities CHECK ((total_liabilities >= (0)::numeric)),
    CONSTRAINT positive_assets CHECK ((total_assets > (0)::numeric)),
    CONSTRAINT positive_nav CHECK ((nav > (0)::numeric)),
    CONSTRAINT positive_shares CHECK ((outstanding_shares > (0)::numeric))
);


--
-- Name: TABLE fund_nav_data; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.fund_nav_data IS 'Historical Net Asset Value data for tokenized funds with validation workflow';


--
-- Name: fund_products; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.fund_products (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    project_id uuid NOT NULL,
    fund_ticker character varying(20),
    fund_name text,
    fund_type character varying(50),
    net_asset_value numeric,
    assets_under_management numeric,
    expense_ratio numeric,
    benchmark_index text,
    holdings jsonb,
    distribution_frequency character varying(50),
    tracking_error numeric,
    currency character varying(10),
    inception_date timestamp with time zone,
    closure_liquidation_date timestamp with time zone,
    status character varying(50),
    creation_redemption_history jsonb,
    performance_history jsonb,
    flow_data jsonb,
    fund_vintage_year integer,
    investment_stage character varying(100),
    sector_focus text[],
    geographic_focus text[],
    target_raise numeric,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    asset_allocation jsonb,
    concentration_limits jsonb,
    CONSTRAINT chk_fund_expense_ratio CHECK (((expense_ratio IS NULL) OR ((expense_ratio >= (0)::numeric) AND (expense_ratio <= 0.50)))),
    CONSTRAINT chk_fund_nav_positive CHECK (((net_asset_value IS NULL) OR (net_asset_value > (0)::numeric))),
    CONSTRAINT chk_fund_status_valid CHECK (((status)::text = ANY ((ARRAY['active'::character varying, 'inactive'::character varying, 'liquidated'::character varying, 'suspended'::character varying, 'Open'::character varying])::text[])))
);


--
-- Name: geographic_jurisdictions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.geographic_jurisdictions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    country_code character(2) NOT NULL,
    country_code_3 character(3) NOT NULL,
    country_name text NOT NULL,
    region text NOT NULL,
    regulatory_regime text,
    sanctions_risk_level text DEFAULT 'low'::text,
    fatf_compliance_status text DEFAULT 'compliant'::text,
    tax_treaty_status text,
    kyc_requirements_level text DEFAULT 'standard'::text,
    aml_risk_rating text DEFAULT 'low'::text,
    is_ofac_sanctioned boolean DEFAULT false,
    is_eu_sanctioned boolean DEFAULT false,
    is_un_sanctioned boolean DEFAULT false,
    offshore_financial_center boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: TABLE geographic_jurisdictions; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.geographic_jurisdictions IS 'Master reference table for countries and their regulatory/compliance characteristics';


--
-- Name: guardian_api_tests; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.guardian_api_tests (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    test_name character varying(100) NOT NULL,
    test_type character varying(50) NOT NULL,
    endpoint character varying(200) NOT NULL,
    http_method character varying(10) NOT NULL,
    request_payload jsonb,
    request_headers jsonb,
    response_status integer,
    response_payload jsonb,
    response_headers jsonb,
    guardian_wallet_id character varying(100),
    guardian_operation_id character varying(100),
    guardian_wallet_address character varying(100),
    execution_time_ms integer,
    success boolean DEFAULT false NOT NULL,
    error_message text,
    created_at timestamp with time zone DEFAULT now(),
    created_by character varying(100),
    notes text,
    CONSTRAINT guardian_api_tests_test_type_check CHECK (((test_type)::text = ANY (ARRAY[('create_wallet'::character varying)::text, ('get_wallet'::character varying)::text, ('get_operation'::character varying)::text, ('list_wallets'::character varying)::text, ('list_operations'::character varying)::text, ('complete_flow'::character varying)::text])))
);


--
-- Name: TABLE guardian_api_tests; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.guardian_api_tests IS 'Records of all Guardian API requests and responses for testing purposes';


--
-- Name: COLUMN guardian_api_tests.test_type; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.guardian_api_tests.test_type IS 'Type of test: create_wallet, get_wallet, get_operation, list_wallets, complete_flow';


--
-- Name: COLUMN guardian_api_tests.guardian_wallet_id; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.guardian_api_tests.guardian_wallet_id IS 'The UUID we send to Guardian for wallet creation';


--
-- Name: COLUMN guardian_api_tests.guardian_operation_id; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.guardian_api_tests.guardian_operation_id IS 'Operation ID returned by Guardian for async operations';


--
-- Name: guardian_operations; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.guardian_operations (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    operation_id character varying(100) NOT NULL,
    operation_type character varying(50) NOT NULL,
    operation_status character varying(50),
    guardian_wallet_id character varying(100),
    related_test_id uuid,
    operation_result jsonb,
    operation_error jsonb,
    created_at timestamp with time zone DEFAULT now(),
    last_checked_at timestamp with time zone DEFAULT now(),
    completed_at timestamp with time zone,
    check_count integer DEFAULT 0,
    notes text
);


--
-- Name: TABLE guardian_operations; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.guardian_operations IS 'Tracks Guardian operations and their status changes over time';


--
-- Name: COLUMN guardian_operations.operation_id; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.guardian_operations.operation_id IS 'Guardian operation ID for tracking async operations';


--
-- Name: COLUMN guardian_operations.operation_type; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.guardian_operations.operation_type IS 'Type of operation being tracked';


--
-- Name: guardian_wallets; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.guardian_wallets (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    guardian_wallet_id character varying(100) NOT NULL,
    guardian_operation_id character varying(100),
    guardian_internal_id character varying(100),
    wallet_name character varying(200),
    wallet_status character varying(50),
    wallet_addresses jsonb,
    wallet_metadata jsonb,
    creation_request_id uuid,
    operation_check_request_id uuid,
    wallet_details_request_id uuid,
    requested_at timestamp with time zone DEFAULT now(),
    operation_completed_at timestamp with time zone,
    wallet_retrieved_at timestamp with time zone,
    test_notes text,
    created_by character varying(100),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: TABLE guardian_wallets; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.guardian_wallets IS 'Tracks Guardian wallets through their lifecycle from creation to completion';


--
-- Name: COLUMN guardian_wallets.guardian_wallet_id; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.guardian_wallets.guardian_wallet_id IS 'The UUID we sent to Guardian (our identifier)';


--
-- Name: COLUMN guardian_wallets.guardian_internal_id; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.guardian_wallets.guardian_internal_id IS 'Guardian internal wallet ID if different from our UUID';


--
-- Name: COLUMN guardian_wallets.wallet_addresses; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.guardian_wallets.wallet_addresses IS 'JSON array of wallet addresses from Guardian';


--
-- Name: health_checks; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.health_checks (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    service text NOT NULL,
    status text NOT NULL,
    response_time integer,
    details jsonb DEFAULT '{}'::jsonb,
    last_check timestamp with time zone DEFAULT now(),
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT health_checks_status_check CHECK ((status = ANY (ARRAY['HEALTHY'::text, 'DEGRADED'::text, 'UNHEALTHY'::text])))
);


--
-- Name: individual_documents; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.individual_documents (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    entity_id uuid NOT NULL,
    entity_type text NOT NULL,
    document_type public.individual_document_type NOT NULL,
    document_name text NOT NULL,
    document_url text,
    document_hash text,
    file_size bigint,
    mime_type text,
    status text DEFAULT 'pending'::text,
    uploaded_by uuid,
    reviewed_by uuid,
    reviewed_at timestamp with time zone,
    metadata jsonb DEFAULT '{}'::jsonb,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT individual_documents_entity_type_check CHECK ((entity_type = ANY (ARRAY['investor'::text, 'person'::text, 'user'::text]))),
    CONSTRAINT individual_documents_status_check CHECK ((status = ANY (ARRAY['pending'::text, 'approved'::text, 'rejected'::text, 'expired'::text])))
);


--
-- Name: TABLE individual_documents; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.individual_documents IS 'Individual KYC/AML and personal documents for investors and users';


--
-- Name: infrastructure_products; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.infrastructure_products (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    project_id uuid NOT NULL,
    asset_id character varying(50),
    asset_type character varying(100),
    design_date timestamp with time zone,
    procurement_date timestamp with time zone,
    condition_score integer,
    age integer,
    maintenance_backlog integer,
    performance_metrics jsonb,
    mean_time_between_failure numeric,
    rehabilitation_date timestamp with time zone,
    replacement_date timestamp with time zone,
    cost_of_replacement numeric,
    inspection_date timestamp with time zone,
    safety_incidents integer,
    status character varying(50),
    target_raise numeric,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: investor_approvals; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.investor_approvals (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    investor_id uuid NOT NULL,
    reviewer_id uuid,
    status text DEFAULT 'pending'::text NOT NULL,
    rejection_reason text,
    approval_date timestamp with time zone,
    submission_date timestamp with time zone DEFAULT now(),
    approval_type text NOT NULL,
    required_documents jsonb,
    review_notes text,
    metadata jsonb,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: investor_documents; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.investor_documents (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    investor_id uuid NOT NULL,
    document_type public.document_type NOT NULL,
    document_name text NOT NULL,
    file_url text NOT NULL,
    status public.document_status DEFAULT 'pending'::public.document_status NOT NULL,
    is_public boolean DEFAULT false NOT NULL,
    uploaded_at timestamp with time zone DEFAULT now() NOT NULL,
    expires_at timestamp with time zone,
    last_reviewed_at timestamp with time zone,
    reviewed_by uuid,
    version integer DEFAULT 1 NOT NULL,
    metadata jsonb DEFAULT '{}'::jsonb NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    created_by uuid NOT NULL,
    updated_by uuid NOT NULL
);


--
-- Name: TABLE investor_documents; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.investor_documents IS 'Documents uploaded by investors for KYC/compliance purposes';


--
-- Name: COLUMN investor_documents.status; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.investor_documents.status IS 'Document review status: pending, approved, rejected, expired, active, pending_review';


--
-- Name: COLUMN investor_documents.is_public; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.investor_documents.is_public IS 'Indicates whether the document is publicly visible or restricted';


--
-- Name: COLUMN investor_documents.metadata; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.investor_documents.metadata IS 'Additional document metadata including file info and processing details';


--
-- Name: investor_group_members; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.investor_group_members (
    group_id uuid NOT NULL,
    investor_id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);


--
-- Name: investor_groups; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.investor_groups (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name text NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    project_id uuid,
    description text,
    member_count integer DEFAULT 0 NOT NULL,
    "group" text
);


--
-- Name: investor_groups_investors; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.investor_groups_investors (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    group_id uuid NOT NULL,
    investor_id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    project_id uuid,
    organization_id uuid
);


--
-- Name: investors; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.investors (
    investor_id uuid DEFAULT gen_random_uuid() NOT NULL,
    name text NOT NULL,
    email text NOT NULL,
    type text NOT NULL,
    wallet_address text,
    kyc_status public.kyc_status NOT NULL,
    "lastUpdated" text,
    verification_details jsonb,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    kyc_expiry_date timestamp with time zone,
    company text,
    notes text,
    investor_status text DEFAULT 'pending'::text,
    onboarding_completed boolean DEFAULT false,
    risk_assessment jsonb,
    profile_data jsonb,
    accreditation_status text DEFAULT 'not_started'::text,
    accreditation_expiry_date timestamp with time zone,
    accreditation_type text,
    tax_residency text,
    tax_id_number text,
    investment_preferences jsonb,
    last_compliance_check timestamp with time zone,
    compliance_checked_by uuid,
    compliance_checked_email text,
    compliance_checked_at timestamp with time zone,
    organization_id uuid,
    project_id uuid,
    user_id uuid,
    profile_type public.profile_type,
    profile_id uuid
);


--
-- Name: TABLE investors; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.investors IS 'Investor records with KYC status, expiry dates, and verification details. KYC status is an enum: approved, pending, failed, not_started, expired.';


--
-- Name: COLUMN investors.compliance_checked_by; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.investors.compliance_checked_by IS 'UUID of the user who performed the compliance check';


--
-- Name: COLUMN investors.compliance_checked_email; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.investors.compliance_checked_email IS 'Email of the user who performed the compliance check for audit trail';


--
-- Name: COLUMN investors.compliance_checked_at; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.investors.compliance_checked_at IS 'Timestamp when the compliance check was confirmed';


--
-- Name: COLUMN investors.organization_id; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.investors.organization_id IS 'organization_id';


--
-- Name: invoice; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.invoice (
    invoice_id integer NOT NULL,
    provider_id integer,
    patient_name character varying(255),
    patient_dob date,
    service_dates character varying(255),
    procedure_codes character varying(255),
    diagnosis_codes character varying(255),
    billed_amount numeric(10,2),
    adjustments numeric(10,2),
    net_amount_due numeric(10,2),
    payer_id integer,
    policy_number character varying(50),
    invoice_number character varying(50),
    invoice_date date,
    due_date date,
    factoring_discount_rate numeric(5,2),
    factoring_terms text,
    upload_timestamp timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    pool_id integer,
    CONSTRAINT invoice_net_amount_due_check CHECK ((net_amount_due >= (0)::numeric))
);


--
-- Name: invoice_invoice_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.invoice ALTER COLUMN invoice_id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.invoice_invoice_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: invoices; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.invoices (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    amount numeric,
    created_at timestamp with time zone DEFAULT now(),
    currency text,
    due_date date,
    invoice_number text,
    issued_date date,
    paid boolean DEFAULT false,
    subscription_id uuid
);


--
-- Name: issuer_access_roles; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.issuer_access_roles (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    issuer_id uuid NOT NULL,
    user_id uuid NOT NULL,
    role public.issuer_role NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    created_by uuid NOT NULL,
    updated_by uuid NOT NULL
);


--
-- Name: issuer_detail_documents; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.issuer_detail_documents (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    project_id uuid NOT NULL,
    document_type text NOT NULL,
    document_url text NOT NULL,
    document_name text NOT NULL,
    uploaded_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    uploaded_by uuid,
    status text DEFAULT 'active'::text,
    metadata jsonb,
    is_public boolean DEFAULT false NOT NULL
);


--
-- Name: TABLE issuer_detail_documents; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.issuer_detail_documents IS 'Documents related to issuer details for projects including legal and regulatory compliance';


--
-- Name: COLUMN issuer_detail_documents.document_type; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.issuer_detail_documents.document_type IS 'Type of issuer document (creditworthiness, term_sheet, legal_regulatory_compliance, etc.)';


--
-- Name: COLUMN issuer_detail_documents.is_public; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.issuer_detail_documents.is_public IS 'Controls whether the document is visible to investors in the investor portal';


--
-- Name: issuer_documents; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.issuer_documents (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    issuer_id uuid NOT NULL,
    document_type public.document_type NOT NULL,
    file_url text NOT NULL,
    status public.document_status DEFAULT 'pending'::public.document_status NOT NULL,
    uploaded_at timestamp with time zone DEFAULT now() NOT NULL,
    expires_at timestamp with time zone,
    last_reviewed_at timestamp with time zone,
    reviewed_by uuid,
    version integer DEFAULT 1 NOT NULL,
    metadata jsonb DEFAULT '{}'::jsonb NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    created_by uuid NOT NULL,
    updated_by uuid NOT NULL,
    document_name text NOT NULL,
    is_public boolean DEFAULT false NOT NULL,
    CONSTRAINT valid_expiry_date CHECK ((expires_at > uploaded_at)),
    CONSTRAINT valid_review_date CHECK ((last_reviewed_at >= uploaded_at))
);


--
-- Name: COLUMN issuer_documents.document_name; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.issuer_documents.document_name IS 'Human-readable name for the document';


--
-- Name: COLUMN issuer_documents.is_public; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.issuer_documents.is_public IS 'Indicates whether the document is publicly visible or restricted';


--
-- Name: kyc_screening_logs; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.kyc_screening_logs (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    investor_id uuid NOT NULL,
    previous_status text,
    new_status text,
    method text NOT NULL,
    notes text,
    performed_by text,
    created_at timestamp with time zone DEFAULT now()
);


--
-- Name: latest_nav_by_fund; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.latest_nav_by_fund AS
 SELECT DISTINCT ON (fund_nav_data.fund_id) fund_nav_data.fund_id,
    fund_nav_data.date,
    fund_nav_data.nav,
    fund_nav_data.change_amount,
    fund_nav_data.change_percent,
    fund_nav_data.source,
    fund_nav_data.validated,
    fund_nav_data.created_at
   FROM public.fund_nav_data
  ORDER BY fund_nav_data.fund_id, fund_nav_data.date DESC;


--
-- Name: market_data_snapshots; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.market_data_snapshots (
    snapshot_id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    snapshot_date timestamp with time zone DEFAULT now(),
    treasury_rates jsonb,
    credit_spreads jsonb,
    energy_prices jsonb,
    policy_changes_count integer DEFAULT 0,
    api_call_count integer DEFAULT 0,
    cache_hit_rate numeric(5,4) DEFAULT 0,
    data_sources_used jsonb DEFAULT '[]'::jsonb,
    created_at timestamp with time zone DEFAULT now()
);


--
-- Name: TABLE market_data_snapshots; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.market_data_snapshots IS 'Historical market data snapshots for tracking and analysis';


--
-- Name: mfa_policies; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.mfa_policies (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name text NOT NULL,
    required boolean NOT NULL,
    applies_to uuid[] NOT NULL,
    exceptions uuid[] NOT NULL,
    created_at timestamp with time zone DEFAULT now()
);


--
-- Name: monitoring_metrics; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.monitoring_metrics (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    service text NOT NULL,
    metric_name text NOT NULL,
    value numeric NOT NULL,
    unit text DEFAULT 'count'::text,
    tags jsonb DEFAULT '{}'::jsonb,
    recorded_at timestamp with time zone DEFAULT now(),
    created_at timestamp with time zone DEFAULT now()
);


--
-- Name: moonpay_asset_cache; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.moonpay_asset_cache (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    contract_address text NOT NULL,
    token_id text NOT NULL,
    asset_data jsonb NOT NULL,
    cached_at timestamp with time zone DEFAULT now(),
    expires_at timestamp with time zone DEFAULT (now() + '24:00:00'::interval)
);


--
-- Name: moonpay_compliance_alerts; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.moonpay_compliance_alerts (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    alert_id text,
    alert_type text NOT NULL,
    severity text DEFAULT 'medium'::text NOT NULL,
    status text DEFAULT 'open'::text NOT NULL,
    customer_id text,
    transaction_id text,
    entity_type text,
    entity_id text,
    risk_score numeric,
    risk_level text,
    title text NOT NULL,
    description text NOT NULL,
    details jsonb DEFAULT '{}'::jsonb,
    screening_results jsonb DEFAULT '{}'::jsonb,
    recommended_actions text[],
    assigned_to text,
    reviewed_by text,
    resolved_by text,
    escalated_to text,
    resolution_notes text,
    auto_generated boolean DEFAULT false,
    source text DEFAULT 'moonpay_api'::text,
    external_reference text,
    related_alerts text[],
    metadata jsonb DEFAULT '{}'::jsonb,
    triggered_at timestamp with time zone DEFAULT now(),
    reviewed_at timestamp with time zone,
    resolved_at timestamp with time zone,
    escalated_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT chk_moonpay_compliance_alerts_resolved_logic CHECK ((((status = 'resolved'::text) AND (resolved_at IS NOT NULL) AND (resolved_by IS NOT NULL)) OR (status <> 'resolved'::text))),
    CONSTRAINT chk_moonpay_compliance_alerts_risk_score_range CHECK (((risk_score IS NULL) OR ((risk_score >= (0)::numeric) AND (risk_score <= (100)::numeric)))),
    CONSTRAINT moonpay_compliance_alerts_alert_type_check CHECK ((alert_type = ANY (ARRAY['aml_screening'::text, 'sanctions_check'::text, 'pep_screening'::text, 'transaction_monitoring'::text, 'kyc_verification'::text, 'suspicious_activity'::text, 'risk_threshold'::text, 'policy_violation'::text, 'document_verification'::text, 'identity_verification'::text, 'address_verification'::text]))),
    CONSTRAINT moonpay_compliance_alerts_entity_type_check CHECK ((entity_type = ANY (ARRAY['customer'::text, 'transaction'::text, 'policy'::text, 'system'::text]))),
    CONSTRAINT moonpay_compliance_alerts_risk_level_check CHECK ((risk_level = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text, 'extreme'::text]))),
    CONSTRAINT moonpay_compliance_alerts_risk_score_check CHECK (((risk_score >= (0)::numeric) AND (risk_score <= (100)::numeric))),
    CONSTRAINT moonpay_compliance_alerts_severity_check CHECK ((severity = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text, 'critical'::text]))),
    CONSTRAINT moonpay_compliance_alerts_status_check CHECK ((status = ANY (ARRAY['open'::text, 'in_review'::text, 'resolved'::text, 'dismissed'::text, 'escalated'::text])))
);


--
-- Name: TABLE moonpay_compliance_alerts; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.moonpay_compliance_alerts IS 'Compliance monitoring alerts including AML screening, sanctions checking, and policy violations';


--
-- Name: COLUMN moonpay_compliance_alerts.screening_results; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.moonpay_compliance_alerts.screening_results IS 'JSON results from AML/sanctions/PEP screening processes';


--
-- Name: COLUMN moonpay_compliance_alerts.recommended_actions; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.moonpay_compliance_alerts.recommended_actions IS 'Array of recommended actions to address the compliance alert';


--
-- Name: moonpay_customers; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.moonpay_customers (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    external_customer_id text,
    moonpay_customer_id text,
    email text,
    first_name text,
    last_name text,
    date_of_birth date,
    address jsonb,
    kyc_level text DEFAULT 'none'::text,
    identity_verification_status text,
    verification_documents jsonb,
    transaction_limits jsonb,
    preferred_payment_methods text[],
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT moonpay_customers_identity_verification_status_check CHECK ((identity_verification_status = ANY (ARRAY['pending'::text, 'completed'::text, 'failed'::text]))),
    CONSTRAINT moonpay_customers_kyc_level_check CHECK ((kyc_level = ANY (ARRAY['none'::text, 'basic'::text, 'enhanced'::text, 'premium'::text])))
);


--
-- Name: moonpay_passes; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.moonpay_passes (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    external_pass_id text,
    project_id text NOT NULL,
    contract_address text NOT NULL,
    token_id text NOT NULL,
    metadata_url text,
    name text NOT NULL,
    description text,
    image text,
    attributes jsonb,
    owner_address text,
    status text NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT moonpay_passes_status_check CHECK ((status = ANY (ARRAY['pending'::text, 'minted'::text, 'transferred'::text, 'burned'::text])))
);


--
-- Name: moonpay_policies; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.moonpay_policies (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    external_policy_id text,
    name text NOT NULL,
    type text NOT NULL,
    rules jsonb NOT NULL,
    is_active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT moonpay_policies_type_check CHECK ((type = ANY (ARRAY['kyc'::text, 'transaction'::text, 'compliance'::text, 'risk'::text])))
);


--
-- Name: moonpay_policy_logs; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.moonpay_policy_logs (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    log_id text,
    policy_id text NOT NULL,
    policy_name text NOT NULL,
    policy_type text NOT NULL,
    action_type text NOT NULL,
    execution_status text DEFAULT 'success'::text NOT NULL,
    entity_type text,
    entity_id text,
    customer_id text,
    transaction_id text,
    rule_conditions jsonb DEFAULT '{}'::jsonb,
    rule_results jsonb DEFAULT '{}'::jsonb,
    violation_details jsonb DEFAULT '{}'::jsonb,
    before_state jsonb DEFAULT '{}'::jsonb,
    after_state jsonb DEFAULT '{}'::jsonb,
    triggered_by text,
    executed_by text,
    approved_by text,
    reason text,
    notes text,
    severity text DEFAULT 'info'::text,
    compliance_impact text,
    requires_action boolean DEFAULT false,
    action_taken text,
    follow_up_required boolean DEFAULT false,
    follow_up_date timestamp with time zone,
    retention_period_days integer DEFAULT 2555,
    auto_generated boolean DEFAULT false,
    source text DEFAULT 'moonpay_policy_engine'::text,
    correlation_id text,
    session_id text,
    ip_address inet,
    user_agent text,
    metadata jsonb DEFAULT '{}'::jsonb,
    executed_at timestamp with time zone DEFAULT now(),
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT chk_moonpay_policy_logs_retention_period CHECK (((retention_period_days > 0) AND (retention_period_days <= 3650))),
    CONSTRAINT moonpay_policy_logs_action_type_check CHECK ((action_type = ANY (ARRAY['policy_created'::text, 'policy_updated'::text, 'policy_deleted'::text, 'policy_activated'::text, 'policy_deactivated'::text, 'rule_triggered'::text, 'rule_passed'::text, 'rule_failed'::text, 'violation_detected'::text, 'exception_granted'::text, 'review_initiated'::text, 'review_completed'::text, 'approval_required'::text, 'approval_granted'::text, 'approval_denied'::text]))),
    CONSTRAINT moonpay_policy_logs_compliance_impact_check CHECK ((compliance_impact = ANY (ARRAY['none'::text, 'low'::text, 'medium'::text, 'high'::text, 'critical'::text]))),
    CONSTRAINT moonpay_policy_logs_entity_type_check CHECK ((entity_type = ANY (ARRAY['customer'::text, 'transaction'::text, 'policy'::text, 'rule'::text, 'system'::text]))),
    CONSTRAINT moonpay_policy_logs_execution_status_check CHECK ((execution_status = ANY (ARRAY['success'::text, 'failure'::text, 'warning'::text, 'skipped'::text]))),
    CONSTRAINT moonpay_policy_logs_policy_type_check CHECK ((policy_type = ANY (ARRAY['kyc_policy'::text, 'transaction_limit'::text, 'risk_assessment'::text, 'compliance_rule'::text, 'aml_policy'::text, 'sanctions_policy'::text, 'geographic_restriction'::text, 'customer_verification'::text]))),
    CONSTRAINT moonpay_policy_logs_severity_check CHECK ((severity = ANY (ARRAY['info'::text, 'warning'::text, 'error'::text, 'critical'::text])))
);


--
-- Name: TABLE moonpay_policy_logs; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.moonpay_policy_logs IS 'Audit trail of policy execution, violations, and compliance actions with retention management';


--
-- Name: COLUMN moonpay_policy_logs.retention_period_days; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.moonpay_policy_logs.retention_period_days IS 'Number of days to retain this log entry for compliance purposes (default 7 years)';


--
-- Name: COLUMN moonpay_policy_logs.correlation_id; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.moonpay_policy_logs.correlation_id IS 'Unique identifier to correlate related policy actions across multiple logs';


--
-- Name: moonpay_projects; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.moonpay_projects (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    external_project_id text,
    name text NOT NULL,
    description text,
    contract_address text,
    network text NOT NULL,
    total_supply integer,
    max_supply integer,
    metadata jsonb,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: moonpay_swap_transactions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.moonpay_swap_transactions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    external_transaction_id text,
    quote_id text NOT NULL,
    status text NOT NULL,
    base_currency text NOT NULL,
    quote_currency text NOT NULL,
    base_amount numeric NOT NULL,
    quote_amount numeric NOT NULL,
    from_address text NOT NULL,
    to_address text NOT NULL,
    tx_hash text,
    fees jsonb,
    metadata jsonb,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT moonpay_swap_transactions_status_check CHECK ((status = ANY (ARRAY['pending'::text, 'processing'::text, 'completed'::text, 'failed'::text, 'expired'::text])))
);


--
-- Name: moonpay_transactions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.moonpay_transactions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    external_transaction_id text,
    type text NOT NULL,
    status text DEFAULT 'pending'::text NOT NULL,
    crypto_currency text NOT NULL,
    fiat_currency text NOT NULL,
    crypto_amount numeric,
    fiat_amount numeric NOT NULL,
    wallet_address text,
    payment_method text,
    customer_id text,
    redirect_url text,
    widget_redirect_url text,
    fees jsonb,
    metadata jsonb,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT moonpay_transactions_status_check CHECK ((status = ANY (ARRAY['pending'::text, 'completed'::text, 'failed'::text, 'waitingPayment'::text, 'waitingAuthorization'::text]))),
    CONSTRAINT moonpay_transactions_type_check CHECK ((type = ANY (ARRAY['buy'::text, 'sell'::text])))
);


--
-- Name: TABLE moonpay_transactions; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.moonpay_transactions IS 'Stores Moonpay buy/sell transactions for fiat-to-crypto operations';


--
-- Name: moonpay_webhook_config; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.moonpay_webhook_config (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    webhook_id text,
    url text NOT NULL,
    environment text DEFAULT 'sandbox'::text NOT NULL,
    events text[] DEFAULT '{}'::text[] NOT NULL,
    status text DEFAULT 'active'::text NOT NULL,
    version text DEFAULT 'v1'::text,
    secret_key text,
    description text,
    retry_policy jsonb DEFAULT '{"timeout": 30000, "max_delay": 30000, "max_attempts": 3, "initial_delay": 1000, "backoff_strategy": "exponential"}'::jsonb,
    headers jsonb DEFAULT '{}'::jsonb,
    delivery_settings jsonb DEFAULT '{"enabled": true, "timeout": 30, "verify_ssl": true}'::jsonb,
    metadata jsonb DEFAULT '{}'::jsonb,
    last_delivery_attempt timestamp with time zone,
    last_successful_delivery timestamp with time zone,
    last_failure_reason text,
    delivery_attempts_count integer DEFAULT 0,
    successful_deliveries_count integer DEFAULT 0,
    failed_deliveries_count integer DEFAULT 0,
    is_active boolean DEFAULT true,
    created_by text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT chk_moonpay_webhook_config_events_not_empty CHECK ((array_length(events, 1) > 0)),
    CONSTRAINT chk_moonpay_webhook_config_url_format CHECK ((url ~* '^https?://'::text)),
    CONSTRAINT moonpay_webhook_config_environment_check CHECK ((environment = ANY (ARRAY['sandbox'::text, 'production'::text]))),
    CONSTRAINT moonpay_webhook_config_status_check CHECK ((status = ANY (ARRAY['active'::text, 'inactive'::text, 'suspended'::text, 'failed'::text])))
);


--
-- Name: TABLE moonpay_webhook_config; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.moonpay_webhook_config IS 'Configuration and management of MoonPay webhooks including delivery settings, retry policies, and monitoring';


--
-- Name: COLUMN moonpay_webhook_config.retry_policy; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.moonpay_webhook_config.retry_policy IS 'JSON configuration for webhook delivery retry logic including backoff strategy and limits';


--
-- Name: COLUMN moonpay_webhook_config.delivery_settings; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.moonpay_webhook_config.delivery_settings IS 'JSON configuration for webhook delivery including SSL verification and timeout settings';


--
-- Name: moonpay_webhook_events; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.moonpay_webhook_events (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    event_type text NOT NULL,
    event_data jsonb NOT NULL,
    signature text NOT NULL,
    processed boolean DEFAULT false,
    processing_attempts integer DEFAULT 0,
    last_processing_error text,
    received_at timestamp with time zone DEFAULT now(),
    processed_at timestamp with time zone
);


--
-- Name: multi_sig_confirmations; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.multi_sig_confirmations (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    transaction_id uuid,
    owner text NOT NULL,
    signature text NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    confirmed boolean,
    signer text,
    "timestamp" timestamp with time zone
);


--
-- Name: multi_sig_transactions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.multi_sig_transactions (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    wallet_id uuid,
    destination_wallet_address text NOT NULL,
    value text NOT NULL,
    data text DEFAULT '0x'::text NOT NULL,
    nonce integer NOT NULL,
    hash text NOT NULL,
    executed boolean DEFAULT false NOT NULL,
    confirmations integer DEFAULT 0 NOT NULL,
    blockchain text NOT NULL,
    token_address text,
    token_symbol text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    blockchain_specific_data jsonb,
    description text,
    required integer,
    "to" text
);


--
-- Name: multi_sig_wallets; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.multi_sig_wallets (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    name text NOT NULL,
    blockchain text NOT NULL,
    address text NOT NULL,
    owners text[] NOT NULL,
    threshold integer NOT NULL,
    created_by uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    status text DEFAULT 'active'::text,
    blocked_at timestamp with time zone,
    block_reason text,
    CONSTRAINT multi_sig_wallets_blockchain_check CHECK ((blockchain = ANY (ARRAY['ethereum'::text, 'polygon'::text, 'avalanche'::text, 'optimism'::text, 'solana'::text, 'bitcoin'::text, 'ripple'::text, 'aptos'::text, 'sui'::text, 'mantle'::text, 'stellar'::text, 'hedera'::text, 'base'::text, 'zksync'::text, 'arbitrum'::text, 'near'::text]))),
    CONSTRAINT multi_sig_wallets_status_check CHECK ((status = ANY (ARRAY['pending'::text, 'active'::text, 'blocked'::text])))
);


--
-- Name: nav_approvals; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.nav_approvals (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    run_id uuid NOT NULL,
    status text DEFAULT 'draft'::text NOT NULL,
    requested_by uuid NOT NULL,
    validated_by uuid,
    approved_by uuid,
    approved_at timestamp with time zone,
    comments text,
    created_at timestamp with time zone DEFAULT now(),
    CONSTRAINT nav_approvals_status_check CHECK ((status = ANY (ARRAY['draft'::text, 'validated'::text, 'approved'::text, 'rejected'::text, 'published'::text])))
);


--
-- Name: TABLE nav_approvals; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.nav_approvals IS 'Manages approval workflow for NAV calculations with state transitions and audit trail';


--
-- Name: nav_calculation_history; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.nav_calculation_history (
    id bigint NOT NULL,
    run_id text NOT NULL,
    asset_id text NOT NULL,
    product_type text NOT NULL,
    calculation_step text NOT NULL,
    step_order integer NOT NULL,
    input_data jsonb NOT NULL,
    output_data jsonb NOT NULL,
    processing_time_ms integer NOT NULL,
    data_sources jsonb,
    validation_results jsonb,
    created_at timestamp with time zone DEFAULT now()
);


--
-- Name: nav_calculation_history_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.nav_calculation_history_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: nav_calculation_history_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.nav_calculation_history_id_seq OWNED BY public.nav_calculation_history.id;


--
-- Name: nav_calculation_runs; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.nav_calculation_runs (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    asset_id uuid NOT NULL,
    product_type text NOT NULL,
    project_id uuid,
    valuation_date date NOT NULL,
    started_at timestamp with time zone DEFAULT now(),
    completed_at timestamp with time zone,
    status text DEFAULT 'queued'::text NOT NULL,
    inputs_json jsonb,
    result_nav_value numeric(18,6),
    nav_per_share numeric(18,6),
    fx_rate_used numeric(18,6),
    pricing_sources jsonb,
    error_message text,
    created_by uuid,
    created_at timestamp with time zone DEFAULT now(),
    CONSTRAINT nav_calculation_runs_status_check CHECK ((status = ANY (ARRAY['queued'::text, 'running'::text, 'failed'::text, 'completed'::text])))
);


--
-- Name: TABLE nav_calculation_runs; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.nav_calculation_runs IS 'Tracks NAV calculation processes including inputs, outputs, and execution status for all asset types';


--
-- Name: nav_validation_results; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.nav_validation_results (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    run_id uuid NOT NULL,
    rule_code text NOT NULL,
    severity text NOT NULL,
    passed boolean NOT NULL,
    details_json jsonb,
    created_at timestamp with time zone DEFAULT now(),
    CONSTRAINT nav_validation_results_severity_check CHECK ((severity = ANY (ARRAY['info'::text, 'warn'::text, 'error'::text])))
);


--
-- Name: TABLE nav_validation_results; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.nav_validation_results IS 'Stores validation rule results for NAV calculations including pass/fail status and details';


--
-- Name: nav_data_with_status; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.nav_data_with_status AS
 SELECT nav.id,
    nav.asset_id,
    nav.project_id,
    nav.date,
    nav.nav,
    nav.total_assets,
    nav.asset_name,
    nav.total_liabilities,
    nav.outstanding_shares,
    nav.previous_nav,
    nav.change_amount,
    nav.change_percent,
    nav.source,
    nav.validated,
    nav.validated_by,
    nav.validated_at,
    nav.notes,
    nav.calculation_method,
    nav.market_conditions,
    nav.created_at,
    nav.updated_at,
    nav.created_by,
    nav.calculated_nav,
    runs.id AS run_id,
    runs.status AS run_status,
    runs.started_at AS run_started_at,
    runs.completed_at AS run_completed_at,
    runs.product_type,
    approvals.status AS approval_status,
    approvals.approved_by,
    approvals.approved_at,
    approvals.comments AS approval_comments,
        CASE
            WHEN (validation_summary.total_validations = 0) THEN 'no_validations'::text
            WHEN (validation_summary.failed_validations = 0) THEN 'all_passed'::text
            WHEN (validation_summary.error_validations > 0) THEN 'errors_present'::text
            ELSE 'warnings_present'::text
        END AS validation_status,
    validation_summary.total_validations,
    validation_summary.failed_validations,
    validation_summary.error_validations
   FROM (((public.asset_nav_data nav
     LEFT JOIN public.nav_calculation_runs runs ON (((runs.asset_id = nav.asset_id) AND (runs.valuation_date = nav.date))))
     LEFT JOIN public.nav_approvals approvals ON ((approvals.run_id = runs.id)))
     LEFT JOIN ( SELECT nav_validation_results.run_id,
            count(*) AS total_validations,
            count(*) FILTER (WHERE (NOT nav_validation_results.passed)) AS failed_validations,
            count(*) FILTER (WHERE ((NOT nav_validation_results.passed) AND (nav_validation_results.severity = 'error'::text))) AS error_validations
           FROM public.nav_validation_results
          GROUP BY nav_validation_results.run_id) validation_summary ON ((validation_summary.run_id = runs.id)));


--
-- Name: VIEW nav_data_with_status; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON VIEW public.nav_data_with_status IS 'Comprehensive view of NAV data including calculation run status, validation results, and approval workflow status';


--
-- Name: nav_fx_rates; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.nav_fx_rates (
    base_ccy text NOT NULL,
    quote_ccy text NOT NULL,
    rate numeric(18,8) NOT NULL,
    as_of timestamp with time zone NOT NULL,
    source text DEFAULT 'chainlink'::text NOT NULL
);


--
-- Name: TABLE nav_fx_rates; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.nav_fx_rates IS 'Stores foreign exchange rates for multi-currency NAV calculations with historical data';


--
-- Name: nav_fx_rates_latest; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.nav_fx_rates_latest AS
 SELECT DISTINCT ON (nav_fx_rates.base_ccy, nav_fx_rates.quote_ccy) nav_fx_rates.base_ccy,
    nav_fx_rates.quote_ccy,
    nav_fx_rates.rate,
    nav_fx_rates.as_of,
    nav_fx_rates.source
   FROM public.nav_fx_rates
  ORDER BY nav_fx_rates.base_ccy, nav_fx_rates.quote_ccy, nav_fx_rates.as_of DESC;


--
-- Name: nav_oracle_configs; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.nav_oracle_configs (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    fund_id uuid NOT NULL,
    name text NOT NULL,
    oracle_type text NOT NULL,
    endpoint_url text,
    api_key_encrypted text,
    response_path text,
    update_frequency integer DEFAULT 3600,
    last_update timestamp with time zone,
    min_nav numeric(18,6),
    max_nav numeric(18,6),
    max_change_percent numeric(8,4) DEFAULT 10.0,
    active boolean DEFAULT true,
    success_rate numeric(5,2) DEFAULT 0.0,
    last_error text,
    consecutive_failures integer DEFAULT 0,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    created_by uuid,
    CONSTRAINT nav_oracle_configs_oracle_type_check CHECK ((oracle_type = ANY (ARRAY['chainlink'::text, 'api3'::text, 'custom_api'::text, 'manual'::text]))),
    CONSTRAINT positive_frequency CHECK ((update_frequency > 0)),
    CONSTRAINT valid_change_limit CHECK ((max_change_percent > (0)::numeric)),
    CONSTRAINT valid_success_rate CHECK (((success_rate >= (0)::numeric) AND (success_rate <= (100)::numeric)))
);


--
-- Name: TABLE nav_oracle_configs; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.nav_oracle_configs IS 'Oracle configurations for automated NAV data feeds';


--
-- Name: nav_price_cache; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.nav_price_cache (
    instrument_key text NOT NULL,
    price numeric(18,6) NOT NULL,
    currency text DEFAULT 'USD'::text NOT NULL,
    as_of timestamp with time zone NOT NULL,
    source text NOT NULL
);


--
-- Name: TABLE nav_price_cache; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.nav_price_cache IS 'Caches market prices for instruments to optimize NAV calculation performance';


--
-- Name: nav_redemptions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.nav_redemptions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    asset_id uuid NOT NULL,
    product_type text NOT NULL,
    as_of_date date NOT NULL,
    shares_redeemed numeric(78,18) DEFAULT 0 NOT NULL,
    value_redeemed numeric(78,18) DEFAULT 0 NOT NULL,
    redemption_rate numeric(18,6) DEFAULT 0 NOT NULL,
    created_at timestamp with time zone DEFAULT now()
);


--
-- Name: TABLE nav_redemptions; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.nav_redemptions IS 'Tracks daily redemption rates and activity for assets and products';


--
-- Name: notification_settings; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.notification_settings (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid NOT NULL,
    project_id uuid,
    event_types text[],
    notification_channels text[],
    email_recipients text[],
    email_template text DEFAULT 'default'::text,
    advance_notice_days integer[] DEFAULT '{1,7,30}'::integer[],
    disabled boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: TABLE notification_settings; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.notification_settings IS 'Stores user preferences for product lifecycle event notifications';


--
-- Name: COLUMN notification_settings.user_id; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.notification_settings.user_id IS 'User who owns these notification preferences';


--
-- Name: COLUMN notification_settings.project_id; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.notification_settings.project_id IS 'Optional project ID for project-specific settings, NULL for global settings';


--
-- Name: COLUMN notification_settings.event_types; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.notification_settings.event_types IS 'Array of event types to be notified about, empty array means all types';


--
-- Name: COLUMN notification_settings.notification_channels; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.notification_settings.notification_channels IS 'Channels to use for notifications (email, in_app, calendar)';


--
-- Name: COLUMN notification_settings.email_recipients; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.notification_settings.email_recipients IS 'Additional email recipients beyond the user';


--
-- Name: COLUMN notification_settings.email_template; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.notification_settings.email_template IS 'Preferred email template style';


--
-- Name: COLUMN notification_settings.advance_notice_days; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.notification_settings.advance_notice_days IS 'Days before events to send notifications';


--
-- Name: COLUMN notification_settings.disabled; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.notification_settings.disabled IS 'Whether notifications are disabled for this user/project';


--
-- Name: notifications; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.notifications (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    user_id text NOT NULL,
    type text NOT NULL,
    title text NOT NULL,
    description text NOT NULL,
    date timestamp with time zone DEFAULT now() NOT NULL,
    read boolean DEFAULT false NOT NULL,
    action_required boolean DEFAULT false NOT NULL,
    action_url text,
    metadata jsonb,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);


--
-- Name: onboarding_restrictions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.onboarding_restrictions (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    type text NOT NULL,
    value text NOT NULL,
    reason text NOT NULL,
    active boolean DEFAULT true NOT NULL,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    created_by text NOT NULL,
    CONSTRAINT onboarding_restrictions_type_check CHECK ((type = ANY (ARRAY['COUNTRY'::text, 'INVESTOR_TYPE'::text])))
);


--
-- Name: onchain_claims; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.onchain_claims (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    identity_id uuid,
    issuer_id uuid,
    topic integer NOT NULL,
    data text,
    signature text NOT NULL,
    valid_from timestamp with time zone,
    valid_to timestamp with time zone,
    verification_timestamp timestamp with time zone DEFAULT now() NOT NULL,
    status text NOT NULL,
    CONSTRAINT onchain_claims_status_check CHECK ((status = ANY (ARRAY['VALID'::text, 'INVALID'::text, 'EXPIRED'::text, 'REVOKED'::text])))
);


--
-- Name: onchain_identities; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.onchain_identities (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    user_id uuid,
    identity_address text NOT NULL,
    blockchain text NOT NULL,
    network text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT true NOT NULL
);


--
-- Name: onchain_issuers; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.onchain_issuers (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    issuer_address text NOT NULL,
    issuer_name text NOT NULL,
    blockchain text NOT NULL,
    network text NOT NULL,
    trusted_for_claims integer[] DEFAULT '{}'::integer[] NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    is_active boolean DEFAULT true NOT NULL
);


--
-- Name: onchain_verification_history; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.onchain_verification_history (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    identity_id uuid,
    verification_type text NOT NULL,
    required_claims integer[] DEFAULT '{}'::integer[] NOT NULL,
    result boolean NOT NULL,
    reason text,
    verification_timestamp timestamp with time zone DEFAULT now() NOT NULL
);


--
-- Name: organizations; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.organizations (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name text NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    legal_name text,
    registration_number text,
    registration_date timestamp with time zone,
    tax_id text,
    jurisdiction text,
    business_type text,
    status text DEFAULT 'pending'::text,
    contact_email text,
    contact_phone text,
    website text,
    address jsonb,
    legal_representatives jsonb,
    compliance_status text DEFAULT 'pending_review'::text,
    onboarding_completed boolean DEFAULT false,
    updated_at timestamp with time zone DEFAULT now(),
    entity_structure text,
    issuer_type text,
    governance_model text,
    CONSTRAINT chk_entity_structure CHECK (((entity_structure IS NULL) OR (entity_structure = ANY (ARRAY['single_entity'::text, 'holding_company'::text, 'subsidiary'::text, 'spv'::text, 'joint_venture'::text])))),
    CONSTRAINT chk_governance_model CHECK (((governance_model IS NULL) OR (governance_model = ANY (ARRAY['board'::text, 'manager_managed'::text, 'member_managed'::text, 'trustee'::text])))),
    CONSTRAINT chk_issuer_type CHECK (((issuer_type IS NULL) OR (issuer_type = ANY (ARRAY['corporate'::text, 'government'::text, 'fund'::text, 'spv'::text, 'reit'::text]))))
);


--
-- Name: COLUMN organizations.entity_structure; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.organizations.entity_structure IS 'Legal entity structure type (single_entity, holding_company, subsidiary, spv, joint_venture)';


--
-- Name: COLUMN organizations.issuer_type; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.organizations.issuer_type IS 'Type of issuer (corporate, government, fund, spv, reit)';


--
-- Name: COLUMN organizations.governance_model; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.organizations.governance_model IS 'Governance model (board, manager_managed, member_managed, trustee)';


--
-- Name: payer; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.payer (
    payer_id integer NOT NULL,
    name character varying(255)
);


--
-- Name: payer_payer_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.payer ALTER COLUMN payer_id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.payer_payer_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: paymaster_operations; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.paymaster_operations (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_operation_id uuid NOT NULL,
    paymaster_address text NOT NULL,
    paymaster_data text NOT NULL,
    verification_gas_limit bigint NOT NULL,
    post_op_gas_limit bigint NOT NULL,
    gas_sponsored bigint NOT NULL,
    sponsor_address text,
    policy_applied jsonb NOT NULL,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP
);


--
-- Name: TABLE paymaster_operations; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.paymaster_operations IS 'Tracks paymaster sponsorship for user operations';


--
-- Name: COLUMN paymaster_operations.policy_applied; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.paymaster_operations.policy_applied IS 'JSONB storing the sponsorship policy that was applied';


--
-- Name: permissions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.permissions (
    name text NOT NULL,
    description text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);


--
-- Name: policy_rule_approvers; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.policy_rule_approvers (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    policy_rule_id uuid NOT NULL,
    user_id uuid NOT NULL,
    created_by uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    status text DEFAULT 'pending'::text,
    comment text,
    "timestamp" timestamp with time zone
);


--
-- Name: policy_rule_approvers_backup; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.policy_rule_approvers_backup (
    policy_rule_id uuid,
    user_id uuid,
    created_at timestamp with time zone,
    created_by uuid,
    status text,
    comment text,
    "timestamp" timestamp with time zone
);


--
-- Name: policy_template_approvers; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.policy_template_approvers (
    template_id uuid NOT NULL,
    user_id uuid NOT NULL,
    created_by uuid,
    status text DEFAULT 'pending'::text,
    "timestamp" timestamp with time zone DEFAULT now()
);


--
-- Name: policy_templates; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.policy_templates (
    template_id uuid DEFAULT gen_random_uuid() NOT NULL,
    template_name text NOT NULL,
    description text,
    template_data jsonb NOT NULL,
    created_by text NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    template_type text GENERATED ALWAYS AS (
CASE
    WHEN ((template_data ->> 'type'::text) IS NOT NULL) THEN (template_data ->> 'type'::text)
    ELSE 'general'::text
END) STORED,
    status text DEFAULT 'active'::text NOT NULL
);


--
-- Name: TABLE policy_templates; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.policy_templates IS 'Stores reusable policy templates';


--
-- Name: COLUMN policy_templates.status; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.policy_templates.status IS 'Status of the template (active, inactive)';


--
-- Name: pool; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.pool (
    pool_id integer NOT NULL,
    pool_name character varying(255),
    pool_type public.pool_type_enum,
    creation_timestamp timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


--
-- Name: pool_pool_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.pool ALTER COLUMN pool_id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.pool_pool_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: private_debt_products; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.private_debt_products (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    project_id uuid NOT NULL,
    deal_id character varying(50),
    opportunity_source character varying(100),
    industry_sector character varying(100),
    company_name text,
    deal_size numeric,
    screening_status character varying(50),
    due_diligence_status character varying(50),
    financial_metrics jsonb,
    risk_profile character varying(100),
    valuation_amount numeric,
    deal_structure_details text,
    transaction_status character varying(50),
    execution_date timestamp with time zone,
    portfolio_performance_metrics jsonb,
    compliance_status character varying(50),
    monitoring_frequency integer,
    advisory_service_type character varying(100),
    exit_strategy_status character varying(50),
    outcome text,
    debtor_credit_quality character varying(100),
    collection_period_days integer,
    recovery_rate_percentage numeric,
    diversification_metrics jsonb,
    status character varying(50),
    target_raise numeric,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: private_equity_products; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.private_equity_products (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    project_id uuid NOT NULL,
    fund_id character varying(50),
    fund_name text,
    fund_type character varying(50),
    fund_size numeric,
    formation_date timestamp with time zone,
    commitment_period integer,
    capital_commitment numeric,
    capital_call numeric,
    invested_capital numeric,
    management_fee numeric,
    carried_interest numeric,
    hurdle_rate numeric,
    internal_rate_of_return numeric,
    net_asset_value numeric,
    distributed_to_paid_in numeric,
    residual_value_to_paid_in numeric,
    investment_date timestamp with time zone,
    exit_date timestamp with time zone,
    exit_mechanism character varying(100),
    portfolio_company_id character varying(50),
    stage_of_development character varying(100),
    financing_round character varying(50),
    investment_amount numeric,
    valuation_pre_money numeric,
    valuation_post_money numeric,
    ownership_percentage numeric,
    investor_type character varying(100),
    status character varying(50),
    target_raise numeric,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    fund_vintage_year character varying,
    investment_stage character varying,
    sector_focus character varying,
    geographic_focus character varying
);


--
-- Name: product_lifecycle_events; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.product_lifecycle_events (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    product_id uuid NOT NULL,
    product_type character varying(100),
    event_type character varying(100),
    event_date timestamp with time zone,
    quantity numeric(18,8),
    transaction_hash character varying(255),
    actor character varying(255),
    details text,
    status character varying(50),
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: TABLE product_lifecycle_events; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.product_lifecycle_events IS 'Tracks lifecycle events for all product types';


--
-- Name: COLUMN product_lifecycle_events.event_type; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.product_lifecycle_events.event_type IS 'Type of event (e.g., issuance, maturity, redemption, call, rebase)';


--
-- Name: COLUMN product_lifecycle_events.status; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.product_lifecycle_events.status IS 'Status of the event (e.g., Pending, Success, Failed)';


--
-- Name: production_data; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.production_data (
    production_id uuid DEFAULT gen_random_uuid() NOT NULL,
    asset_id uuid,
    production_date date NOT NULL,
    output_mwh numeric(10,2) NOT NULL,
    weather_condition_id uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT production_data_output_mwh_check CHECK ((output_mwh >= (0)::numeric))
);


--
-- Name: profiles; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.profiles (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid,
    profile_type public.profile_type,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);


--
-- Name: TABLE profiles; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.profiles IS 'User profiles linking auth.users to public.users with profile types';


--
-- Name: COLUMN profiles.id; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.profiles.id IS 'References auth.users.id (Supabase auth user)';


--
-- Name: COLUMN profiles.user_id; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.profiles.user_id IS 'References public.users.id (application user)';


--
-- Name: COLUMN profiles.profile_type; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.profiles.profile_type IS 'User role type in the system';


--
-- Name: project_organization_assignments; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.project_organization_assignments (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    project_id uuid NOT NULL,
    organization_id uuid NOT NULL,
    relationship_type text NOT NULL,
    notes text,
    is_active boolean DEFAULT true,
    assigned_by uuid,
    assigned_at timestamp with time zone DEFAULT now(),
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT project_organization_assignments_relationship_type_check CHECK ((relationship_type = ANY (ARRAY['issuer'::text, 'investor'::text, 'service_provider'::text, 'regulator'::text])))
);


--
-- Name: TABLE project_organization_assignments; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.project_organization_assignments IS 'Stores many-to-many relationships between projects and organizations with typed relationship roles';


--
-- Name: COLUMN project_organization_assignments.relationship_type; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.project_organization_assignments.relationship_type IS 'Type of relationship: issuer, investor, service_provider, or regulator';


--
-- Name: COLUMN project_organization_assignments.notes; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.project_organization_assignments.notes IS 'Optional notes about the relationship';


--
-- Name: COLUMN project_organization_assignments.is_active; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.project_organization_assignments.is_active IS 'Whether this assignment is currently active';


--
-- Name: COLUMN project_organization_assignments.assigned_by; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.project_organization_assignments.assigned_by IS 'User who created this assignment';


--
-- Name: projects; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.projects (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name text NOT NULL,
    description text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    project_type text,
    organization_id uuid,
    is_primary boolean DEFAULT false NOT NULL,
    investment_status character varying(50) DEFAULT 'Open'::character varying NOT NULL,
    status character varying(50) DEFAULT 'active'::character varying,
    target_raise numeric,
    subscription_start_date date,
    subscription_end_date date,
    transaction_start_date date,
    maturity_date date,
    total_notional numeric,
    company_valuation numeric,
    minimum_investment numeric,
    estimated_yield_percentage numeric,
    token_symbol text,
    legal_entity text,
    jurisdiction text,
    tax_id text,
    duration text,
    currency text DEFAULT 'USD'::text,
    regulatory_exemptions jsonb[],
    CONSTRAINT projects_investment_status_check CHECK (((investment_status)::text = ANY ((ARRAY['Open'::character varying, 'Closed'::character varying])::text[]))),
    CONSTRAINT projects_project_type_check CHECK ((project_type = ANY (ARRAY['structured_products'::text, 'equity'::text, 'commodities'::text, 'funds_etfs_etps'::text, 'bonds'::text, 'quantitative_investment_strategies'::text, 'private_equity'::text, 'private_debt'::text, 'real_estate'::text, 'energy'::text, 'infrastructure'::text, 'collectibles'::text, 'receivables'::text, 'solar_wind_climate'::text, 'digital_tokenised_fund'::text, 'fiat_backed_stablecoin'::text, 'crypto_backed_stablecoin'::text, 'commodity_backed_stablecoin'::text, 'algorithmic_stablecoin'::text, 'rebasing_stablecoin'::text]))),
    CONSTRAINT projects_status_check CHECK (((status)::text = ANY ((ARRAY['active'::character varying, 'inactive'::character varying, 'completed'::character varying, 'draft'::character varying])::text[])))
);


--
-- Name: COLUMN projects.project_type; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.projects.project_type IS 'Project type supporting Traditional Assets (structured_products, equity, commodities, funds_etfs_etps, bonds, quantitative_investment_strategies), Alternative Assets (private_equity, private_debt, real_estate, energy, infrastructure, collectibles, receivables, solar_wind_climate), and Digital Assets (digital_tokenised_fund, fiat_backed_stablecoin, crypto_backed_stablecoin, commodity_backed_stablecoin, algorithmic_stablecoin, rebasing_stablecoin)';


--
-- Name: COLUMN projects.is_primary; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.projects.is_primary IS 'Indicates if this is the primary project for the organization (only one per org)';


--
-- Name: COLUMN projects.investment_status; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.projects.investment_status IS 'Investment availability status: Open (accepting investments) or Closed (not accepting)';


--
-- Name: COLUMN projects.subscription_start_date; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.projects.subscription_start_date IS 'Date when investors can start subscribing';


--
-- Name: COLUMN projects.subscription_end_date; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.projects.subscription_end_date IS 'Date when the subscription period closes';


--
-- Name: COLUMN projects.transaction_start_date; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.projects.transaction_start_date IS 'Date when the investment period begins';


--
-- Name: COLUMN projects.maturity_date; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.projects.maturity_date IS 'Date when the investment reaches maturity';


--
-- Name: COLUMN projects.total_notional; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.projects.total_notional IS 'Total notional amount of the project';


--
-- Name: COLUMN projects.company_valuation; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.projects.company_valuation IS 'Valuation of the company';


--
-- Name: COLUMN projects.minimum_investment; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.projects.minimum_investment IS 'Minimum investment amount';


--
-- Name: COLUMN projects.estimated_yield_percentage; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.projects.estimated_yield_percentage IS 'Estimated yield percentage';


--
-- Name: COLUMN projects.token_symbol; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.projects.token_symbol IS 'Symbol for the token (if applicable)';


--
-- Name: COLUMN projects.legal_entity; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.projects.legal_entity IS 'Legal entity name';


--
-- Name: COLUMN projects.jurisdiction; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.projects.jurisdiction IS 'Legal jurisdiction';


--
-- Name: COLUMN projects.tax_id; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.projects.tax_id IS 'Tax identification number';


--
-- Name: COLUMN projects.duration; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.projects.duration IS 'Project duration (e.g., "12_months")';


--
-- Name: COLUMN projects.currency; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.projects.currency IS 'Currency for all financial values';


--
-- Name: project_type_stats; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.project_type_stats AS
 WITH project_stats AS (
         SELECT p.project_type,
                CASE
                    WHEN (p.project_type = ANY (ARRAY['structured_product'::text, 'equity'::text, 'bond'::text, 'fund'::text, 'etf'::text, 'etp'::text, 'commodities'::text, 'quantitative_investment_strategies'::text])) THEN 'Traditional Assets'::text
                    WHEN (p.project_type = ANY (ARRAY['private_equity'::text, 'private_debt'::text, 'real_estate'::text, 'energy'::text, 'solar'::text, 'wind'::text, 'infrastructure'::text, 'collectibles'::text, 'receivables'::text])) THEN 'Alternative Assets'::text
                    WHEN (p.project_type = ANY (ARRAY['digital_tokenised_fund'::text, 'fiat_backed_stablecoin'::text, 'crypto_backed_stablecoin'::text, 'commodity_backed_stablecoin'::text, 'algorithmic_stablecoin'::text, 'rebasing_stablecoin'::text, 'stablecoin'::text])) THEN 'Digital Assets'::text
                    ELSE 'Other'::text
                END AS category,
            p.status,
            p.target_raise
           FROM public.projects p
          WHERE (p.project_type IS NOT NULL)
        )
 SELECT project_stats.category,
    project_stats.project_type,
    count(*) AS project_count,
    count(*) FILTER (WHERE ((project_stats.status)::text = 'active'::text)) AS active_count,
    avg(project_stats.target_raise) AS avg_target_raise,
    sum(project_stats.target_raise) AS total_target_raise
   FROM project_stats
  GROUP BY project_stats.category, project_stats.project_type
  ORDER BY project_stats.category, (count(*)) DESC;


--
-- Name: project_wallets; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.project_wallets (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    project_id uuid NOT NULL,
    wallet_type text NOT NULL,
    wallet_address text NOT NULL,
    public_key text NOT NULL,
    private_key text,
    mnemonic text,
    key_vault_id text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);


--
-- Name: projects_backup; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.projects_backup (
    id uuid,
    name text,
    description text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    project_type text,
    token_symbol text,
    target_raise numeric,
    authorized_shares integer,
    share_price numeric,
    company_valuation numeric,
    legal_entity text,
    jurisdiction text,
    tax_id text,
    status text,
    is_primary boolean,
    investment_status text,
    estimated_yield_percentage numeric,
    duration public.project_duration,
    subscription_start_date timestamp with time zone,
    subscription_end_date timestamp with time zone,
    transaction_start_date timestamp with time zone,
    maturity_date timestamp with time zone,
    currency character varying(3),
    minimum_investment numeric,
    total_notional numeric,
    sustainability_classification character varying(50),
    esg_risk_rating character varying(20),
    principal_adverse_impacts character varying(20),
    taxonomy_alignment_percentage numeric(5,2),
    risk_profile character varying(20),
    governance_structure text,
    compliance_framework text[],
    third_party_custodian boolean,
    custodian_name text,
    target_investor_type character varying(20),
    complexity_indicator character varying(20),
    liquidity_terms character varying(50),
    fee_structure_summary text,
    capital_protection_level numeric(5,2),
    underlying_assets text[],
    barrier_level numeric(10,2),
    payoff_structure character varying(50),
    voting_rights character varying(50),
    dividend_policy text,
    dilution_protection text[],
    exit_strategy character varying(50),
    credit_rating character varying(10),
    coupon_frequency character varying(20),
    callable_features boolean,
    call_date timestamp with time zone,
    call_price numeric(10,2),
    security_collateral text,
    fund_vintage_year integer,
    investment_stage character varying(50),
    sector_focus text[],
    geographic_focus text[],
    property_type character varying(50),
    geographic_location text,
    development_stage character varying(50),
    environmental_certifications text[],
    debtor_credit_quality character varying(20),
    collection_period_days integer,
    recovery_rate_percentage numeric(5,2),
    diversification_metrics jsonb,
    project_capacity_mw numeric(10,2),
    power_purchase_agreements text,
    regulatory_approvals text[],
    carbon_offset_potential numeric(10,2),
    blockchain_network character varying(50),
    smart_contract_audit_status character varying(20),
    consensus_mechanism character varying(50),
    gas_fee_structure text,
    oracle_dependencies text[],
    collateral_type character varying(20),
    reserve_management_policy text,
    audit_frequency character varying(20),
    redemption_mechanism text,
    depeg_risk_mitigation text[],
    token_economics text,
    custody_arrangements text,
    smart_contract_address character varying(42),
    upgrade_governance text,
    data_processing_basis character varying(30),
    privacy_policy_link text,
    data_retention_policy text,
    business_continuity_plan boolean,
    cybersecurity_framework text[],
    disaster_recovery_procedures text,
    tax_reporting_obligations text[],
    regulatory_permissions text[],
    cross_border_implications text
);


--
-- Name: provider; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.provider (
    provider_id integer NOT NULL,
    name character varying(255),
    address character varying(255)
);


--
-- Name: provider_provider_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.provider ALTER COLUMN provider_id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.provider_provider_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: quantitative_investment_strategies_products; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.quantitative_investment_strategies_products (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    project_id uuid NOT NULL,
    strategy_id character varying,
    strategy_name character varying,
    strategy_type character varying,
    parameters jsonb,
    underlying_assets text[],
    risk_metrics numeric,
    benchmark character varying,
    data_sources text[],
    machine_learning_flags boolean,
    currency character varying,
    inception_date timestamp with time zone,
    termination_date timestamp with time zone,
    status character varying,
    backtest_history jsonb,
    adjustment_history jsonb,
    performance_attribution jsonb,
    target_raise numeric,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: quantitative_strategies; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.quantitative_strategies (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    project_id uuid NOT NULL,
    strategy_id character varying(50),
    strategy_name text,
    strategy_type character varying(100),
    parameters jsonb,
    underlying_assets text[],
    risk_metrics jsonb,
    benchmark text,
    data_sources text[],
    machine_learning_flags boolean,
    currency character varying(10),
    inception_date timestamp with time zone,
    termination_date timestamp with time zone,
    status character varying(50),
    backtest_history jsonb,
    adjustment_history jsonb,
    performance_attribution jsonb,
    target_raise numeric,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: ramp_network_config; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.ramp_network_config (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    organization_id uuid,
    api_key_encrypted text NOT NULL,
    host_app_name text NOT NULL,
    host_logo_url text NOT NULL,
    enabled_flows text[] DEFAULT ARRAY['ONRAMP'::text, 'OFFRAMP'::text] NOT NULL,
    environment text DEFAULT 'production'::text NOT NULL,
    webhook_secret_encrypted text,
    configuration jsonb DEFAULT '{}'::jsonb,
    is_active boolean DEFAULT true NOT NULL,
    created_by uuid,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT ramp_network_config_environment_check CHECK ((environment = ANY (ARRAY['staging'::text, 'production'::text])))
);


--
-- Name: TABLE ramp_network_config; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.ramp_network_config IS 'RAMP Network API configuration per organization';


--
-- Name: ramp_supported_assets; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.ramp_supported_assets (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    symbol text NOT NULL,
    name text NOT NULL,
    chain text NOT NULL,
    type text NOT NULL,
    address text,
    logo_url text,
    enabled boolean DEFAULT true NOT NULL,
    hidden boolean DEFAULT false NOT NULL,
    decimals integer NOT NULL,
    price_data jsonb,
    currency_code text DEFAULT 'USD'::text NOT NULL,
    min_purchase_amount numeric(20,8),
    max_purchase_amount numeric(20,8),
    min_purchase_crypto_amount text,
    network_fee numeric(20,8),
    flow_type text NOT NULL,
    last_updated timestamp with time zone DEFAULT now() NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT ramp_supported_assets_flow_type_check CHECK ((flow_type = ANY (ARRAY['onramp'::text, 'offramp'::text, 'both'::text])))
);


--
-- Name: TABLE ramp_supported_assets; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.ramp_supported_assets IS 'Cache of RAMP Network supported assets with pricing and limits';


--
-- Name: ramp_transaction_events; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.ramp_transaction_events (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    transaction_id uuid NOT NULL,
    event_type text NOT NULL,
    event_data jsonb NOT NULL,
    ramp_event_id text,
    "timestamp" timestamp with time zone DEFAULT now() NOT NULL,
    session_id text,
    user_agent text,
    ip_address inet
);


--
-- Name: TABLE ramp_transaction_events; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.ramp_transaction_events IS 'Detailed event tracking for RAMP Network transactions';


--
-- Name: ramp_webhook_events; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.ramp_webhook_events (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    event_id text NOT NULL,
    event_type text NOT NULL,
    flow_type text NOT NULL,
    payload jsonb NOT NULL,
    processing_status text DEFAULT 'pending'::text NOT NULL,
    error_message text,
    processed_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT ramp_webhook_events_flow_type_check CHECK ((flow_type = ANY (ARRAY['onramp'::text, 'offramp'::text]))),
    CONSTRAINT ramp_webhook_events_processing_status_check CHECK ((processing_status = ANY (ARRAY['pending'::text, 'processed'::text, 'failed'::text])))
);


--
-- Name: TABLE ramp_webhook_events; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.ramp_webhook_events IS 'Stores RAMP Network webhook events for audit and processing tracking';


--
-- Name: real_estate_products; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.real_estate_products (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    project_id uuid NOT NULL,
    property_id character varying(50),
    property_name text,
    property_address text,
    property_type character varying(100),
    acquisition_date timestamp with time zone,
    building text,
    unit text,
    area_type character varying(50),
    units numeric,
    lease_number character varying(50),
    tenant text,
    lease_begin_date timestamp with time zone,
    lease_end_date timestamp with time zone,
    lease_manager text,
    lease_classification character varying(50),
    borrowing_rate numeric,
    asset_number character varying(50),
    gross_amount numeric,
    taxable_amount numeric,
    billing_frequency character varying(50),
    starting_date timestamp with time zone,
    ending_date timestamp with time zone,
    status character varying(50),
    disposition_date timestamp with time zone,
    geographic_location text,
    development_stage character varying(100),
    environmental_certifications text[],
    target_raise numeric,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: rec_price_cache; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.rec_price_cache (
    cache_id uuid DEFAULT gen_random_uuid() NOT NULL,
    date date NOT NULL,
    price numeric NOT NULL,
    market_type character varying(50) NOT NULL,
    region character varying(50) NOT NULL,
    source character varying(100) NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: redemption_analytics; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.redemption_analytics (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    redemption_window_id uuid NOT NULL,
    total_eligible_tokens numeric(78,18) DEFAULT 0,
    total_requested_tokens numeric(78,18) DEFAULT 0,
    total_approved_tokens numeric(78,18) DEFAULT 0,
    total_processed_tokens numeric(78,18) DEFAULT 0,
    eligible_investors integer DEFAULT 0,
    participating_investors integer DEFAULT 0,
    average_request_size numeric(78,18) DEFAULT 0,
    median_request_size numeric(78,18) DEFAULT 0,
    average_processing_time interval,
    pro_rata_factor_applied numeric(5,4) DEFAULT 1.0000,
    total_fees_collected numeric(78,18) DEFAULT 0,
    calculated_at timestamp with time zone DEFAULT now()
);


--
-- Name: TABLE redemption_analytics; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.redemption_analytics IS 'Real-time analytics and metrics for redemption window performance tracking';


--
-- Name: redemption_approvers; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.redemption_approvers (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    redemption_id uuid NOT NULL,
    name text NOT NULL,
    role text NOT NULL,
    avatar_url text,
    approved boolean DEFAULT false NOT NULL,
    approved_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    approver_id text NOT NULL,
    status text DEFAULT 'pending'::text,
    comments text,
    decision_date timestamp with time zone,
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT redemption_approvers_status_check CHECK ((status = ANY (ARRAY['pending'::text, 'approved'::text, 'rejected'::text, 'delegated'::text])))
);


--
-- Name: TABLE redemption_approvers; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.redemption_approvers IS 'Comprehensive approval tracking for redemption requests with multi-signature workflow support';


--
-- Name: COLUMN redemption_approvers.approver_id; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.redemption_approvers.approver_id IS 'ID of the user who needs to approve this request';


--
-- Name: COLUMN redemption_approvers.status; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.redemption_approvers.status IS 'Current approval status: pending, approved, rejected, delegated';


--
-- Name: COLUMN redemption_approvers.comments; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.redemption_approvers.comments IS 'Optional comments from the approver';


--
-- Name: COLUMN redemption_approvers.decision_date; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.redemption_approvers.decision_date IS 'When the approval decision was made';


--
-- Name: COLUMN redemption_approvers.updated_at; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.redemption_approvers.updated_at IS 'Last update timestamp, automatically maintained';


--
-- Name: redemption_notifications; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.redemption_notifications (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    redemption_window_id uuid NOT NULL,
    user_id uuid NOT NULL,
    notification_type text NOT NULL,
    title text NOT NULL,
    message text NOT NULL,
    is_read boolean DEFAULT false,
    sent_at timestamp with time zone DEFAULT now(),
    read_at timestamp with time zone,
    CONSTRAINT chk_notifications_type CHECK ((notification_type = ANY (ARRAY['window_opening'::text, 'window_closing'::text, 'request_approved'::text, 'request_rejected'::text, 'processing_complete'::text, 'settlement_ready'::text])))
);


--
-- Name: TABLE redemption_notifications; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.redemption_notifications IS 'User notifications related to redemption windows and request status changes';


--
-- Name: redemption_requests; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.redemption_requests (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    token_amount numeric NOT NULL,
    token_type text NOT NULL,
    redemption_type text NOT NULL,
    status text NOT NULL,
    source_wallet_address text NOT NULL,
    destination_wallet_address text NOT NULL,
    conversion_rate numeric NOT NULL,
    investor_name text,
    investor_id text,
    required_approvals integer DEFAULT 1 NOT NULL,
    is_bulk_redemption boolean DEFAULT false,
    investor_count integer DEFAULT 1,
    rejection_reason text,
    rejected_by text,
    rejection_timestamp timestamp with time zone,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    project_id uuid,
    organization_id uuid,
    eligibility_check_id uuid,
    window_id uuid,
    distribution_ids uuid[] DEFAULT '{}'::uuid[],
    validation_results jsonb DEFAULT '{}'::jsonb,
    business_rules_version text DEFAULT '1.0'::text,
    token_symbol text,
    distribution_id uuid,
    distribution_date timestamp with time zone,
    distribution_tx_hash text,
    usdc_amount numeric,
    redemption_window_id uuid,
    requested_by uuid,
    approved_by uuid,
    processed_by uuid,
    priority_level integer DEFAULT 1,
    estimated_processing_time interval,
    actual_processing_time interval,
    compliance_status text DEFAULT 'pending'::text,
    redemption_fee numeric(78,18) DEFAULT 0,
    net_redemption_amount numeric(78,18),
    pro_rata_adjustment numeric(78,18) DEFAULT 0,
    CONSTRAINT chk_redemption_requests_compliance_status CHECK ((compliance_status = ANY (ARRAY['pending'::text, 'approved'::text, 'rejected'::text, 'requires_review'::text]))),
    CONSTRAINT chk_redemption_requests_priority_level CHECK (((priority_level >= 1) AND (priority_level <= 5)))
);


--
-- Name: stablecoin_products; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.stablecoin_products (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    project_id uuid NOT NULL,
    asset_name character varying(255),
    asset_symbol character varying(50),
    asset_type character varying(100),
    issuer character varying(255),
    blockchain_network character varying(100),
    smart_contract_address character varying(255),
    issuance_date timestamp with time zone,
    total_supply numeric(18,8),
    circulating_supply numeric(18,8),
    peg_value numeric(10,4),
    fractionalization_enabled boolean DEFAULT true,
    compliance_rules text,
    collateral_type character varying(50),
    collateral_ratio numeric(5,2),
    overcollateralization_threshold numeric(5,2),
    liquidation_terms text,
    stability_mechanism text,
    rebase_frequency character varying(50),
    algorithm_description text,
    provenance_history_enabled boolean DEFAULT true,
    collateral_type_enum character varying(50),
    reserve_management_policy text,
    audit_frequency character varying(50),
    redemption_mechanism text,
    depeg_risk_mitigation text[],
    status character varying(50),
    target_raise numeric,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    embedded_rights text,
    reserve_assets text[],
    reserve_audit_frequency character varying,
    reserve_custodian character varying,
    reserve_insurance boolean,
    collateral_assets text[],
    minimum_collateralization_ratio numeric,
    liquidation_penalty numeric,
    oracle_provider character varying,
    interest_rate numeric,
    commodity_type character varying,
    storage_provider character varying,
    physical_redemption boolean,
    redemption_fee numeric,
    audit_provider character varying,
    algorithm_type character varying,
    secondary_token_symbol character varying,
    expansion_mechanism character varying,
    contraction_mechanism character varying,
    governance_token character varying,
    rebase_oracle character varying,
    positive_rebase_limit numeric,
    negative_rebase_limit numeric,
    rebase_governance character varying
);


--
-- Name: structured_products; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.structured_products (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    project_id uuid NOT NULL,
    product_id text,
    product_name text,
    issuer text,
    underlying_assets text[],
    payoff_structure character varying(100),
    barrier_level numeric,
    coupon_rate numeric,
    strike_price numeric,
    protection_level numeric,
    currency character varying(10),
    nominal_amount numeric,
    risk_indicators numeric,
    issue_date timestamp with time zone,
    maturity_date timestamp with time zone,
    status character varying(50),
    event_history jsonb,
    redemption_date timestamp with time zone,
    valuation_history jsonb,
    monitoring_triggers jsonb,
    target_raise numeric,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    target_audience character varying,
    distribution_strategy character varying,
    risk_rating integer,
    complex_features jsonb
);


--
-- Name: redemption_rules_with_product_details; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.redemption_rules_with_product_details AS
 WITH product_details AS (
         SELECT rr_1.id AS redemption_rule_id,
            'asset_backed_products'::text AS product_table,
            to_jsonb(abp.*) AS product_details,
            abp.target_raise AS product_target_raise
           FROM (public.redemption_rules rr_1
             JOIN public.asset_backed_products abp ON ((rr_1.product_id = abp.id)))
          WHERE (rr_1.product_type = 'receivables'::text)
        UNION ALL
         SELECT rr_1.id AS redemption_rule_id,
            'bond_products'::text AS product_table,
            to_jsonb(bp.*) AS product_details,
            bp.target_raise AS product_target_raise
           FROM (public.redemption_rules rr_1
             JOIN public.bond_products bp ON ((rr_1.product_id = bp.id)))
          WHERE (rr_1.product_type = 'bonds'::text)
        UNION ALL
         SELECT rr_1.id AS redemption_rule_id,
            'collectibles_products'::text AS product_table,
            to_jsonb(cp.*) AS product_details,
            cp.target_raise AS product_target_raise
           FROM (public.redemption_rules rr_1
             JOIN public.collectibles_products cp ON ((rr_1.product_id = cp.id)))
          WHERE (rr_1.product_type = 'collectibles'::text)
        UNION ALL
         SELECT rr_1.id AS redemption_rule_id,
            'commodities_products'::text AS product_table,
            to_jsonb(cop.*) AS product_details,
            cop.target_raise AS product_target_raise
           FROM (public.redemption_rules rr_1
             JOIN public.commodities_products cop ON ((rr_1.product_id = cop.id)))
          WHERE (rr_1.product_type = 'commodities'::text)
        UNION ALL
         SELECT rr_1.id AS redemption_rule_id,
            'digital_tokenized_fund_products'::text AS product_table,
            to_jsonb(dtfp.*) AS product_details,
            dtfp.target_raise AS product_target_raise
           FROM (public.redemption_rules rr_1
             JOIN public.digital_tokenized_fund_products dtfp ON ((rr_1.product_id = dtfp.id)))
          WHERE (rr_1.product_type = 'digital_tokenised_fund'::text)
        UNION ALL
         SELECT rr_1.id AS redemption_rule_id,
            'energy_products'::text AS product_table,
            to_jsonb(ep.*) AS product_details,
            ep.target_raise AS product_target_raise
           FROM (public.redemption_rules rr_1
             JOIN public.energy_products ep ON ((rr_1.product_id = ep.id)))
          WHERE (rr_1.product_type = ANY (ARRAY['energy'::text, 'solar_wind_climate'::text]))
        UNION ALL
         SELECT rr_1.id AS redemption_rule_id,
            'equity_products'::text AS product_table,
            to_jsonb(eqp.*) AS product_details,
            eqp.target_raise AS product_target_raise
           FROM (public.redemption_rules rr_1
             JOIN public.equity_products eqp ON ((rr_1.product_id = eqp.id)))
          WHERE (rr_1.product_type = 'equity'::text)
        UNION ALL
         SELECT rr_1.id AS redemption_rule_id,
            'fund_products'::text AS product_table,
            to_jsonb(fp.*) AS product_details,
            fp.target_raise AS product_target_raise
           FROM (public.redemption_rules rr_1
             JOIN public.fund_products fp ON ((rr_1.product_id = fp.id)))
          WHERE (rr_1.product_type = 'funds_etfs_etps'::text)
        UNION ALL
         SELECT rr_1.id AS redemption_rule_id,
            'infrastructure_products'::text AS product_table,
            to_jsonb(ip.*) AS product_details,
            ip.target_raise AS product_target_raise
           FROM (public.redemption_rules rr_1
             JOIN public.infrastructure_products ip ON ((rr_1.product_id = ip.id)))
          WHERE (rr_1.product_type = 'infrastructure'::text)
        UNION ALL
         SELECT rr_1.id AS redemption_rule_id,
            'private_debt_products'::text AS product_table,
            to_jsonb(pdp.*) AS product_details,
            pdp.target_raise AS product_target_raise
           FROM (public.redemption_rules rr_1
             JOIN public.private_debt_products pdp ON ((rr_1.product_id = pdp.id)))
          WHERE (rr_1.product_type = 'private_debt'::text)
        UNION ALL
         SELECT rr_1.id AS redemption_rule_id,
            'private_equity_products'::text AS product_table,
            to_jsonb(pep.*) AS product_details,
            pep.target_raise AS product_target_raise
           FROM (public.redemption_rules rr_1
             JOIN public.private_equity_products pep ON ((rr_1.product_id = pep.id)))
          WHERE (rr_1.product_type = 'private_equity'::text)
        UNION ALL
         SELECT rr_1.id AS redemption_rule_id,
            'quantitative_investment_strategies_products'::text AS product_table,
            to_jsonb(qisp.*) AS product_details,
            qisp.target_raise AS product_target_raise
           FROM (public.redemption_rules rr_1
             JOIN public.quantitative_investment_strategies_products qisp ON ((rr_1.product_id = qisp.id)))
          WHERE (rr_1.product_type = 'quantitative_investment_strategies'::text)
        UNION ALL
         SELECT rr_1.id AS redemption_rule_id,
            'real_estate_products'::text AS product_table,
            to_jsonb(rep.*) AS product_details,
            rep.target_raise AS product_target_raise
           FROM (public.redemption_rules rr_1
             JOIN public.real_estate_products rep ON ((rr_1.product_id = rep.id)))
          WHERE (rr_1.product_type = 'real_estate'::text)
        UNION ALL
         SELECT rr_1.id AS redemption_rule_id,
            'stablecoin_products'::text AS product_table,
            to_jsonb(sp.*) AS product_details,
            sp.target_raise AS product_target_raise
           FROM (public.redemption_rules rr_1
             JOIN public.stablecoin_products sp ON ((rr_1.product_id = sp.id)))
          WHERE (rr_1.product_type = ANY (ARRAY['fiat_backed_stablecoin'::text, 'crypto_backed_stablecoin'::text, 'commodity_backed_stablecoin'::text, 'algorithmic_stablecoin'::text, 'rebasing_stablecoin'::text]))
        UNION ALL
         SELECT rr_1.id AS redemption_rule_id,
            'structured_products'::text AS product_table,
            to_jsonb(stp.*) AS product_details,
            stp.target_raise AS product_target_raise
           FROM (public.redemption_rules rr_1
             JOIN public.structured_products stp ON ((rr_1.product_id = stp.id)))
          WHERE (rr_1.product_type = 'structured_products'::text)
        ), capacity_info AS (
         SELECT rr_1.id AS redemption_rule_id,
            rc.target_raise_amount,
            rc.total_redeemed_amount,
            rc.available_capacity,
            rc.capacity_percentage
           FROM (public.redemption_rules rr_1
             CROSS JOIN LATERAL public.get_redemption_capacity(rr_1.id) rc(target_raise_amount, total_redeemed_amount, available_capacity, capacity_percentage))
        )
 SELECT rr.id,
    rr.rule_id,
    rr.redemption_type,
    rr.require_multi_sig_approval,
    rr.required_approvers,
    rr.total_approvers,
    rr.notify_investors,
    rr.settlement_method,
    rr.immediate_execution,
    rr.use_latest_nav,
    rr.allow_any_time_redemption,
    rr.repurchase_frequency,
    rr.lock_up_period,
    rr.submission_window_days,
    rr.lock_tokens_on_request,
    rr.use_window_nav,
    rr.enable_pro_rata_distribution,
    rr.queue_unprocessed_requests,
    rr.enable_admin_override,
    rr.created_at,
    rr.updated_at,
    rr.project_id,
    rr.organization_id,
    rr.product_type,
    rr.product_id,
    rr.is_redemption_open,
    rr.open_after_date,
    rr.allow_continuous_redemption,
    rr.max_redemption_percentage,
    rr.redemption_eligibility_rules,
    rr.target_raise_amount,
    p.name AS project_name,
    p.project_type,
    pd.product_table,
    pd.product_details,
        CASE
            WHEN (pd.product_table = 'bond_products'::text) THEN (pd.product_details ->> 'issuer_name'::text)
            WHEN (pd.product_table = 'equity_products'::text) THEN (pd.product_details ->> 'company_name'::text)
            WHEN (pd.product_table = 'fund_products'::text) THEN (pd.product_details ->> 'fund_name'::text)
            WHEN (pd.product_table = 'stablecoin_products'::text) THEN (pd.product_details ->> 'asset_name'::text)
            WHEN (pd.product_table = 'real_estate_products'::text) THEN (pd.product_details ->> 'property_name'::text)
            WHEN (pd.product_table = 'energy_products'::text) THEN (pd.product_details ->> 'project_name'::text)
            WHEN (pd.product_table = 'commodities_products'::text) THEN (pd.product_details ->> 'commodity_name'::text)
            WHEN (pd.product_table = 'private_equity_products'::text) THEN (pd.product_details ->> 'fund_name'::text)
            ELSE (pd.product_details ->> 'name'::text)
        END AS product_name,
    COALESCE((pd.product_details ->> 'status'::text), (pd.product_details ->> 'product_status'::text)) AS product_status,
    COALESCE((pd.product_details ->> 'currency'::text), (pd.product_details ->> 'base_currency'::text)) AS product_currency,
    COALESCE(pd.product_target_raise, rr.target_raise_amount) AS effective_target_raise,
    ci.total_redeemed_amount,
    ci.available_capacity,
    ci.capacity_percentage,
        CASE
            WHEN (rr.target_raise_amount IS NULL) THEN 'NO_LIMIT'::text
            WHEN (ci.capacity_percentage >= (100)::numeric) THEN 'FULLY_REDEEMED'::text
            WHEN (ci.capacity_percentage >= (90)::numeric) THEN 'NEAR_CAPACITY'::text
            WHEN (ci.capacity_percentage >= (50)::numeric) THEN 'MODERATE_USAGE'::text
            ELSE 'LOW_USAGE'::text
        END AS capacity_status
   FROM (((public.redemption_rules rr
     JOIN public.projects p ON ((rr.project_id = p.id)))
     LEFT JOIN product_details pd ON ((rr.id = pd.redemption_rule_id)))
     LEFT JOIN capacity_info ci ON ((rr.id = ci.redemption_rule_id)))
  ORDER BY rr.created_at DESC;


--
-- Name: redemption_settlements; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.redemption_settlements (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    redemption_request_id uuid NOT NULL,
    settlement_type text NOT NULL,
    status text DEFAULT 'initiated'::text NOT NULL,
    token_contract_address text NOT NULL,
    token_amount numeric(78,18) NOT NULL,
    burn_transaction_hash text,
    burn_gas_used bigint,
    burn_gas_price numeric(78,18),
    burn_status text DEFAULT 'pending'::text,
    burn_confirmed_at timestamp with time zone,
    transfer_amount numeric(78,18) NOT NULL,
    transfer_currency text DEFAULT 'USDC'::text NOT NULL,
    transfer_to_address text NOT NULL,
    transfer_transaction_hash text,
    transfer_gas_used bigint,
    transfer_gas_price numeric(78,18),
    transfer_status text DEFAULT 'pending'::text,
    transfer_confirmed_at timestamp with time zone,
    nav_used numeric(18,6),
    exchange_rate numeric(18,6),
    settlement_fee numeric(78,18) DEFAULT 0,
    gas_estimate numeric(78,18),
    estimated_completion timestamp with time zone,
    actual_completion timestamp with time zone,
    error_message text,
    retry_count integer DEFAULT 0,
    last_retry_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    created_by uuid,
    project_id uuid,
    organization_id uuid,
    CONSTRAINT positive_token_amount CHECK ((token_amount > (0)::numeric)),
    CONSTRAINT positive_transfer_amount CHECK ((transfer_amount > (0)::numeric)),
    CONSTRAINT redemption_settlements_burn_status_check CHECK ((burn_status = ANY (ARRAY['pending'::text, 'confirmed'::text, 'failed'::text]))),
    CONSTRAINT redemption_settlements_settlement_type_check CHECK ((settlement_type = ANY (ARRAY['standard'::text, 'interval_fund'::text, 'emergency'::text]))),
    CONSTRAINT redemption_settlements_status_check CHECK ((status = ANY (ARRAY['initiated'::text, 'burning_tokens'::text, 'transferring_funds'::text, 'confirming'::text, 'completed'::text, 'failed'::text, 'cancelled'::text]))),
    CONSTRAINT redemption_settlements_transfer_status_check CHECK ((transfer_status = ANY (ARRAY['pending'::text, 'confirmed'::text, 'failed'::text]))),
    CONSTRAINT valid_retry_count CHECK ((retry_count >= 0))
);


--
-- Name: TABLE redemption_settlements; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.redemption_settlements IS 'Tracks settlement processing for redemption requests including token burning and fund transfers';


--
-- Name: redemption_system_health; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.redemption_system_health AS
 SELECT count(DISTINCT rr.project_id) AS projects_with_rules,
    count(*) AS total_rules,
    count(*) FILTER (WHERE (rr.is_redemption_open = true)) AS open_redemption_projects,
    count(*) FILTER (WHERE (rr.allow_continuous_redemption = true)) AS continuous_redemption_projects,
    0 AS active_windows,
    COALESCE(count(DISTINCT re.investor_id), (0)::bigint) AS eligible_investors,
    COALESCE(sum(re.total_max_redeemable), (0)::numeric) AS total_redeemable_amount
   FROM (public.redemption_rules rr
     LEFT JOIN public.active_redemption_opportunities re ON ((re.project_id = rr.project_id)));


--
-- Name: redemption_window_templates; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.redemption_window_templates (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    name text NOT NULL,
    description text,
    submission_date_mode text DEFAULT 'fixed'::text NOT NULL,
    processing_date_mode text DEFAULT 'fixed'::text NOT NULL,
    lockup_days integer DEFAULT 0,
    processing_offset_days integer DEFAULT 1 NOT NULL,
    default_nav_source text DEFAULT 'manual'::text,
    default_enable_pro_rata_distribution boolean DEFAULT true,
    default_auto_process boolean DEFAULT false,
    is_active boolean DEFAULT true,
    created_by uuid,
    project_id uuid,
    organization_id uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT chk_templates_lockup_days_non_negative CHECK ((lockup_days >= 0)),
    CONSTRAINT chk_templates_processing_offset_non_negative CHECK ((processing_offset_days >= 0))
);


--
-- Name: TABLE redemption_window_templates; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.redemption_window_templates IS 'Templates for creating standardized redemption windows with predefined configurations';


--
-- Name: redemption_windows; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.redemption_windows (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    start_date timestamp with time zone NOT NULL,
    end_date timestamp with time zone NOT NULL,
    submission_start_date timestamp with time zone NOT NULL,
    submission_end_date timestamp with time zone NOT NULL,
    nav numeric(18,6),
    nav_date date,
    nav_source text,
    status text DEFAULT 'upcoming'::text NOT NULL,
    max_redemption_amount numeric(78,18),
    current_requests integer DEFAULT 0,
    total_request_value numeric(78,18) DEFAULT 0,
    approved_requests integer DEFAULT 0,
    approved_value numeric(78,18) DEFAULT 0,
    rejected_requests integer DEFAULT 0,
    rejected_value numeric(78,18) DEFAULT 0,
    queued_requests integer DEFAULT 0,
    queued_value numeric(78,18) DEFAULT 0,
    processed_by uuid,
    processed_at timestamp with time zone,
    notes text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    created_by uuid,
    project_id uuid,
    organization_id uuid,
    submission_date_mode public.submission_date_mode_enum DEFAULT 'fixed'::public.submission_date_mode_enum NOT NULL,
    processing_date_mode public.processing_date_mode_enum DEFAULT 'fixed'::public.processing_date_mode_enum NOT NULL,
    lockup_days integer,
    processing_offset_days integer DEFAULT 1 NOT NULL,
    name text,
    enable_pro_rata_distribution boolean DEFAULT true,
    auto_process boolean DEFAULT false,
    is_active boolean DEFAULT true,
    is_template boolean DEFAULT false,
    min_redemption_amount numeric(78,18) DEFAULT 0,
    pro_rata_factor numeric(5,4) DEFAULT 1.0000,
    processing_fee_percentage numeric(5,4) DEFAULT 0.0000,
    early_redemption_penalty numeric(5,4) DEFAULT 0.0000,
    submission_status text DEFAULT 'not_started'::text,
    processing_status text DEFAULT 'pending'::text,
    last_modified_by uuid,
    last_status_change_at timestamp with time zone DEFAULT now(),
    approved_by uuid,
    approved_at timestamp with time zone,
    CONSTRAINT chk_lockup_days_non_negative CHECK ((lockup_days >= 0)),
    CONSTRAINT chk_processing_offset_days_non_negative CHECK ((processing_offset_days >= 0)),
    CONSTRAINT chk_redemption_windows_processing_status CHECK ((processing_status = ANY (ARRAY['pending'::text, 'in_progress'::text, 'completed'::text, 'failed'::text, 'cancelled'::text]))),
    CONSTRAINT chk_redemption_windows_submission_status CHECK ((submission_status = ANY (ARRAY['not_started'::text, 'open'::text, 'closed'::text, 'extended'::text, 'cancelled'::text]))),
    CONSTRAINT positive_nav CHECK (((nav IS NULL) OR (nav > (0)::numeric))),
    CONSTRAINT redemption_windows_nav_source_check CHECK ((nav_source = ANY (ARRAY['manual'::text, 'oracle'::text, 'calculated'::text]))),
    CONSTRAINT redemption_windows_status_check CHECK ((status = ANY (ARRAY['upcoming'::text, 'submission_open'::text, 'submission_closed'::text, 'processing'::text, 'completed'::text, 'cancelled'::text]))),
    CONSTRAINT valid_submission_dates CHECK ((submission_end_date > submission_start_date)),
    CONSTRAINT valid_window_dates CHECK ((end_date > start_date))
);


--
-- Name: TABLE redemption_windows; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.redemption_windows IS 'Specific instances of redemption windows for interval funds';


--
-- Name: COLUMN redemption_windows.project_id; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.redemption_windows.project_id IS 'project_id';


--
-- Name: COLUMN redemption_windows.submission_date_mode; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.redemption_windows.submission_date_mode IS 'Mode for submission dates: "fixed" (use specific dates) or "relative" (days after issuance)';


--
-- Name: COLUMN redemption_windows.processing_date_mode; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.redemption_windows.processing_date_mode IS 'Mode for processing dates: "fixed" (use specific dates), "same_day" (same as submission), or "offset" (submission + offset days)';


--
-- Name: COLUMN redemption_windows.lockup_days; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.redemption_windows.lockup_days IS 'Number of days after issuance when redemption submissions can begin (0 = same day)';


--
-- Name: COLUMN redemption_windows.processing_offset_days; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.redemption_windows.processing_offset_days IS 'Number of days after submission period for processing (default 1 = next day)';


--
-- Name: COLUMN redemption_windows.enable_pro_rata_distribution; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.redemption_windows.enable_pro_rata_distribution IS 'Enable proportional distribution when redemption demand exceeds capacity';


--
-- Name: COLUMN redemption_windows.auto_process; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.redemption_windows.auto_process IS 'Automatically process approved redemption requests without manual intervention';


--
-- Name: COLUMN redemption_windows.submission_status; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.redemption_windows.submission_status IS 'Current status of the submission period (not_started, open, closed, extended, cancelled)';


--
-- Name: COLUMN redemption_windows.processing_status; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.redemption_windows.processing_status IS 'Current status of the processing phase (pending, in_progress, completed, failed, cancelled)';


--
-- Name: regulatory_equivalence_mapping; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.regulatory_equivalence_mapping (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    home_jurisdiction character(2) NOT NULL,
    equivalent_jurisdiction character(2) NOT NULL,
    equivalence_type text NOT NULL,
    regulatory_framework text NOT NULL,
    recognition_date date NOT NULL,
    expiry_date date,
    mutual_recognition boolean DEFAULT false,
    passport_rights boolean DEFAULT false,
    simplified_procedures boolean DEFAULT false,
    notes text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: regulatory_exemptions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.regulatory_exemptions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    region text NOT NULL,
    country text NOT NULL,
    exemption_type text NOT NULL,
    explanation text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT regulatory_exemptions_region_check CHECK ((region = ANY (ARRAY['Americas'::text, 'Europe'::text, 'Asia-Pacific'::text])))
);


--
-- Name: renewable_energy_credits; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.renewable_energy_credits (
    rec_id uuid DEFAULT gen_random_uuid() NOT NULL,
    asset_id uuid,
    quantity integer NOT NULL,
    vintage_year integer NOT NULL,
    market_type character varying(50) NOT NULL,
    price_per_rec numeric(10,2) NOT NULL,
    total_value numeric(15,2) NOT NULL,
    certification character varying(100),
    status character varying(50) NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    receivable_id uuid,
    incentive_id uuid,
    project_id uuid
);


--
-- Name: TABLE renewable_energy_credits; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.renewable_energy_credits IS 'Renewable Energy Credits with optional link to climate_incentives';


--
-- Name: COLUMN renewable_energy_credits.receivable_id; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.renewable_energy_credits.receivable_id IS 'Optional link to climate receivable - allows RECs to be associated with specific receivables';


--
-- Name: COLUMN renewable_energy_credits.incentive_id; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.renewable_energy_credits.incentive_id IS 'Links to climate_incentives.incentive_id for synchronized records';


--
-- Name: COLUMN renewable_energy_credits.project_id; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.renewable_energy_credits.project_id IS 'Links to projects.id for project-based filtering';


--
-- Name: restriction_statistics; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.restriction_statistics AS
 SELECT count(*) AS total_rules,
    count(*) FILTER (WHERE (onboarding_restrictions.active = true)) AS active_rules,
    count(*) FILTER (WHERE ((onboarding_restrictions.type = 'COUNTRY'::text) AND (onboarding_restrictions.active = true))) AS blocked_countries,
    count(*) FILTER (WHERE ((onboarding_restrictions.type = 'INVESTOR_TYPE'::text) AND (onboarding_restrictions.active = true))) AS blocked_investor_types
   FROM public.onboarding_restrictions;


--
-- Name: restriction_validation_logs; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.restriction_validation_logs (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    wallet_id uuid NOT NULL,
    transaction_hash text,
    validation_result boolean NOT NULL,
    failed_rules jsonb DEFAULT '[]'::jsonb,
    warnings jsonb DEFAULT '[]'::jsonb,
    validated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP
);


--
-- Name: TABLE restriction_validation_logs; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.restriction_validation_logs IS 'Logs all restriction validation attempts for compliance and auditing';


--
-- Name: ripple_payments; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.ripple_payments (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    hash text NOT NULL,
    from_account text NOT NULL,
    to_account text NOT NULL,
    amount numeric NOT NULL,
    currency text DEFAULT 'XRP'::text NOT NULL,
    fee numeric DEFAULT 0.000012,
    status text DEFAULT 'pending'::text NOT NULL,
    ledger_index integer,
    sequence_number integer,
    destination_tag integer,
    source_tag integer,
    memo text,
    payment_type text DEFAULT 'standard'::text,
    from_country text,
    to_country text,
    exchange_rate numeric,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT ripple_payments_payment_type_check CHECK ((payment_type = ANY (ARRAY['standard'::text, 'cross_border'::text, 'domestic'::text]))),
    CONSTRAINT ripple_payments_status_check CHECK ((status = ANY (ARRAY['pending'::text, 'validated'::text, 'failed'::text])))
);


--
-- Name: TABLE ripple_payments; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.ripple_payments IS 'Stores Ripple/XRP payment transactions including cross-border payments via ODL';


--
-- Name: risk_assessments; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.risk_assessments (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    user_id text,
    wallet_address text,
    assessment_type text NOT NULL,
    risk_level text NOT NULL,
    risk_score numeric,
    factors jsonb DEFAULT '{}'::jsonb,
    recommendations jsonb DEFAULT '{}'::jsonb,
    metadata jsonb DEFAULT '{}'::jsonb,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT risk_assessments_risk_level_check CHECK ((risk_level = ANY (ARRAY['LOW'::text, 'MEDIUM'::text, 'HIGH'::text, 'CRITICAL'::text])))
);


--
-- Name: role_permissions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.role_permissions (
    role_id uuid NOT NULL,
    permission_name text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);


--
-- Name: rules; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.rules (
    rule_id uuid DEFAULT gen_random_uuid() NOT NULL,
    rule_name text NOT NULL,
    rule_type text NOT NULL,
    rule_details jsonb,
    created_by uuid NOT NULL,
    status text DEFAULT 'active'::text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    is_template boolean DEFAULT false,
    CONSTRAINT rules_created_by_uuid_check CHECK (((created_by)::text ~ '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'::text))
);


--
-- Name: secure_keys; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.secure_keys (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    key_id text NOT NULL,
    encrypted_key text NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    last_used_at timestamp with time zone
);


--
-- Name: security_audit_logs; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.security_audit_logs (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    event_type text NOT NULL,
    severity text NOT NULL,
    user_id text,
    wallet_address text,
    details jsonb DEFAULT '{}'::jsonb,
    metadata jsonb DEFAULT '{}'::jsonb,
    ip_address text,
    user_agent text,
    created_at timestamp with time zone DEFAULT now(),
    CONSTRAINT security_audit_logs_severity_check CHECK ((severity = ANY (ARRAY['LOW'::text, 'MEDIUM'::text, 'HIGH'::text, 'CRITICAL'::text])))
);


--
-- Name: security_events; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.security_events (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    "timestamp" timestamp with time zone DEFAULT now() NOT NULL,
    event_type text NOT NULL,
    severity text NOT NULL,
    user_id uuid,
    wallet_id uuid,
    wallet_address text,
    ip_address text,
    device_info text,
    transaction_hash text,
    contract_address text,
    details text,
    metadata jsonb,
    status text,
    related_events text[],
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone
);


--
-- Name: TABLE security_events; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.security_events IS 'Stores security-related events and incidents across the platform';


--
-- Name: settlement_metrics; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.settlement_metrics (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    date date NOT NULL,
    total_settlements integer DEFAULT 0,
    successful_settlements integer DEFAULT 0,
    failed_settlements integer DEFAULT 0,
    average_processing_time interval,
    total_tokens_burned numeric(78,18) DEFAULT 0,
    total_funds_transferred numeric(78,18) DEFAULT 0,
    total_gas_used numeric(78,18) DEFAULT 0,
    total_fees_collected numeric(78,18) DEFAULT 0,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: TABLE settlement_metrics; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.settlement_metrics IS 'Daily aggregated metrics for settlement processing performance';


--
-- Name: settlement_summary; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.settlement_summary AS
 SELECT rs.id,
    rs.redemption_request_id,
    rs.settlement_type,
    rs.status,
    rs.token_amount,
    rs.transfer_amount,
    rs.nav_used,
    rs.created_at,
    rs.actual_completion,
    COALESCE(rs.actual_completion, rs.estimated_completion) AS completion_time,
        CASE
            WHEN (rs.actual_completion IS NOT NULL) THEN EXTRACT(epoch FROM (rs.actual_completion - rs.created_at))
            ELSE NULL::numeric
        END AS processing_time_seconds
   FROM public.redemption_settlements rs;


--
-- Name: sidebar_configurations; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.sidebar_configurations (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name character varying(255) NOT NULL,
    description text,
    min_role_priority integer,
    organization_id uuid,
    configuration_data jsonb NOT NULL,
    is_active boolean DEFAULT true,
    is_default boolean DEFAULT false,
    created_by uuid,
    updated_by uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    target_role_ids uuid[],
    target_profile_type_enums public.profile_type[]
);


--
-- Name: TABLE sidebar_configurations; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.sidebar_configurations IS 'Dynamic sidebar configurations using role IDs and profile type enums (updated 2025-08-28)';


--
-- Name: COLUMN sidebar_configurations.target_role_ids; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.sidebar_configurations.target_role_ids IS 'Proper UUID references to roles table (preferred)';


--
-- Name: COLUMN sidebar_configurations.target_profile_type_enums; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.sidebar_configurations.target_profile_type_enums IS 'Proper enum references to profile_type (preferred)';


--
-- Name: sidebar_configurations_with_names; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.sidebar_configurations_with_names AS
 SELECT sc.id,
    sc.name,
    sc.description,
    sc.target_role_ids,
    sc.target_profile_type_enums,
    ARRAY( SELECT r.name
           FROM public.roles r
          WHERE (r.id = ANY (sc.target_role_ids))
          ORDER BY r.priority DESC) AS computed_role_names,
    sc.target_profile_type_enums AS computed_profile_types,
    sc.min_role_priority,
    sc.organization_id,
    sc.configuration_data,
    sc.is_active,
    sc.is_default,
    sc.created_by,
    sc.updated_by,
    sc.created_at,
    sc.updated_at
   FROM public.sidebar_configurations sc;


--
-- Name: VIEW sidebar_configurations_with_names; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON VIEW public.sidebar_configurations_with_names IS 'Sidebar configurations with computed role names and profile types (updated to use new fields 2025-08-28)';


--
-- Name: sidebar_items; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.sidebar_items (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    item_id character varying(100) NOT NULL,
    section_id uuid,
    label character varying(255) NOT NULL,
    href character varying(500) NOT NULL,
    icon character varying(100),
    description text,
    display_order integer DEFAULT 0,
    required_permissions text[],
    required_roles text[],
    min_role_priority integer,
    profile_types text[],
    requires_project boolean DEFAULT false,
    is_visible boolean DEFAULT true,
    is_active boolean DEFAULT true,
    organization_id uuid,
    created_by uuid,
    updated_by uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: sidebar_sections; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.sidebar_sections (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    section_id character varying(100) NOT NULL,
    title character varying(255) NOT NULL,
    description text,
    display_order integer DEFAULT 0,
    required_permissions text[],
    required_roles text[],
    min_role_priority integer,
    profile_types text[],
    is_active boolean DEFAULT true,
    organization_id uuid,
    created_by uuid,
    updated_by uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: signature_migration_approvals; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.signature_migration_approvals (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    migration_id uuid NOT NULL,
    approver_address text NOT NULL,
    signature text NOT NULL,
    approved_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP
);


--
-- Name: TABLE signature_migration_approvals; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.signature_migration_approvals IS 'Records guardian and owner approvals for signature migrations';


--
-- Name: signature_migrations; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.signature_migrations (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    wallet_id uuid NOT NULL,
    from_scheme text NOT NULL,
    to_scheme text NOT NULL,
    new_public_key text NOT NULL,
    new_credential_id text,
    status text DEFAULT 'pending'::text NOT NULL,
    migration_hash text NOT NULL,
    required_approvals integer DEFAULT 1 NOT NULL,
    current_approvals integer DEFAULT 0 NOT NULL,
    finalize_after timestamp with time zone,
    transaction_hash text,
    migration_data jsonb DEFAULT '{}'::jsonb,
    finalized_at timestamp with time zone,
    cancelled_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT signature_migrations_from_scheme_check CHECK ((from_scheme = ANY (ARRAY['secp256k1'::text, 'secp256r1'::text]))),
    CONSTRAINT signature_migrations_status_check CHECK ((status = ANY (ARRAY['pending'::text, 'approved'::text, 'finalized'::text, 'cancelled'::text]))),
    CONSTRAINT signature_migrations_to_scheme_check CHECK ((to_scheme = ANY (ARRAY['secp256k1'::text, 'secp256r1'::text])))
);


--
-- Name: TABLE signature_migrations; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.signature_migrations IS 'Tracks signature scheme migrations between secp256k1 (ECDSA) and secp256r1 (WebAuthn) with guardian approval workflow';


--
-- Name: COLUMN signature_migrations.migration_hash; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.signature_migrations.migration_hash IS 'Cryptographic hash for signature verification and replay protection';


--
-- Name: COLUMN signature_migrations.finalize_after; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.signature_migrations.finalize_after IS 'Timestamp after which migration can be finalized (security delay)';


--
-- Name: signatures; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.signatures (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    proposal_id uuid,
    signer text NOT NULL,
    signature text NOT NULL,
    created_at timestamp with time zone DEFAULT now()
);


--
-- Name: smart_contract_wallets; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.smart_contract_wallets (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    wallet_id uuid NOT NULL,
    diamond_proxy_address text NOT NULL,
    implementation_version text NOT NULL,
    facet_registry_address text NOT NULL,
    is_deployed boolean DEFAULT false,
    deployment_tx_hash text,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP
);


--
-- Name: stablecoin_collateral; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.stablecoin_collateral (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    stablecoin_id uuid NOT NULL,
    collateral_asset character varying(255),
    backing_amount numeric(18,8),
    custodian character varying(255),
    auditor character varying(255),
    last_audit_date timestamp with time zone,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    collateral_address text,
    collateral_symbol text,
    collateral_amount numeric,
    collateral_value_usd numeric,
    liquidation_ratio numeric,
    stability_fee numeric,
    debt_ceiling numeric,
    risk_parameters jsonb,
    oracle_price numeric,
    last_oracle_update timestamp with time zone,
    total_reserves numeric,
    backing_ratio numeric
);


--
-- Name: stage_requirements; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.stage_requirements (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    stage_id text NOT NULL,
    name text NOT NULL,
    description text,
    status text DEFAULT 'pending'::text NOT NULL,
    completed_at timestamp with time zone,
    failure_reason text,
    "order" integer NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);


--
-- Name: stripe_conversion_transactions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.stripe_conversion_transactions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid,
    stripe_payment_intent_id character varying(255),
    stripe_session_id character varying(255),
    conversion_type character varying(20) NOT NULL,
    source_currency character varying(10) NOT NULL,
    source_amount numeric(20,8) NOT NULL,
    source_network character varying(50),
    destination_currency character varying(10) NOT NULL,
    destination_amount numeric(20,8),
    destination_network character varying(50),
    destination_wallet character varying(255),
    exchange_rate numeric(20,8),
    fees numeric(20,8),
    stripe_fee numeric(20,8),
    network_fee numeric(20,8),
    status character varying(50) DEFAULT 'pending'::character varying,
    stripe_status character varying(50),
    transaction_hash character varying(255),
    block_number bigint,
    confirmations integer DEFAULT 0,
    metadata jsonb,
    error_message text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT stripe_conversion_transactions_conversion_type_check CHECK (((conversion_type)::text = ANY (ARRAY[('fiat_to_crypto'::character varying)::text, ('crypto_to_fiat'::character varying)::text])))
);


--
-- Name: TABLE stripe_conversion_transactions; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.stripe_conversion_transactions IS 'Tracks FIAT to stablecoin conversion transactions and vice versa';


--
-- Name: COLUMN stripe_conversion_transactions.conversion_type; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.stripe_conversion_transactions.conversion_type IS 'Type of conversion: fiat_to_crypto or crypto_to_fiat';


--
-- Name: COLUMN stripe_conversion_transactions.source_currency; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.stripe_conversion_transactions.source_currency IS 'Source currency code (e.g., USD, EUR for fiat, USDC, USDB for crypto)';


--
-- Name: COLUMN stripe_conversion_transactions.destination_currency; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.stripe_conversion_transactions.destination_currency IS 'Destination currency code';


--
-- Name: COLUMN stripe_conversion_transactions.status; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.stripe_conversion_transactions.status IS 'Transaction status: pending, processing, completed, failed, cancelled';


--
-- Name: COLUMN stripe_conversion_transactions.stripe_status; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.stripe_conversion_transactions.stripe_status IS 'Stripe-specific status from payment intent or session';


--
-- Name: stripe_stablecoin_accounts; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.stripe_stablecoin_accounts (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid,
    account_id character varying(255) NOT NULL,
    balance_usdc numeric(20,8) DEFAULT 0,
    balance_usdb numeric(20,8) DEFAULT 0,
    account_status character varying(50) DEFAULT 'active'::character varying,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: TABLE stripe_stablecoin_accounts; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.stripe_stablecoin_accounts IS 'Stores Stripe stablecoin account information for users';


--
-- Name: stripe_webhook_events; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.stripe_webhook_events (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    stripe_event_id character varying(255) NOT NULL,
    event_type character varying(100) NOT NULL,
    processed boolean DEFAULT false,
    data jsonb NOT NULL,
    created_at timestamp with time zone DEFAULT now()
);


--
-- Name: TABLE stripe_webhook_events; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.stripe_webhook_events IS 'Stores Stripe webhook events for processing and audit trail';


--
-- Name: subscriptions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.subscriptions (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    investor_id uuid NOT NULL,
    subscription_id text NOT NULL,
    fiat_amount numeric NOT NULL,
    currency text NOT NULL,
    confirmed boolean DEFAULT false NOT NULL,
    allocated boolean DEFAULT false NOT NULL,
    distributed boolean DEFAULT false NOT NULL,
    notes text,
    subscription_date timestamp with time zone DEFAULT now(),
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    project_id uuid
);


--
-- Name: system_processes; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.system_processes (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    process_name text NOT NULL,
    start_time timestamp with time zone DEFAULT now(),
    end_time timestamp with time zone,
    status text DEFAULT 'running'::text,
    error_details jsonb,
    metadata jsonb,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    progress double precision DEFAULT 0,
    priority character varying(10) DEFAULT 'normal'::character varying,
    notification_sent boolean DEFAULT false,
    cancellable boolean DEFAULT false
);


--
-- Name: TABLE system_processes; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.system_processes IS 'Tracks system processes and their execution status';


--
-- Name: system_process_activities; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.system_process_activities AS
 SELECT sp.id AS process_id,
    sp.process_name,
    sp.start_time,
    sp.end_time,
    sp.status,
    sp.progress,
    sp.priority,
    al.id AS activity_id,
    al.action,
    al.entity_type,
    al.entity_id,
    al.status AS activity_status,
    al."timestamp" AS activity_time,
    al.metadata AS activity_metadata
   FROM (public.system_processes sp
     LEFT JOIN public.audit_logs al ON ((sp.id = al.system_process_id)))
  ORDER BY sp.start_time DESC, al."timestamp";


--
-- Name: system_process_activity; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.system_process_activity AS
 SELECT sp.id AS process_id,
    sp.process_name,
    sp.status AS process_status,
    sp.start_time,
    sp.end_time,
    EXTRACT(epoch FROM (sp.end_time - sp.start_time)) AS duration_seconds,
    count(al.id) AS activity_count,
    count(
        CASE
            WHEN ((al.status = 'failure'::text) OR (al.status = 'failed'::text)) THEN 1
            ELSE NULL::integer
        END) AS failed_activities
   FROM (public.system_processes sp
     LEFT JOIN public.audit_logs al ON ((sp.id = al.system_process_id)))
  GROUP BY sp.id, sp.process_name, sp.status, sp.start_time, sp.end_time;


--
-- Name: system_process_performance; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.system_process_performance AS
 SELECT sp.process_name,
    count(*) AS total_executions,
    avg(EXTRACT(epoch FROM (sp.end_time - sp.start_time))) AS avg_duration_seconds,
    min(EXTRACT(epoch FROM (sp.end_time - sp.start_time))) AS min_duration_seconds,
    max(EXTRACT(epoch FROM (sp.end_time - sp.start_time))) AS max_duration_seconds,
    count(
        CASE
            WHEN (sp.status = 'completed'::text) THEN 1
            ELSE NULL::integer
        END) AS successful_executions,
    count(
        CASE
            WHEN (sp.status = 'failed'::text) THEN 1
            ELSE NULL::integer
        END) AS failed_executions,
    round((((count(
        CASE
            WHEN (sp.status = 'completed'::text) THEN 1
            ELSE NULL::integer
        END))::numeric / (count(*))::numeric) * (100)::numeric), 2) AS success_rate
   FROM public.system_processes sp
  WHERE (sp.end_time IS NOT NULL)
  GROUP BY sp.process_name
  ORDER BY (count(*)) DESC;


--
-- Name: VIEW system_process_performance; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON VIEW public.system_process_performance IS 'Performance metrics for system processes';


--
-- Name: system_settings; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.system_settings (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    key text NOT NULL,
    value text NOT NULL,
    created_at timestamp with time zone DEFAULT now()
);


--
-- Name: token_allocations; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_allocations (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    investor_id uuid NOT NULL,
    subscription_id uuid NOT NULL,
    project_id uuid,
    token_type text NOT NULL,
    token_amount numeric NOT NULL,
    distributed boolean DEFAULT false NOT NULL,
    distribution_date timestamp with time zone,
    distribution_tx_hash text,
    notes text,
    allocation_date timestamp with time zone DEFAULT now(),
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now(),
    minted boolean DEFAULT false NOT NULL,
    minting_date timestamp with time zone,
    minting_tx_hash text,
    standard public.token_standard_enum,
    symbol text,
    token_id uuid,
    CONSTRAINT token_allocations_token_amount_check CHECK ((token_amount > (0)::numeric))
);


--
-- Name: token_deployment_history; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_deployment_history (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    project_id uuid NOT NULL,
    status text NOT NULL,
    transaction_hash text,
    block_number integer,
    "timestamp" timestamp with time zone DEFAULT now() NOT NULL,
    error text,
    blockchain text NOT NULL,
    environment text NOT NULL
);


--
-- Name: TABLE token_deployment_history; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.token_deployment_history IS 'Records the history of token deployment attempts and their status';


--
-- Name: token_deployments; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_deployments (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    network text NOT NULL,
    contract_address text NOT NULL,
    transaction_hash text NOT NULL,
    deployed_at timestamp with time zone DEFAULT now(),
    deployed_by text NOT NULL,
    status text DEFAULT 'PENDING'::text NOT NULL,
    deployment_data jsonb,
    deployment_strategy text
);


--
-- Name: token_designs; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_designs (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    name text NOT NULL,
    type text NOT NULL,
    status text DEFAULT 'draft'::text NOT NULL,
    total_supply numeric NOT NULL,
    contract_address text,
    deployment_date timestamp with time zone,
    CONSTRAINT token_designs_status_check CHECK ((status = ANY (ARRAY['draft'::text, 'under review'::text, 'approved'::text, 'rejected'::text, 'ready to mint'::text, 'minted'::text, 'paused'::text, 'distributed'::text]))),
    CONSTRAINT token_designs_type_check CHECK ((type = ANY (ARRAY['ERC-20'::text, 'ERC-721'::text, 'ERC-1155'::text, 'ERC-1400'::text, 'ERC-3525'::text])))
);


--
-- Name: token_erc1155_balances; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_erc1155_balances (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    token_type_id text NOT NULL,
    address text NOT NULL,
    amount text NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: token_erc1155_crafting_recipes; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_erc1155_crafting_recipes (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    recipe_name text NOT NULL,
    input_tokens jsonb NOT NULL,
    output_token_type_id text NOT NULL,
    output_quantity integer DEFAULT 1,
    success_rate integer DEFAULT 100,
    cooldown_period integer DEFAULT 0,
    required_level integer DEFAULT 0,
    is_active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: token_erc1155_discount_tiers; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_erc1155_discount_tiers (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    min_quantity integer NOT NULL,
    max_quantity integer,
    discount_percentage text NOT NULL,
    tier_name text,
    is_active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: token_erc1155_properties; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_erc1155_properties (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    base_uri text,
    metadata_storage text DEFAULT 'ipfs'::text,
    has_royalty boolean DEFAULT false,
    royalty_percentage text,
    royalty_receiver text,
    is_burnable boolean DEFAULT false,
    is_pausable boolean DEFAULT false,
    access_control text DEFAULT 'ownable'::text,
    updatable_uris boolean DEFAULT false,
    supply_tracking boolean DEFAULT true,
    enable_approval_for_all boolean DEFAULT true,
    sales_config jsonb,
    whitelist_config jsonb,
    batch_transfer_limits jsonb,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    dynamic_uri_config jsonb,
    batch_minting_config jsonb,
    transfer_restrictions jsonb,
    container_config jsonb,
    dynamic_uris boolean,
    batch_minting_enabled boolean DEFAULT false,
    container_enabled boolean DEFAULT false,
    use_geographic_restrictions boolean DEFAULT false,
    default_restriction_policy text DEFAULT 'allowed'::text,
    mint_roles text[],
    burning_enabled boolean DEFAULT false,
    burn_roles text[],
    updatable_metadata boolean DEFAULT false,
    metadata_update_roles text[],
    supply_tracking_advanced boolean DEFAULT false,
    max_supply_per_type text,
    pricing_model text DEFAULT 'fixed'::text,
    base_price text,
    price_multipliers jsonb,
    bulk_discount_enabled boolean DEFAULT false,
    bulk_discount_tiers jsonb,
    referral_rewards_enabled boolean DEFAULT false,
    referral_percentage text,
    lazy_minting_enabled boolean DEFAULT false,
    airdrop_enabled boolean DEFAULT false,
    airdrop_snapshot_block integer,
    claim_period_enabled boolean DEFAULT false,
    claim_start_time timestamp with time zone,
    claim_end_time timestamp with time zone,
    crafting_enabled boolean DEFAULT false,
    fusion_enabled boolean DEFAULT false,
    token_recipes jsonb,
    experience_points_enabled boolean DEFAULT false,
    leveling_enabled boolean DEFAULT false,
    consumable_tokens boolean DEFAULT false,
    marketplace_fees_enabled boolean DEFAULT false,
    marketplace_fee_percentage text,
    marketplace_fee_recipient text,
    bundle_trading_enabled boolean DEFAULT false,
    atomic_swaps_enabled boolean DEFAULT false,
    cross_collection_trading boolean DEFAULT false,
    voting_power_enabled boolean DEFAULT false,
    voting_weight_per_token jsonb,
    community_treasury_enabled boolean DEFAULT false,
    treasury_percentage text,
    proposal_creation_threshold text,
    bridge_enabled boolean DEFAULT false,
    bridgeable_token_types text[],
    wrapped_versions jsonb,
    layer2_support_enabled boolean DEFAULT false,
    supported_layer2_networks text[],
    CONSTRAINT batch_transfer_limits_structure_check CHECK (((batch_transfer_limits IS NULL) OR (jsonb_typeof(batch_transfer_limits) = 'object'::text))),
    CONSTRAINT check_whitelist_config_valid CHECK (public.validate_whitelist_config_permissive(whitelist_config)),
    CONSTRAINT sales_config_structure_check CHECK (((sales_config IS NULL) OR ((jsonb_typeof(sales_config) = 'object'::text) AND (sales_config ? 'enabled'::text) AND (((sales_config -> 'enabled'::text))::text = ANY (ARRAY['true'::text, 'false'::text]))))),
    CONSTRAINT whitelist_config_structure_check CHECK (((whitelist_config IS NULL) OR ((jsonb_typeof(whitelist_config) = 'object'::text) AND (whitelist_config ? 'enabled'::text) AND (((whitelist_config -> 'enabled'::text))::text = ANY (ARRAY['true'::text, 'false'::text])))))
);


--
-- Name: COLUMN token_erc1155_properties.pricing_model; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc1155_properties.pricing_model IS 'Pricing strategy: fixed, dynamic, or auction-based';


--
-- Name: COLUMN token_erc1155_properties.lazy_minting_enabled; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc1155_properties.lazy_minting_enabled IS 'Whether tokens are minted on-demand rather than pre-minted';


--
-- Name: COLUMN token_erc1155_properties.crafting_enabled; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc1155_properties.crafting_enabled IS 'Whether token types can be combined to create new tokens';


--
-- Name: COLUMN token_erc1155_properties.consumable_tokens; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc1155_properties.consumable_tokens IS 'Whether some token types are consumed on use';


--
-- Name: COLUMN token_erc1155_properties.voting_power_enabled; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc1155_properties.voting_power_enabled IS 'Whether different token types have governance voting power';


--
-- Name: COLUMN token_erc1155_properties.bridge_enabled; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc1155_properties.bridge_enabled IS 'Whether tokens can be bridged to other chains';


--
-- Name: token_erc1155_type_configs; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_erc1155_type_configs (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    token_type_id text NOT NULL,
    supply_cap text,
    mint_price text,
    is_tradeable boolean DEFAULT true,
    is_transferable boolean DEFAULT true,
    utility_type text,
    rarity_tier text,
    experience_value integer DEFAULT 0,
    crafting_materials jsonb,
    burn_rewards jsonb,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: token_erc1155_types; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_erc1155_types (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    token_type_id text NOT NULL,
    name text,
    description text,
    max_supply text,
    metadata jsonb,
    created_at timestamp with time zone DEFAULT now(),
    fungibility_type text DEFAULT 'non-fungible'::text,
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT token_erc1155_types_fungibility_type_check CHECK ((fungibility_type = ANY (ARRAY['fungible'::text, 'non-fungible'::text, 'semi-fungible'::text])))
);


--
-- Name: COLUMN token_erc1155_types.fungibility_type; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc1155_types.fungibility_type IS 'Type of fungibility: fungible, non-fungible, or semi-fungible';


--
-- Name: token_erc1155_uri_mappings; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_erc1155_uri_mappings (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    token_type_id text NOT NULL,
    uri text NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: token_erc1155_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.token_erc1155_view AS
 SELECT t.id AS token_id,
    t.name,
    t.symbol,
    t.decimals,
    t.standard,
    t.total_supply,
    t.metadata,
    t.status,
    t.description,
    t.created_at AS token_created_at,
    t.updated_at AS token_updated_at,
    p.id AS erc1155_property_id,
    p.base_uri,
    p.metadata_storage,
    p.has_royalty,
    p.royalty_percentage,
    p.royalty_receiver,
    p.is_burnable,
    p.is_pausable,
    p.access_control,
    p.updatable_uris,
    p.supply_tracking,
    p.enable_approval_for_all,
    p.sales_config,
    p.whitelist_config,
    p.batch_transfer_limits,
    p.dynamic_uri_config,
    p.batch_minting_config,
    p.transfer_restrictions,
    p.container_config,
    p.lazy_minting_enabled,
    p.burning_enabled,
    p.updatable_metadata,
    p.crafting_enabled,
    p.fusion_enabled,
    p.experience_points_enabled,
    p.voting_power_enabled,
    p.marketplace_fees_enabled,
    p.bridge_enabled,
    p.pricing_model,
    p.base_price,
    p.bulk_discount_enabled,
    p.airdrop_enabled,
    p.claim_period_enabled,
    p.claim_start_time,
    p.claim_end_time,
    p.created_at AS property_created_at,
    p.updated_at AS property_updated_at
   FROM (public.tokens t
     LEFT JOIN public.token_erc1155_properties p ON ((t.id = p.token_id)))
  WHERE (t.standard = 'ERC-1155'::public.token_standard_enum);


--
-- Name: token_erc1400_controllers; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_erc1400_controllers (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    address text NOT NULL,
    permissions text[],
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: token_erc1400_corporate_actions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_erc1400_corporate_actions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    action_type text NOT NULL,
    announcement_date date NOT NULL,
    record_date date,
    effective_date date,
    payment_date date,
    action_details jsonb NOT NULL,
    impact_on_supply text,
    impact_on_price text,
    shareholder_approval_required boolean DEFAULT false,
    voting_deadline date,
    regulatory_approval_required boolean DEFAULT false,
    status text DEFAULT 'announced'::text,
    execution_transaction_hash text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: token_erc1400_custody_providers; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_erc1400_custody_providers (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    provider_name text NOT NULL,
    provider_type text NOT NULL,
    provider_address text,
    provider_lei text,
    custody_agreement_hash text,
    is_active boolean DEFAULT true,
    certification_level text,
    jurisdiction text,
    regulatory_approvals text[],
    integration_status text DEFAULT 'pending'::text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: token_erc1400_documents; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_erc1400_documents (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid,
    name text NOT NULL,
    document_uri text NOT NULL,
    document_type text,
    document_hash text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: token_erc1400_partition_balances; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_erc1400_partition_balances (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    partition_id uuid NOT NULL,
    holder_address text NOT NULL,
    balance text DEFAULT '0'::text NOT NULL,
    last_updated timestamp with time zone DEFAULT now(),
    metadata jsonb DEFAULT '{}'::jsonb,
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: TABLE token_erc1400_partition_balances; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.token_erc1400_partition_balances IS 'Tracks token balances per partition for each holder';


--
-- Name: token_erc1400_partition_operators; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_erc1400_partition_operators (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    partition_id uuid NOT NULL,
    holder_address text NOT NULL,
    operator_address text NOT NULL,
    authorized boolean DEFAULT true,
    last_updated timestamp with time zone DEFAULT now(),
    metadata jsonb DEFAULT '{}'::jsonb,
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: TABLE token_erc1400_partition_operators; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.token_erc1400_partition_operators IS 'Tracks authorized operators for each partition';


--
-- Name: token_erc1400_partition_transfers; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_erc1400_partition_transfers (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    partition_id uuid NOT NULL,
    from_address text NOT NULL,
    to_address text NOT NULL,
    amount text NOT NULL,
    operator_address text,
    "timestamp" timestamp with time zone DEFAULT now(),
    transaction_hash text,
    metadata jsonb DEFAULT '{}'::jsonb,
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: TABLE token_erc1400_partition_transfers; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.token_erc1400_partition_transfers IS 'Records all token transfers within partitions';


--
-- Name: token_erc1400_partitions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_erc1400_partitions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    name text NOT NULL,
    partition_id text NOT NULL,
    metadata jsonb,
    created_at timestamp with time zone DEFAULT now(),
    total_supply text DEFAULT '0'::text,
    partition_type text,
    amount text,
    updated_at timestamp with time zone DEFAULT now(),
    corporate_actions boolean DEFAULT false,
    custom_features jsonb,
    transferable boolean DEFAULT true
);


--
-- Name: COLUMN token_erc1400_partitions.total_supply; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc1400_partitions.total_supply IS 'Total token supply in this partition';


--
-- Name: token_erc1400_properties; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_erc1400_properties (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    initial_supply text,
    cap text,
    is_mintable boolean DEFAULT false,
    is_burnable boolean DEFAULT false,
    is_pausable boolean DEFAULT false,
    document_uri text,
    document_hash text,
    controller_address text,
    require_kyc boolean DEFAULT true,
    security_type text DEFAULT 'equity'::text,
    issuing_jurisdiction text,
    issuing_entity_name text,
    issuing_entity_lei text,
    transfer_restrictions jsonb,
    kyc_settings jsonb,
    compliance_settings jsonb,
    forced_transfers boolean DEFAULT false,
    issuance_modules boolean DEFAULT false,
    document_management boolean DEFAULT false,
    recovery_mechanism boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    regulation_type text,
    is_multi_class boolean DEFAULT false,
    tranche_transferability boolean DEFAULT false,
    decimals integer DEFAULT 18,
    token_details text,
    legal_terms text,
    prospectus text,
    enforce_kyc boolean DEFAULT false,
    forced_redemption_enabled boolean DEFAULT false,
    whitelist_enabled boolean DEFAULT false,
    holding_period integer,
    max_investor_count integer,
    investor_accreditation boolean DEFAULT false,
    auto_compliance boolean DEFAULT false,
    manual_approvals boolean DEFAULT false,
    compliance_module text,
    is_issuable boolean DEFAULT false,
    granular_control boolean DEFAULT false,
    dividend_distribution boolean DEFAULT false,
    corporate_actions boolean DEFAULT false,
    custom_features jsonb,
    geographic_restrictions jsonb DEFAULT '[]'::jsonb,
    compliance_automation_level text DEFAULT 'manual'::text,
    whitelist_config jsonb,
    investor_whitelist_enabled boolean DEFAULT false,
    accredited_investor_only boolean DEFAULT false,
    jurisdiction_restrictions jsonb DEFAULT '[]'::jsonb,
    investor_limits jsonb DEFAULT '{}'::jsonb,
    use_geographic_restrictions boolean DEFAULT false,
    default_restriction_policy text DEFAULT 'blocked'::text,
    institutional_grade boolean DEFAULT false,
    custody_integration_enabled boolean DEFAULT false,
    prime_brokerage_support boolean DEFAULT false,
    settlement_integration text,
    clearing_house_integration boolean DEFAULT false,
    central_securities_depository_integration boolean DEFAULT false,
    third_party_custody_addresses text[],
    institutional_wallet_support boolean DEFAULT false,
    real_time_compliance_monitoring boolean DEFAULT false,
    automated_sanctions_screening boolean DEFAULT false,
    pep_screening_enabled boolean DEFAULT false,
    aml_monitoring_enabled boolean DEFAULT false,
    transaction_monitoring_rules jsonb,
    suspicious_activity_reporting boolean DEFAULT false,
    compliance_officer_notifications boolean DEFAULT false,
    regulatory_reporting_automation boolean DEFAULT false,
    advanced_corporate_actions boolean DEFAULT false,
    stock_splits_enabled boolean DEFAULT false,
    stock_dividends_enabled boolean DEFAULT false,
    rights_offerings_enabled boolean DEFAULT false,
    spin_offs_enabled boolean DEFAULT false,
    mergers_acquisitions_support boolean DEFAULT false,
    treasury_management_enabled boolean DEFAULT false,
    buyback_programs_enabled boolean DEFAULT false,
    share_repurchase_automation boolean DEFAULT false,
    advanced_governance_enabled boolean DEFAULT false,
    proxy_voting_enabled boolean DEFAULT false,
    cumulative_voting_enabled boolean DEFAULT false,
    weighted_voting_by_class boolean DEFAULT false,
    quorum_requirements jsonb,
    voting_delegation_enabled boolean DEFAULT false,
    institutional_voting_services boolean DEFAULT false,
    board_election_support boolean DEFAULT false,
    cross_border_trading_enabled boolean DEFAULT false,
    multi_jurisdiction_compliance boolean DEFAULT false,
    passport_regime_support boolean DEFAULT false,
    treaty_benefits_enabled boolean DEFAULT false,
    withholding_tax_automation boolean DEFAULT false,
    currency_hedging_enabled boolean DEFAULT false,
    foreign_ownership_restrictions jsonb,
    regulatory_equivalence_mapping jsonb,
    enhanced_reporting_enabled boolean DEFAULT false,
    real_time_shareholder_registry boolean DEFAULT false,
    beneficial_ownership_tracking boolean DEFAULT false,
    position_reconciliation_enabled boolean DEFAULT false,
    regulatory_filing_automation boolean DEFAULT false,
    audit_trail_comprehensive boolean DEFAULT false,
    performance_analytics_enabled boolean DEFAULT false,
    esg_reporting_enabled boolean DEFAULT false,
    traditional_finance_integration boolean DEFAULT false,
    swift_integration_enabled boolean DEFAULT false,
    iso20022_messaging_support boolean DEFAULT false,
    financial_data_vendor_integration boolean DEFAULT false,
    market_data_feeds_enabled boolean DEFAULT false,
    price_discovery_mechanisms jsonb,
    cross_chain_bridge_support boolean DEFAULT false,
    layer2_scaling_support boolean DEFAULT false,
    advanced_risk_management boolean DEFAULT false,
    position_limits_enabled boolean DEFAULT false,
    concentration_limits jsonb,
    stress_testing_enabled boolean DEFAULT false,
    margin_requirements_dynamic boolean DEFAULT false,
    collateral_management_enabled boolean DEFAULT false,
    insurance_coverage_enabled boolean DEFAULT false,
    disaster_recovery_enabled boolean DEFAULT false,
    CONSTRAINT check_whitelist_config_valid CHECK (public.validate_whitelist_config_permissive(whitelist_config))
);


--
-- Name: COLUMN token_erc1400_properties.whitelist_config; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc1400_properties.whitelist_config IS 'JSON configuration for security token whitelist including investor verification, compliance requirements, and transfer restrictions';


--
-- Name: COLUMN token_erc1400_properties.investor_whitelist_enabled; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc1400_properties.investor_whitelist_enabled IS 'Enable whitelist enforcement for all investor interactions';


--
-- Name: COLUMN token_erc1400_properties.accredited_investor_only; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc1400_properties.accredited_investor_only IS 'Restrict token access to accredited investors only';


--
-- Name: COLUMN token_erc1400_properties.jurisdiction_restrictions; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc1400_properties.jurisdiction_restrictions IS 'Array of blocked/allowed jurisdictions for investor eligibility';


--
-- Name: COLUMN token_erc1400_properties.investor_limits; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc1400_properties.investor_limits IS 'JSON object defining maximum investors, holding periods, and investment limits';


--
-- Name: COLUMN token_erc1400_properties.institutional_grade; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc1400_properties.institutional_grade IS 'Whether token meets institutional investment standards';


--
-- Name: COLUMN token_erc1400_properties.custody_integration_enabled; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc1400_properties.custody_integration_enabled IS 'Whether token supports institutional custody integration';


--
-- Name: COLUMN token_erc1400_properties.real_time_compliance_monitoring; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc1400_properties.real_time_compliance_monitoring IS 'Whether real-time compliance monitoring is active';


--
-- Name: COLUMN token_erc1400_properties.advanced_corporate_actions; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc1400_properties.advanced_corporate_actions IS 'Whether advanced corporate actions are supported';


--
-- Name: COLUMN token_erc1400_properties.cross_border_trading_enabled; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc1400_properties.cross_border_trading_enabled IS 'Whether cross-border trading is enabled';


--
-- Name: COLUMN token_erc1400_properties.traditional_finance_integration; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc1400_properties.traditional_finance_integration IS 'Whether integration with traditional finance systems is enabled';


--
-- Name: token_erc1400_regulatory_filings; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_erc1400_regulatory_filings (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    filing_type text NOT NULL,
    filing_date date NOT NULL,
    filing_jurisdiction text NOT NULL,
    filing_reference text,
    document_hash text,
    document_uri text,
    regulatory_body text,
    compliance_status text DEFAULT 'pending'::text,
    due_date date,
    auto_generated boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: token_erc1400_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.token_erc1400_view AS
 SELECT t.id AS token_id,
    t.name,
    t.symbol,
    t.decimals,
    t.standard,
    t.total_supply,
    t.metadata,
    t.status,
    t.description,
    t.created_at AS token_created_at,
    t.updated_at AS token_updated_at,
    p.id AS erc1400_property_id,
    p.initial_supply,
    p.cap,
    p.is_mintable,
    p.is_burnable,
    p.is_pausable,
    p.document_uri,
    p.document_hash,
    p.controller_address,
    p.require_kyc,
    p.security_type,
    p.issuing_jurisdiction,
    p.issuing_entity_name,
    p.issuing_entity_lei,
    p.transfer_restrictions,
    p.kyc_settings,
    p.compliance_settings,
    p.forced_transfers,
    p.issuance_modules,
    p.document_management,
    p.recovery_mechanism,
    p.regulation_type,
    p.is_multi_class,
    p.tranche_transferability,
    p.token_details,
    p.legal_terms,
    p.prospectus,
    p.enforce_kyc,
    p.forced_redemption_enabled,
    p.whitelist_enabled,
    p.holding_period,
    p.max_investor_count,
    p.investor_accreditation,
    p.auto_compliance,
    p.manual_approvals,
    p.compliance_module,
    p.is_issuable,
    p.granular_control,
    p.dividend_distribution,
    p.corporate_actions,
    p.custom_features,
    p.geographic_restrictions,
    p.compliance_automation_level,
    p.institutional_grade,
    p.custody_integration_enabled,
    p.prime_brokerage_support,
    p.settlement_integration,
    p.real_time_compliance_monitoring,
    p.automated_sanctions_screening,
    p.aml_monitoring_enabled,
    p.advanced_corporate_actions,
    p.stock_splits_enabled,
    p.treasury_management_enabled,
    p.advanced_governance_enabled,
    p.proxy_voting_enabled,
    p.cross_border_trading_enabled,
    p.multi_jurisdiction_compliance,
    p.enhanced_reporting_enabled,
    p.beneficial_ownership_tracking,
    p.traditional_finance_integration,
    p.swift_integration_enabled,
    p.iso20022_messaging_support,
    p.advanced_risk_management,
    p.insurance_coverage_enabled,
    p.created_at AS property_created_at,
    p.updated_at AS property_updated_at
   FROM (public.tokens t
     LEFT JOIN public.token_erc1400_properties p ON ((t.id = p.token_id)))
  WHERE (t.standard = 'ERC-1400'::public.token_standard_enum);


--
-- Name: token_erc20_properties; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_erc20_properties (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    initial_supply text,
    cap text,
    is_mintable boolean DEFAULT false,
    is_burnable boolean DEFAULT false,
    is_pausable boolean DEFAULT false,
    token_type text DEFAULT 'utility'::text,
    access_control text DEFAULT 'ownable'::text,
    allow_management boolean DEFAULT false,
    permit boolean DEFAULT false,
    snapshot boolean DEFAULT false,
    fee_on_transfer jsonb,
    rebasing jsonb,
    governance_features jsonb,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    transfer_config jsonb,
    gas_config jsonb,
    compliance_config jsonb,
    whitelist_config jsonb,
    governance_enabled boolean DEFAULT false,
    quorum_percentage text,
    proposal_threshold text,
    voting_delay integer,
    voting_period integer,
    timelock_delay integer,
    governance_token_address text,
    pausable_by text,
    mintable_by text,
    burnable_by text,
    max_total_supply text,
    anti_whale_enabled boolean DEFAULT false,
    max_wallet_amount text,
    cooldown_period integer,
    blacklist_enabled boolean DEFAULT false,
    deflation_enabled boolean DEFAULT false,
    deflation_rate text,
    staking_enabled boolean DEFAULT false,
    staking_rewards_rate text,
    buy_fee_enabled boolean DEFAULT false,
    sell_fee_enabled boolean DEFAULT false,
    liquidity_fee_percentage text,
    marketing_fee_percentage text,
    charity_fee_percentage text,
    auto_liquidity_enabled boolean DEFAULT false,
    reflection_enabled boolean DEFAULT false,
    reflection_percentage text,
    burn_on_transfer boolean DEFAULT false,
    burn_percentage text,
    lottery_enabled boolean DEFAULT false,
    lottery_percentage text,
    trading_start_time timestamp with time zone,
    presale_enabled boolean DEFAULT false,
    presale_rate text,
    presale_start_time timestamp with time zone,
    presale_end_time timestamp with time zone,
    vesting_enabled boolean DEFAULT false,
    vesting_cliff_period integer,
    vesting_total_period integer,
    vesting_release_frequency text DEFAULT 'monthly'::text,
    use_geographic_restrictions boolean DEFAULT false,
    default_restriction_policy text DEFAULT 'allowed'::text,
    CONSTRAINT check_whitelist_config_valid CHECK (public.validate_whitelist_config_permissive(whitelist_config)),
    CONSTRAINT compliance_config_reporting_interval_check CHECK (((compliance_config IS NULL) OR (((compliance_config -> 'reportingInterval'::text))::text = ANY (ARRAY['"daily"'::text, '"weekly"'::text, '"monthly"'::text, '"quarterly"'::text, '"annually"'::text]))))
);


--
-- Name: COLUMN token_erc20_properties.governance_enabled; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc20_properties.governance_enabled IS 'Whether DAO governance features are enabled';


--
-- Name: COLUMN token_erc20_properties.quorum_percentage; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc20_properties.quorum_percentage IS 'Minimum percentage of tokens needed for governance proposals';


--
-- Name: COLUMN token_erc20_properties.anti_whale_enabled; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc20_properties.anti_whale_enabled IS 'Whether anti-whale mechanisms are active';


--
-- Name: COLUMN token_erc20_properties.reflection_enabled; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc20_properties.reflection_enabled IS 'Whether reflection rewards are enabled for holders';


--
-- Name: COLUMN token_erc20_properties.vesting_enabled; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc20_properties.vesting_enabled IS 'Whether token vesting schedules are enforced';


--
-- Name: token_erc20_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.token_erc20_view AS
 SELECT t.id AS token_id,
    t.name,
    t.symbol,
    t.decimals,
    t.standard,
    t.total_supply,
    t.metadata,
    t.status,
    t.description,
    t.created_at AS token_created_at,
    t.updated_at AS token_updated_at,
    p.id AS erc20_property_id,
    p.token_type,
    p.cap,
    p.initial_supply,
    p.access_control,
    p.allow_management,
    p.is_mintable,
    p.is_burnable,
    p.is_pausable,
    p.snapshot,
    p.permit,
    p.rebasing,
    p.fee_on_transfer,
    p.governance_features,
    p.compliance_config,
    p.transfer_config,
    p.gas_config,
    p.whitelist_config,
    p.governance_enabled,
    p.quorum_percentage,
    p.proposal_threshold,
    p.voting_delay,
    p.voting_period,
    p.anti_whale_enabled,
    p.max_wallet_amount,
    p.reflection_enabled,
    p.reflection_percentage,
    p.vesting_enabled,
    p.vesting_cliff_period,
    p.presale_enabled,
    p.presale_rate,
    p.trading_start_time,
    p.created_at AS property_created_at,
    p.updated_at AS property_updated_at
   FROM (public.tokens t
     LEFT JOIN public.token_erc20_properties p ON ((t.id = p.token_id)))
  WHERE (t.standard = 'ERC-20'::public.token_standard_enum);


--
-- Name: token_erc3525_allocations; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_erc3525_allocations (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    slot_id text NOT NULL,
    token_id_within_slot text NOT NULL,
    value text NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    recipient text,
    linked_token_id uuid,
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: COLUMN token_erc3525_allocations.linked_token_id; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc3525_allocations.linked_token_id IS 'Foreign key reference to another token that this allocation is linked to';


--
-- Name: token_erc3525_payment_schedules; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_erc3525_payment_schedules (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    slot_id text NOT NULL,
    payment_date timestamp with time zone NOT NULL,
    payment_amount text NOT NULL,
    payment_type text NOT NULL,
    currency text DEFAULT 'USD'::text,
    is_completed boolean DEFAULT false,
    transaction_hash text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: token_erc3525_properties; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_erc3525_properties (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    value_decimals integer DEFAULT 0,
    base_uri text,
    metadata_storage text DEFAULT 'ipfs'::text,
    slot_type text DEFAULT 'generic'::text,
    is_burnable boolean DEFAULT false,
    is_pausable boolean DEFAULT false,
    has_royalty boolean DEFAULT false,
    royalty_percentage text,
    royalty_receiver text,
    slot_approvals boolean DEFAULT true,
    value_approvals boolean DEFAULT true,
    access_control text DEFAULT 'ownable'::text,
    updatable_uris boolean DEFAULT false,
    updatable_slots boolean DEFAULT false,
    value_transfers_enabled boolean DEFAULT true,
    sales_config jsonb,
    mergable boolean DEFAULT false,
    splittable boolean DEFAULT false,
    slot_transfer_validation jsonb,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    dynamic_metadata boolean DEFAULT false,
    allows_slot_enumeration boolean DEFAULT true,
    value_aggregation boolean DEFAULT false,
    permissioning_enabled boolean DEFAULT false,
    supply_tracking boolean DEFAULT false,
    updatable_values boolean DEFAULT false,
    custom_extensions text,
    fractionalizable boolean DEFAULT false,
    metadata jsonb,
    fractional_ownership_enabled boolean DEFAULT false,
    auto_unit_calculation boolean DEFAULT false,
    custom_slot_properties jsonb,
    slot_enumeration_enabled boolean DEFAULT true,
    value_aggregation_enabled boolean DEFAULT false,
    permissioning_advanced boolean DEFAULT false,
    slot_transfer_restrictions jsonb,
    value_transfer_restrictions jsonb,
    financial_instrument_type text,
    principal_amount text,
    interest_rate text,
    maturity_date timestamp with time zone,
    coupon_frequency text,
    payment_schedule jsonb,
    early_redemption_enabled boolean DEFAULT false,
    redemption_penalty_rate text,
    derivative_type text,
    underlying_asset text,
    underlying_asset_address text,
    strike_price text,
    expiration_date timestamp with time zone,
    settlement_type text,
    margin_requirements jsonb,
    leverage_ratio text,
    slot_creation_enabled boolean DEFAULT false,
    dynamic_slot_creation boolean DEFAULT false,
    slot_admin_roles text[],
    slot_freeze_enabled boolean DEFAULT false,
    slot_merge_enabled boolean DEFAULT false,
    slot_split_enabled boolean DEFAULT false,
    cross_slot_transfers boolean DEFAULT false,
    value_computation_method text,
    value_oracle_address text,
    value_calculation_formula text,
    accrual_enabled boolean DEFAULT false,
    accrual_rate text,
    accrual_frequency text,
    value_adjustment_enabled boolean DEFAULT false,
    slot_marketplace_enabled boolean DEFAULT false,
    value_marketplace_enabled boolean DEFAULT false,
    partial_value_trading boolean DEFAULT false,
    minimum_trade_value text,
    trading_fees_enabled boolean DEFAULT false,
    trading_fee_percentage text,
    market_maker_enabled boolean DEFAULT false,
    slot_voting_enabled boolean DEFAULT false,
    value_weighted_voting boolean DEFAULT false,
    voting_power_calculation text,
    quorum_calculation_method text,
    proposal_value_threshold text,
    delegate_enabled boolean DEFAULT false,
    yield_farming_enabled boolean DEFAULT false,
    liquidity_provision_enabled boolean DEFAULT false,
    staking_yield_rate text,
    compound_interest_enabled boolean DEFAULT false,
    flash_loan_enabled boolean DEFAULT false,
    collateral_factor text,
    liquidation_threshold text,
    regulatory_compliance_enabled boolean DEFAULT false,
    kyc_required boolean DEFAULT false,
    accredited_investor_only boolean DEFAULT false,
    holding_period_restrictions integer,
    transfer_limits jsonb,
    reporting_requirements jsonb,
    multi_signature_required boolean DEFAULT false,
    approval_workflow_enabled boolean DEFAULT false,
    institutional_custody_support boolean DEFAULT false,
    audit_trail_enhanced boolean DEFAULT false,
    batch_operations_enabled boolean DEFAULT false,
    emergency_pause_enabled boolean DEFAULT false,
    recovery_mechanisms jsonb,
    whitelist_config jsonb,
    use_geographic_restrictions boolean DEFAULT false,
    default_restriction_policy text DEFAULT 'blocked'::text,
    geographic_restrictions text[],
    CONSTRAINT check_whitelist_config_valid CHECK (public.validate_whitelist_config_permissive(whitelist_config)),
    CONSTRAINT sales_config_erc3525_check CHECK (((sales_config IS NULL) OR ((jsonb_typeof(sales_config) = 'object'::text) AND (sales_config ? 'enabled'::text) AND (((sales_config -> 'enabled'::text))::text = ANY (ARRAY['true'::text, 'false'::text]))))),
    CONSTRAINT slot_transfer_validation_enhanced_check CHECK (((slot_transfer_validation IS NULL) OR ((jsonb_typeof(slot_transfer_validation) = 'object'::text) AND (slot_transfer_validation ? 'rules'::text))))
);


--
-- Name: COLUMN token_erc3525_properties.mergable; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc3525_properties.mergable IS 'Whether tokens can be merged';


--
-- Name: COLUMN token_erc3525_properties.splittable; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc3525_properties.splittable IS 'Whether tokens can be split';


--
-- Name: COLUMN token_erc3525_properties.slot_transfer_validation; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc3525_properties.slot_transfer_validation IS 'JSON configuration for slot transfer validation rules';


--
-- Name: COLUMN token_erc3525_properties.dynamic_metadata; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc3525_properties.dynamic_metadata IS 'Whether the token supports dynamic metadata updates';


--
-- Name: COLUMN token_erc3525_properties.allows_slot_enumeration; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc3525_properties.allows_slot_enumeration IS 'Whether slots can be enumerated';


--
-- Name: COLUMN token_erc3525_properties.value_aggregation; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc3525_properties.value_aggregation IS 'Whether token values can be aggregated';


--
-- Name: COLUMN token_erc3525_properties.metadata; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc3525_properties.metadata IS 'JSON metadata for token properties';


--
-- Name: COLUMN token_erc3525_properties.auto_unit_calculation; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc3525_properties.auto_unit_calculation IS 'Whether token values are automatically calculated';


--
-- Name: COLUMN token_erc3525_properties.value_aggregation_enabled; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc3525_properties.value_aggregation_enabled IS 'Whether token values can be aggregated across slots';


--
-- Name: COLUMN token_erc3525_properties.financial_instrument_type; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc3525_properties.financial_instrument_type IS 'Type of financial instrument: bond, loan, equity, derivative';


--
-- Name: COLUMN token_erc3525_properties.slot_creation_enabled; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc3525_properties.slot_creation_enabled IS 'Whether new slots can be dynamically created';


--
-- Name: COLUMN token_erc3525_properties.partial_value_trading; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc3525_properties.partial_value_trading IS 'Whether partial token values can be traded';


--
-- Name: COLUMN token_erc3525_properties.yield_farming_enabled; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc3525_properties.yield_farming_enabled IS 'Whether tokens can be used for yield farming';


--
-- Name: COLUMN token_erc3525_properties.regulatory_compliance_enabled; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc3525_properties.regulatory_compliance_enabled IS 'Whether tokens are subject to regulatory compliance';


--
-- Name: COLUMN token_erc3525_properties.whitelist_config; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc3525_properties.whitelist_config IS 'JSON configuration for semi-fungible token whitelist controls including slot-specific access, transfer restrictions, and compliance settings';


--
-- Name: token_erc3525_slot_configs; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_erc3525_slot_configs (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    slot_id text NOT NULL,
    slot_name text,
    slot_description text,
    value_units text,
    slot_type text,
    transferable boolean DEFAULT true,
    tradeable boolean DEFAULT true,
    divisible boolean DEFAULT true,
    min_value text,
    max_value text,
    value_precision integer DEFAULT 18,
    slot_properties jsonb,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: token_erc3525_slots; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_erc3525_slots (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    slot_id text NOT NULL,
    name text,
    description text,
    metadata jsonb,
    created_at timestamp with time zone DEFAULT now(),
    value_units text,
    updated_at timestamp with time zone DEFAULT now(),
    slot_transferable boolean DEFAULT true
);


--
-- Name: token_erc3525_value_adjustments; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_erc3525_value_adjustments (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    slot_id text NOT NULL,
    adjustment_date timestamp with time zone DEFAULT now(),
    adjustment_type text NOT NULL,
    adjustment_amount text NOT NULL,
    adjustment_reason text,
    oracle_price text,
    oracle_source text,
    approved_by text,
    transaction_hash text,
    created_at timestamp with time zone DEFAULT now()
);


--
-- Name: token_erc3525_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.token_erc3525_view AS
 SELECT t.id AS token_id,
    t.name,
    t.symbol,
    t.decimals,
    t.standard,
    t.total_supply,
    t.metadata,
    t.status,
    t.description,
    t.created_at AS token_created_at,
    t.updated_at AS token_updated_at,
    p.id AS erc3525_property_id,
    p.value_decimals,
    p.base_uri,
    p.metadata_storage,
    p.slot_type,
    p.is_burnable,
    p.is_pausable,
    p.has_royalty,
    p.royalty_percentage,
    p.royalty_receiver,
    p.slot_approvals,
    p.value_approvals,
    p.access_control,
    p.updatable_uris,
    p.updatable_slots,
    p.value_transfers_enabled,
    p.sales_config,
    p.mergable,
    p.splittable,
    p.slot_transfer_validation,
    p.dynamic_metadata,
    p.allows_slot_enumeration,
    p.value_aggregation,
    p.permissioning_enabled,
    p.supply_tracking,
    p.updatable_values,
    p.fractional_ownership_enabled,
    p.financial_instrument_type,
    p.principal_amount,
    p.interest_rate,
    p.maturity_date,
    p.coupon_frequency,
    p.early_redemption_enabled,
    p.derivative_type,
    p.underlying_asset,
    p.strike_price,
    p.expiration_date,
    p.settlement_type,
    p.slot_creation_enabled,
    p.dynamic_slot_creation,
    p.cross_slot_transfers,
    p.value_computation_method,
    p.accrual_enabled,
    p.accrual_rate,
    p.partial_value_trading,
    p.minimum_trade_value,
    p.yield_farming_enabled,
    p.liquidity_provision_enabled,
    p.compound_interest_enabled,
    p.flash_loan_enabled,
    p.regulatory_compliance_enabled,
    p.kyc_required,
    p.accredited_investor_only,
    p.created_at AS property_created_at,
    p.updated_at AS property_updated_at
   FROM (public.tokens t
     LEFT JOIN public.token_erc3525_properties p ON ((t.id = p.token_id)))
  WHERE (t.standard = 'ERC-3525'::public.token_standard_enum);


--
-- Name: token_erc4626_asset_allocations; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_erc4626_asset_allocations (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    asset text NOT NULL,
    percentage text NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    description text,
    protocol text,
    expected_apy text,
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: token_erc4626_fee_tiers; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_erc4626_fee_tiers (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    tier_name text NOT NULL,
    min_balance text NOT NULL,
    max_balance text,
    management_fee_rate text NOT NULL,
    performance_fee_rate text NOT NULL,
    deposit_fee_rate text DEFAULT '0'::text,
    withdrawal_fee_rate text DEFAULT '0'::text,
    tier_benefits jsonb,
    is_active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: token_erc4626_performance_metrics; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_erc4626_performance_metrics (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    metric_date date NOT NULL,
    total_assets text NOT NULL,
    share_price text NOT NULL,
    apy text,
    daily_yield text,
    benchmark_performance text,
    total_fees_collected text,
    new_deposits text,
    withdrawals text,
    net_flow text,
    sharpe_ratio text,
    volatility text,
    max_drawdown text,
    created_at timestamp with time zone DEFAULT now()
);


--
-- Name: token_erc4626_properties; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_erc4626_properties (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    asset_address text,
    asset_name text,
    asset_symbol text,
    asset_decimals integer DEFAULT 18,
    vault_type text DEFAULT 'yield'::text,
    is_mintable boolean DEFAULT false,
    is_burnable boolean DEFAULT false,
    is_pausable boolean DEFAULT false,
    vault_strategy text DEFAULT 'simple'::text,
    custom_strategy boolean DEFAULT false,
    strategy_controller text,
    access_control text DEFAULT 'ownable'::text,
    permit boolean DEFAULT false,
    flash_loans boolean DEFAULT false,
    emergency_shutdown boolean DEFAULT false,
    fee_structure jsonb,
    rebalancing_rules jsonb,
    performance_metrics boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    yield_source text DEFAULT 'external'::text,
    strategy_documentation text,
    rebalance_threshold text,
    liquidity_reserve text DEFAULT '10'::text,
    max_slippage text,
    deposit_limit text,
    withdrawal_limit text,
    min_deposit text,
    max_deposit text,
    min_withdrawal text,
    max_withdrawal text,
    performance_tracking boolean DEFAULT false,
    deposit_fee text,
    withdrawal_fee text,
    management_fee text,
    performance_fee text,
    fee_recipient text,
    withdrawal_rules jsonb,
    yield_optimization_enabled boolean DEFAULT false,
    automated_rebalancing boolean DEFAULT false,
    whitelist_config jsonb,
    use_geographic_restrictions boolean DEFAULT false,
    default_restriction_policy text DEFAULT 'allowed'::text,
    strategy_complexity text DEFAULT 'simple'::text,
    multi_asset_enabled boolean DEFAULT false,
    rebalancing_enabled boolean DEFAULT false,
    auto_compounding_enabled boolean DEFAULT false,
    yield_optimization_strategy text,
    risk_management_enabled boolean DEFAULT false,
    risk_tolerance text,
    diversification_enabled boolean DEFAULT false,
    apy_tracking_enabled boolean DEFAULT false,
    benchmark_tracking_enabled boolean DEFAULT false,
    benchmark_index text,
    performance_history_retention integer DEFAULT 365,
    yield_sources jsonb,
    yield_distribution_schedule text,
    compound_frequency text DEFAULT 'continuous'::text,
    insurance_enabled boolean DEFAULT false,
    insurance_provider text,
    insurance_coverage_amount text,
    emergency_exit_enabled boolean DEFAULT false,
    circuit_breaker_enabled boolean DEFAULT false,
    max_drawdown_threshold text,
    stop_loss_enabled boolean DEFAULT false,
    stop_loss_threshold text,
    governance_token_enabled boolean DEFAULT false,
    governance_token_address text,
    voting_power_per_share text DEFAULT '1'::text,
    strategy_voting_enabled boolean DEFAULT false,
    fee_voting_enabled boolean DEFAULT false,
    manager_performance_threshold text,
    manager_replacement_enabled boolean DEFAULT false,
    dynamic_fees_enabled boolean DEFAULT false,
    performance_fee_high_water_mark boolean DEFAULT false,
    fee_tier_system_enabled boolean DEFAULT false,
    early_withdrawal_penalty text,
    late_withdrawal_penalty text,
    gas_fee_optimization boolean DEFAULT false,
    fee_rebate_enabled boolean DEFAULT false,
    liquidity_mining_enabled boolean DEFAULT false,
    liquidity_incentives_rate text,
    market_making_enabled boolean DEFAULT false,
    arbitrage_enabled boolean DEFAULT false,
    cross_dex_optimization boolean DEFAULT false,
    liquidity_provider_rewards jsonb,
    impermanent_loss_protection boolean DEFAULT false,
    defi_protocol_integrations text[],
    lending_protocol_enabled boolean DEFAULT false,
    borrowing_enabled boolean DEFAULT false,
    leverage_enabled boolean DEFAULT false,
    max_leverage_ratio text,
    cross_chain_yield_enabled boolean DEFAULT false,
    bridge_protocols text[],
    portfolio_analytics_enabled boolean DEFAULT false,
    real_time_pnl_tracking boolean DEFAULT false,
    tax_reporting_enabled boolean DEFAULT false,
    automated_reporting boolean DEFAULT false,
    notification_system_enabled boolean DEFAULT false,
    mobile_app_integration boolean DEFAULT false,
    social_trading_enabled boolean DEFAULT false,
    institutional_grade boolean DEFAULT false,
    custody_integration boolean DEFAULT false,
    audit_trail_comprehensive boolean DEFAULT false,
    compliance_reporting_enabled boolean DEFAULT false,
    regulatory_framework text,
    fund_administration_enabled boolean DEFAULT false,
    third_party_audits_enabled boolean DEFAULT false,
    CONSTRAINT check_whitelist_config_valid CHECK (public.validate_whitelist_config_permissive(whitelist_config)),
    CONSTRAINT rebalancing_rules_validation_check CHECK (((rebalancing_rules IS NULL) OR ((jsonb_typeof(rebalancing_rules) = 'object'::text) AND (rebalancing_rules ? 'frequency'::text))))
);


--
-- Name: COLUMN token_erc4626_properties.whitelist_config; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc4626_properties.whitelist_config IS 'JSON configuration for vault token whitelist controls including depositor restrictions, withdrawal limits, and investor eligibility';


--
-- Name: COLUMN token_erc4626_properties.strategy_complexity; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc4626_properties.strategy_complexity IS 'Complexity level of the vault strategy: simple, moderate, advanced';


--
-- Name: COLUMN token_erc4626_properties.multi_asset_enabled; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc4626_properties.multi_asset_enabled IS 'Whether the vault manages multiple underlying assets';


--
-- Name: COLUMN token_erc4626_properties.auto_compounding_enabled; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc4626_properties.auto_compounding_enabled IS 'Whether yields are automatically reinvested';


--
-- Name: COLUMN token_erc4626_properties.yield_optimization_strategy; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc4626_properties.yield_optimization_strategy IS 'Strategy used to optimize yield generation';


--
-- Name: COLUMN token_erc4626_properties.risk_management_enabled; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc4626_properties.risk_management_enabled IS 'Whether risk management features are active';


--
-- Name: COLUMN token_erc4626_properties.insurance_enabled; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc4626_properties.insurance_enabled IS 'Whether vault deposits are insured';


--
-- Name: COLUMN token_erc4626_properties.governance_token_enabled; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc4626_properties.governance_token_enabled IS 'Whether vault shares have governance rights';


--
-- Name: COLUMN token_erc4626_properties.institutional_grade; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc4626_properties.institutional_grade IS 'Whether vault meets institutional investment standards';


--
-- Name: token_erc4626_strategy_params; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_erc4626_strategy_params (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    name text NOT NULL,
    value text NOT NULL,
    description text,
    created_at timestamp with time zone DEFAULT now(),
    param_type text DEFAULT 'string'::text,
    is_required boolean DEFAULT false,
    default_value text,
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: token_erc4626_vault_strategies; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_erc4626_vault_strategies (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    strategy_name text NOT NULL,
    strategy_type text NOT NULL,
    protocol_address text,
    protocol_name text,
    allocation_percentage text NOT NULL,
    min_allocation_percentage text,
    max_allocation_percentage text,
    risk_score integer,
    expected_apy text,
    actual_apy text,
    is_active boolean DEFAULT true,
    last_rebalance timestamp with time zone,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: token_erc4626_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.token_erc4626_view AS
 SELECT t.id AS token_id,
    t.name,
    t.symbol,
    t.decimals,
    t.standard,
    t.total_supply,
    t.metadata,
    t.status,
    t.description,
    t.created_at AS token_created_at,
    t.updated_at AS token_updated_at,
    p.id AS erc4626_property_id,
    p.asset_address,
    p.asset_name,
    p.asset_symbol,
    p.asset_decimals,
    p.vault_type,
    p.is_mintable,
    p.is_burnable,
    p.is_pausable,
    p.vault_strategy,
    p.custom_strategy,
    p.strategy_controller,
    p.access_control,
    p.permit,
    p.flash_loans,
    p.emergency_shutdown,
    p.fee_structure,
    p.rebalancing_rules,
    p.performance_metrics,
    p.yield_source,
    p.automated_rebalancing,
    p.strategy_complexity,
    p.multi_asset_enabled,
    p.rebalancing_enabled,
    p.auto_compounding_enabled,
    p.yield_optimization_enabled,
    p.risk_management_enabled,
    p.risk_tolerance,
    p.apy_tracking_enabled,
    p.benchmark_tracking_enabled,
    p.benchmark_index,
    p.compound_frequency,
    p.governance_token_enabled,
    p.strategy_voting_enabled,
    p.fee_voting_enabled,
    p.insurance_enabled,
    p.emergency_exit_enabled,
    p.circuit_breaker_enabled,
    p.liquidity_mining_enabled,
    p.market_making_enabled,
    p.cross_chain_yield_enabled,
    p.institutional_grade,
    p.compliance_reporting_enabled,
    p.third_party_audits_enabled,
    p.created_at AS property_created_at,
    p.updated_at AS property_updated_at
   FROM (public.tokens t
     LEFT JOIN public.token_erc4626_properties p ON ((t.id = p.token_id)))
  WHERE (t.standard = 'ERC-4626'::public.token_standard_enum);


--
-- Name: token_erc721_attributes; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_erc721_attributes (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    trait_type text NOT NULL,
    "values" text[] NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: token_erc721_mint_phases; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_erc721_mint_phases (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    phase_name text NOT NULL,
    phase_order integer NOT NULL,
    start_time timestamp with time zone,
    end_time timestamp with time zone,
    max_supply integer,
    price text,
    max_per_wallet integer,
    whitelist_required boolean DEFAULT false,
    merkle_root text,
    is_active boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: token_erc721_properties; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_erc721_properties (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    base_uri text,
    metadata_storage text DEFAULT 'ipfs'::text,
    max_supply text,
    has_royalty boolean DEFAULT false,
    royalty_percentage text,
    royalty_receiver text,
    is_burnable boolean DEFAULT false,
    is_pausable boolean DEFAULT false,
    asset_type text DEFAULT 'unique_asset'::text,
    minting_method text DEFAULT 'open'::text,
    auto_increment_ids boolean DEFAULT true,
    enumerable boolean DEFAULT true,
    uri_storage text DEFAULT 'tokenId'::text,
    access_control text DEFAULT 'ownable'::text,
    updatable_uris boolean DEFAULT false,
    sales_config jsonb,
    whitelist_config jsonb,
    permission_config jsonb,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    is_mintable boolean,
    dynamic_uri_config jsonb,
    batch_minting_config jsonb,
    transfer_restrictions jsonb,
    supply_validation_enabled boolean DEFAULT true,
    contract_uri text,
    custom_base_uri text,
    revealable boolean DEFAULT false,
    pre_reveal_uri text,
    reserved_tokens integer DEFAULT 0,
    minting_price text,
    max_mints_per_tx integer,
    max_mints_per_wallet integer,
    enable_fractional_ownership boolean DEFAULT false,
    enable_dynamic_metadata boolean DEFAULT false,
    use_safe_transfer boolean DEFAULT true,
    public_sale_enabled boolean DEFAULT false,
    public_sale_price text,
    public_sale_start_time timestamp with time zone,
    public_sale_end_time timestamp with time zone,
    whitelist_sale_enabled boolean DEFAULT false,
    whitelist_sale_price text,
    whitelist_sale_start_time timestamp with time zone,
    whitelist_sale_end_time timestamp with time zone,
    reveal_batch_size integer,
    auto_reveal boolean DEFAULT false,
    reveal_delay integer,
    placeholder_image_uri text,
    metadata_frozen boolean DEFAULT false,
    metadata_provenance_hash text,
    mint_roles text[],
    admin_mint_enabled boolean DEFAULT true,
    public_mint_enabled boolean DEFAULT false,
    burn_roles text[],
    transfer_locked boolean DEFAULT false,
    soulbound boolean DEFAULT false,
    creator_earnings_enabled boolean DEFAULT false,
    creator_earnings_percentage text,
    creator_earnings_address text,
    marketplace_approved text[],
    operator_filter_enabled boolean DEFAULT false,
    custom_operator_filter_address text,
    utility_enabled boolean DEFAULT false,
    utility_type text,
    staking_enabled boolean DEFAULT false,
    staking_rewards_token_address text,
    staking_rewards_rate text,
    breeding_enabled boolean DEFAULT false,
    evolution_enabled boolean DEFAULT false,
    supply_cap_enabled boolean DEFAULT false,
    total_supply_cap text,
    mint_phases_enabled boolean DEFAULT false,
    dutch_auction_enabled boolean DEFAULT false,
    dutch_auction_start_price text,
    dutch_auction_end_price text,
    dutch_auction_duration integer,
    cross_chain_enabled boolean DEFAULT false,
    bridge_contracts jsonb,
    layer2_enabled boolean DEFAULT false,
    layer2_networks text[],
    use_geographic_restrictions boolean DEFAULT false,
    default_restriction_policy text DEFAULT 'allowed'::text,
    CONSTRAINT check_whitelist_config_valid CHECK (public.validate_whitelist_config_permissive(whitelist_config)),
    CONSTRAINT sales_config_structure_check CHECK (((sales_config IS NULL) OR ((jsonb_typeof(sales_config) = 'object'::text) AND (sales_config ? 'enabled'::text) AND (((sales_config -> 'enabled'::text))::text = ANY (ARRAY['true'::text, 'false'::text]))))),
    CONSTRAINT whitelist_config_structure_check CHECK (((whitelist_config IS NULL) OR ((jsonb_typeof(whitelist_config) = 'object'::text) AND (whitelist_config ? 'enabled'::text) AND (((whitelist_config -> 'enabled'::text))::text = ANY (ARRAY['true'::text, 'false'::text])))))
);


--
-- Name: COLUMN token_erc721_properties.contract_uri; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc721_properties.contract_uri IS 'Contract-level metadata URI';


--
-- Name: COLUMN token_erc721_properties.revealable; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc721_properties.revealable IS 'Whether NFTs are revealed in batches';


--
-- Name: COLUMN token_erc721_properties.reserved_tokens; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc721_properties.reserved_tokens IS 'Number of tokens reserved for team/partnerships';


--
-- Name: COLUMN token_erc721_properties.enable_fractional_ownership; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc721_properties.enable_fractional_ownership IS 'Whether NFTs can be fractionalized';


--
-- Name: COLUMN token_erc721_properties.soulbound; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc721_properties.soulbound IS 'Whether tokens are non-transferable after mint';


--
-- Name: COLUMN token_erc721_properties.utility_enabled; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc721_properties.utility_enabled IS 'Whether NFTs have utility beyond collectibility';


--
-- Name: COLUMN token_erc721_properties.staking_enabled; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc721_properties.staking_enabled IS 'Whether NFTs can be staked for rewards';


--
-- Name: COLUMN token_erc721_properties.cross_chain_enabled; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_erc721_properties.cross_chain_enabled IS 'Whether NFTs support cross-chain transfers';


--
-- Name: token_erc721_trait_definitions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_erc721_trait_definitions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    trait_name text NOT NULL,
    trait_type text NOT NULL,
    possible_values jsonb,
    rarity_weights jsonb,
    is_required boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: token_erc721_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.token_erc721_view AS
 SELECT t.id AS token_id,
    t.name,
    t.symbol,
    t.decimals,
    t.standard,
    t.total_supply,
    t.metadata,
    t.status,
    t.description,
    t.created_at AS token_created_at,
    t.updated_at AS token_updated_at,
    p.id AS erc721_property_id,
    p.base_uri,
    p.metadata_storage,
    p.max_supply,
    p.has_royalty,
    p.royalty_percentage,
    p.royalty_receiver,
    p.is_burnable,
    p.is_pausable,
    p.asset_type,
    p.minting_method,
    p.auto_increment_ids,
    p.enumerable,
    p.uri_storage,
    p.access_control,
    p.updatable_uris,
    p.sales_config,
    p.whitelist_config,
    p.permission_config,
    p.contract_uri,
    p.revealable,
    p.pre_reveal_uri,
    p.reserved_tokens,
    p.minting_price,
    p.max_mints_per_tx,
    p.max_mints_per_wallet,
    p.enable_fractional_ownership,
    p.enable_dynamic_metadata,
    p.public_sale_enabled,
    p.public_sale_price,
    p.public_sale_start_time,
    p.whitelist_sale_enabled,
    p.whitelist_sale_price,
    p.whitelist_sale_start_time,
    p.utility_enabled,
    p.utility_type,
    p.staking_enabled,
    p.soulbound,
    p.cross_chain_enabled,
    p.created_at AS property_created_at,
    p.updated_at AS property_updated_at
   FROM (public.tokens t
     LEFT JOIN public.token_erc721_properties p ON ((t.id = p.token_id)))
  WHERE (t.standard = 'ERC-721'::public.token_standard_enum);


--
-- Name: token_events; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_events (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    token_id uuid NOT NULL,
    event_type text NOT NULL,
    severity text NOT NULL,
    message text NOT NULL,
    data jsonb,
    "timestamp" timestamp with time zone DEFAULT now() NOT NULL,
    is_read boolean DEFAULT false NOT NULL,
    CONSTRAINT token_events_severity_check CHECK ((severity = ANY (ARRAY['info'::text, 'low'::text, 'medium'::text, 'high'::text, 'critical'::text])))
);


--
-- Name: token_geographic_restrictions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_geographic_restrictions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    restriction_type text NOT NULL,
    country_code character(2) NOT NULL,
    max_ownership_percentage numeric(5,2),
    min_investment_amount text,
    max_investment_amount text,
    requires_local_custodian boolean DEFAULT false,
    requires_tax_clearance boolean DEFAULT false,
    requires_regulatory_approval boolean DEFAULT false,
    holding_period_restriction integer,
    transfer_restrictions jsonb,
    reporting_requirements jsonb,
    effective_date date DEFAULT CURRENT_DATE NOT NULL,
    expiry_date date,
    notes text,
    created_by text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT valid_ownership_percentage CHECK (((max_ownership_percentage >= (0)::numeric) AND (max_ownership_percentage <= (100)::numeric))),
    CONSTRAINT valid_restriction_type CHECK ((restriction_type = ANY (ARRAY['blocked'::text, 'allowed'::text, 'limited'::text, 'enhanced_dd'::text, 'conditional'::text])))
);


--
-- Name: TABLE token_geographic_restrictions; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.token_geographic_restrictions IS 'Token-specific geographic restrictions and compliance rules';


--
-- Name: token_geographic_restrictions_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.token_geographic_restrictions_view AS
 SELECT tgr.token_id,
    t.name AS token_name,
    t.symbol AS token_symbol,
    t.standard,
    tgr.restriction_type,
    gj.country_code,
    gj.country_name,
    gj.region,
    gj.regulatory_regime,
    tgr.max_ownership_percentage,
    tgr.requires_local_custodian,
    tgr.requires_regulatory_approval,
    gj.sanctions_risk_level,
    gj.is_ofac_sanctioned,
    gj.is_eu_sanctioned,
    gj.is_un_sanctioned,
    tgr.effective_date,
    tgr.expiry_date,
    tgr.notes
   FROM ((public.token_geographic_restrictions tgr
     JOIN public.tokens t ON ((tgr.token_id = t.id)))
     JOIN public.geographic_jurisdictions gj ON ((tgr.country_code = gj.country_code)))
  WHERE (((tgr.effective_date IS NULL) OR (tgr.effective_date <= CURRENT_DATE)) AND ((tgr.expiry_date IS NULL) OR (tgr.expiry_date > CURRENT_DATE)));


--
-- Name: token_operations; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_operations (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    operation_type text NOT NULL,
    operator text NOT NULL,
    amount numeric,
    recipient text,
    sender text,
    target_address text,
    nft_token_id text,
    token_type_id text,
    slot_id text,
    value numeric,
    partition text,
    asset_token_address text,
    lock_duration integer,
    lock_reason text,
    unlock_time timestamp with time zone,
    lock_id text,
    transaction_hash text,
    "timestamp" timestamp with time zone DEFAULT now(),
    status text DEFAULT 'SUCCESSFUL'::text,
    error_message text,
    blocks jsonb
);


--
-- Name: token_sanctions_rules; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_sanctions_rules (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    sanctions_regime text NOT NULL,
    screening_enabled boolean DEFAULT true,
    auto_block_sanctioned_entities boolean DEFAULT true,
    enhanced_due_diligence_required boolean DEFAULT false,
    manual_review_threshold text,
    screening_frequency text DEFAULT 'real_time'::text,
    whitelist_override_allowed boolean DEFAULT false,
    last_screening_update timestamp with time zone DEFAULT now(),
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: TABLE token_sanctions_rules; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.token_sanctions_rules IS 'Sanctions screening configuration per token';


--
-- Name: token_templates; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_templates (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    project_id uuid NOT NULL,
    name text NOT NULL,
    description text,
    standard text NOT NULL,
    blocks jsonb NOT NULL,
    metadata jsonb,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT token_templates_standard_check CHECK ((standard = ANY (ARRAY['ERC-20'::text, 'ERC-721'::text, 'ERC-1155'::text, 'ERC-1400'::text, 'ERC-3525'::text, 'ERC-4626'::text])))
);


--
-- Name: token_versions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_versions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    version integer NOT NULL,
    data jsonb NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    created_by text,
    blocks jsonb,
    decimals integer,
    metadata jsonb,
    name text,
    standard text,
    symbol text,
    notes text
);


--
-- Name: token_whitelists; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.token_whitelists (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    token_id uuid NOT NULL,
    wallet_address text NOT NULL,
    blockchain text NOT NULL,
    approved_by uuid,
    approval_date timestamp with time zone DEFAULT now(),
    is_active boolean DEFAULT true,
    metadata jsonb DEFAULT '{}'::jsonb,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    created_by uuid,
    updated_by uuid,
    approval_reason text,
    removal_date timestamp with time zone,
    removal_reason text,
    removal_by uuid
);


--
-- Name: COLUMN token_whitelists.created_by; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_whitelists.created_by IS 'User ID who added the address to whitelist';


--
-- Name: COLUMN token_whitelists.updated_by; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_whitelists.updated_by IS 'User ID who last modified the whitelist entry';


--
-- Name: COLUMN token_whitelists.approval_reason; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_whitelists.approval_reason IS 'Reason for approving the address';


--
-- Name: COLUMN token_whitelists.removal_date; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_whitelists.removal_date IS 'Date when address was removed from whitelist';


--
-- Name: COLUMN token_whitelists.removal_reason; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_whitelists.removal_reason IS 'Reason for removing the address';


--
-- Name: COLUMN token_whitelists.removal_by; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.token_whitelists.removal_by IS 'User ID who removed the address';


--
-- Name: token_whitelist_summary; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.token_whitelist_summary AS
 SELECT t.id AS token_id,
    t.name AS token_name,
    t.symbol AS token_symbol,
    t.standard AS token_standard,
        CASE
            WHEN (t.standard = 'ERC-20'::public.token_standard_enum) THEN COALESCE(((erc20.whitelist_config ->> 'enabled'::text))::boolean, false)
            ELSE NULL::boolean
        END AS erc20_whitelist_enabled,
        CASE
            WHEN (t.standard = 'ERC-721'::public.token_standard_enum) THEN COALESCE(((erc721.whitelist_config ->> 'enabled'::text))::boolean, false)
            ELSE NULL::boolean
        END AS erc721_whitelist_enabled,
        CASE
            WHEN (t.standard = 'ERC-1155'::public.token_standard_enum) THEN COALESCE(((erc1155.whitelist_config ->> 'enabled'::text))::boolean, false)
            ELSE NULL::boolean
        END AS erc1155_whitelist_enabled,
        CASE
            WHEN (t.standard = 'ERC-1400'::public.token_standard_enum) THEN COALESCE(erc1400.investor_whitelist_enabled, false)
            ELSE NULL::boolean
        END AS erc1400_whitelist_enabled,
        CASE
            WHEN (t.standard = 'ERC-3525'::public.token_standard_enum) THEN COALESCE(((erc3525.whitelist_config ->> 'enabled'::text))::boolean, false)
            ELSE NULL::boolean
        END AS erc3525_whitelist_enabled,
        CASE
            WHEN (t.standard = 'ERC-4626'::public.token_standard_enum) THEN COALESCE(((erc4626.whitelist_config ->> 'enabled'::text))::boolean, false)
            ELSE NULL::boolean
        END AS erc4626_whitelist_enabled,
    COALESCE(tw.address_count, (0)::bigint) AS whitelisted_address_count,
    t.created_at,
    t.updated_at
   FROM (((((((public.tokens t
     LEFT JOIN public.token_erc20_properties erc20 ON ((t.id = erc20.token_id)))
     LEFT JOIN public.token_erc721_properties erc721 ON ((t.id = erc721.token_id)))
     LEFT JOIN public.token_erc1155_properties erc1155 ON ((t.id = erc1155.token_id)))
     LEFT JOIN public.token_erc1400_properties erc1400 ON ((t.id = erc1400.token_id)))
     LEFT JOIN public.token_erc3525_properties erc3525 ON ((t.id = erc3525.token_id)))
     LEFT JOIN public.token_erc4626_properties erc4626 ON ((t.id = erc4626.token_id)))
     LEFT JOIN ( SELECT token_whitelists.token_id,
            count(*) AS address_count
           FROM public.token_whitelists
          WHERE (token_whitelists.is_active = true)
          GROUP BY token_whitelists.token_id) tw ON ((t.id = tw.token_id)));


--
-- Name: VIEW token_whitelist_summary; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON VIEW public.token_whitelist_summary IS 'Comprehensive view of whitelist status across all token standards';


--
-- Name: transaction_events; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.transaction_events (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    request_id text NOT NULL,
    event_type text NOT NULL,
    "timestamp" timestamp with time zone DEFAULT now() NOT NULL,
    data jsonb NOT NULL,
    actor text,
    actor_role text,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);


--
-- Name: transaction_notifications; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.transaction_notifications (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    transaction_id text,
    wallet_address text NOT NULL,
    type text NOT NULL,
    message text NOT NULL,
    read boolean DEFAULT false,
    action_url text,
    data jsonb,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);


--
-- Name: transaction_proposals; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.transaction_proposals (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    wallet_id uuid,
    title text NOT NULL,
    description text,
    to_address text NOT NULL,
    value text NOT NULL,
    data text DEFAULT '0x'::text,
    nonce integer,
    status text DEFAULT 'pending'::text NOT NULL,
    blockchain text NOT NULL,
    token_address text,
    token_symbol text,
    created_by uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: transaction_signatures; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.transaction_signatures (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    proposal_id uuid NOT NULL,
    transaction_hash text,
    signer uuid NOT NULL,
    signature text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: TABLE transaction_signatures; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.transaction_signatures IS 'Signatures for multi-signature transactions';


--
-- Name: transactions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.transactions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    transaction_hash text NOT NULL,
    from_address text NOT NULL,
    to_address text NOT NULL,
    value numeric DEFAULT 0 NOT NULL,
    token_symbol text,
    token_address text,
    blockchain text DEFAULT 'ethereum'::text NOT NULL,
    status text DEFAULT 'pending'::text NOT NULL,
    type text DEFAULT 'transfer'::text NOT NULL,
    gas_used numeric,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    gas_limit numeric,
    gas_price numeric,
    max_fee_per_gas numeric,
    max_priority_fee_per_gas numeric,
    block_number integer,
    block_hash text,
    transaction_index integer,
    confirmations integer DEFAULT 0,
    memo text,
    destination_tag integer,
    transfer_type text DEFAULT 'standard'::text,
    network_fee numeric,
    estimated_confirmation_time interval,
    CONSTRAINT transactions_status_check CHECK ((status = ANY (ARRAY['pending'::text, 'confirmed'::text, 'failed'::text]))),
    CONSTRAINT transactions_transfer_type_check CHECK ((transfer_type = ANY (ARRAY['standard'::text, 'token'::text, 'nft'::text, 'multisig'::text]))),
    CONSTRAINT transactions_type_check CHECK ((type = ANY (ARRAY['transfer'::text, 'token_transfer'::text, 'nft_transfer'::text])))
);


--
-- Name: TABLE transactions; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.transactions IS 'General blockchain transactions table for tracking transfers and operations';


--
-- Name: transfer_history; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.transfer_history AS
 SELECT t.id,
    t.transaction_hash AS hash,
    t.from_address,
    t.to_address,
    t.value AS amount,
    t.token_symbol AS asset,
    t.blockchain,
    t.status,
    t.type AS transfer_type,
    t.network_fee,
    t.gas_used,
    t.block_number,
    t.confirmations,
    t.memo,
    t.created_at,
    t.updated_at
   FROM public.transactions t
  WHERE (t.type = ANY (ARRAY['transfer'::text, 'token_transfer'::text, 'nft_transfer'::text]))
  ORDER BY t.created_at DESC;


--
-- Name: VIEW transfer_history; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON VIEW public.transfer_history IS 'Unified view of all transfer transactions across different blockchains';


--
-- Name: user_activity_summary; Type: MATERIALIZED VIEW; Schema: public; Owner: -
--

CREATE MATERIALIZED VIEW public.user_activity_summary AS
 SELECT audit_logs.user_id,
    audit_logs.username,
    count(*) AS total_activities,
    count(DISTINCT audit_logs.action) AS unique_actions,
    count(DISTINCT audit_logs.source) AS unique_sources,
    max(audit_logs."timestamp") AS last_activity,
    min(audit_logs."timestamp") AS first_activity,
    count(
        CASE
            WHEN (audit_logs.status = 'success'::text) THEN 1
            ELSE NULL::integer
        END) AS successful_activities,
    count(
        CASE
            WHEN (audit_logs.status = 'failure'::text) THEN 1
            ELSE NULL::integer
        END) AS failed_activities
   FROM public.audit_logs
  WHERE ((audit_logs.user_id IS NOT NULL) AND (audit_logs."timestamp" >= (CURRENT_TIMESTAMP - '30 days'::interval)))
  GROUP BY audit_logs.user_id, audit_logs.username
  WITH NO DATA;


--
-- Name: user_mfa_settings; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.user_mfa_settings (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    user_id uuid NOT NULL,
    enabled boolean DEFAULT false NOT NULL,
    verified boolean DEFAULT false NOT NULL,
    secret text,
    backup_codes jsonb,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: user_operations; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.user_operations (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    wallet_id uuid NOT NULL,
    user_op_hash text NOT NULL,
    sender_address text NOT NULL,
    nonce bigint NOT NULL,
    init_code text,
    call_data text NOT NULL,
    call_gas_limit bigint NOT NULL,
    verification_gas_limit bigint NOT NULL,
    pre_verification_gas bigint NOT NULL,
    max_fee_per_gas bigint NOT NULL,
    max_priority_fee_per_gas bigint NOT NULL,
    paymaster_and_data text,
    signature_data text NOT NULL,
    status text DEFAULT 'pending'::text,
    transaction_hash text,
    block_number bigint,
    gas_used bigint,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    actual_gas_cost bigint,
    failure_reason text,
    CONSTRAINT user_operations_status_check CHECK ((status = ANY (ARRAY['pending'::text, 'included'::text, 'failed'::text, 'cancelled'::text])))
);


--
-- Name: TABLE user_operations; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.user_operations IS 'EIP-4337 UserOperations with complete lifecycle tracking';


--
-- Name: user_organization_roles; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.user_organization_roles (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid NOT NULL,
    role_id uuid NOT NULL,
    organization_id uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: user_roles; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.user_roles (
    user_id uuid NOT NULL,
    role_id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);


--
-- Name: user_permissions_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.user_permissions_view AS
 SELECT u.id AS user_id,
    u.name AS user_name,
    u.email,
    r.name AS role_name,
    p.name AS permission_name,
    p.description AS permission_description,
    NULL::uuid AS organization_id,
    'global'::text AS scope
   FROM ((((public.users u
     JOIN public.user_roles ur ON ((u.id = ur.user_id)))
     JOIN public.roles r ON ((ur.role_id = r.id)))
     JOIN public.role_permissions rp ON ((r.id = rp.role_id)))
     JOIN public.permissions p ON ((rp.permission_name = p.name)))
UNION ALL
 SELECT u.id AS user_id,
    u.name AS user_name,
    u.email,
    r.name AS role_name,
    p.name AS permission_name,
    p.description AS permission_description,
    uor.organization_id,
        CASE
            WHEN (uor.organization_id IS NULL) THEN 'all_organizations'::text
            ELSE 'organization_specific'::text
        END AS scope
   FROM ((((public.users u
     JOIN public.user_organization_roles uor ON ((u.id = uor.user_id)))
     JOIN public.roles r ON ((uor.role_id = r.id)))
     JOIN public.role_permissions rp ON ((r.id = rp.role_id)))
     JOIN public.permissions p ON ((rp.permission_name = p.name)));


--
-- Name: user_sessions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.user_sessions (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    user_id uuid,
    session_id text NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    last_active_at timestamp with time zone DEFAULT now(),
    ip_address text,
    user_agent text,
    device_info jsonb
);


--
-- Name: user_sidebar_preferences; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.user_sidebar_preferences (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid,
    organization_id uuid,
    collapsed_sections text[],
    hidden_items text[],
    custom_order jsonb,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: valid_policy_approvers; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW public.valid_policy_approvers AS
 SELECT a.id,
    a.policy_rule_id,
    a.user_id,
    a.created_by,
    a.created_at,
    a.status,
    a.comment,
    a."timestamp"
   FROM (public.policy_rule_approvers a
     JOIN public.rules r ON ((a.policy_rule_id = r.rule_id)));


--
-- Name: wallet_details; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.wallet_details (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    wallet_id uuid,
    blockchain_specific_data jsonb NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: wallet_facets; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.wallet_facets (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    wallet_id uuid NOT NULL,
    facet_name text NOT NULL,
    facet_address text NOT NULL,
    function_selectors text[] DEFAULT '{}'::text[] NOT NULL,
    is_active boolean DEFAULT true,
    added_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP
);


--
-- Name: wallet_guardians; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.wallet_guardians (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    wallet_id uuid NOT NULL,
    guardian_address text NOT NULL,
    guardian_name text,
    status text DEFAULT 'pending_add'::text,
    requested_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    confirmed_at timestamp with time zone,
    security_period_ends timestamp with time zone,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT wallet_guardians_status_check CHECK ((status = ANY (ARRAY['pending_add'::text, 'active'::text, 'pending_remove'::text])))
);


--
-- Name: TABLE wallet_guardians; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.wallet_guardians IS 'Guardian addresses for social recovery with time-delayed security';


--
-- Name: wallet_locks; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.wallet_locks (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    wallet_id uuid NOT NULL,
    lock_type text NOT NULL,
    is_locked boolean DEFAULT true NOT NULL,
    locked_by text NOT NULL,
    locked_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    unlock_time timestamp with time zone,
    lock_reason text,
    lock_nonce integer DEFAULT 1 NOT NULL,
    unlock_hash text,
    can_unlock_early boolean DEFAULT true NOT NULL,
    unlocked_by text,
    unlocked_at timestamp with time zone,
    unlock_reason text,
    lock_data jsonb DEFAULT '{}'::jsonb,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT wallet_locks_lock_type_check CHECK ((lock_type = ANY (ARRAY['emergency'::text, 'security'::text, 'maintenance'::text, 'guardian_triggered'::text])))
);


--
-- Name: TABLE wallet_locks; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.wallet_locks IS 'Manages emergency lock/unlock functionality with guardian recovery';


--
-- Name: COLUMN wallet_locks.lock_nonce; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.wallet_locks.lock_nonce IS 'Incremental nonce for replay protection in unlock signatures';


--
-- Name: COLUMN wallet_locks.unlock_hash; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.wallet_locks.unlock_hash IS 'Hash for signature verification during early unlock';


--
-- Name: wallet_restriction_rules; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.wallet_restriction_rules (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    wallet_id uuid NOT NULL,
    rule_type text NOT NULL,
    name text NOT NULL,
    description text,
    is_active boolean DEFAULT true NOT NULL,
    priority integer DEFAULT 100 NOT NULL,
    rule_data jsonb DEFAULT '{}'::jsonb NOT NULL,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT wallet_restriction_rules_rule_type_check CHECK ((rule_type = ANY (ARRAY['whitelist'::text, 'blacklist'::text, 'daily_limit'::text, 'time_restriction'::text, 'amount_limit'::text, 'custom'::text])))
);


--
-- Name: TABLE wallet_restriction_rules; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.wallet_restriction_rules IS 'Defines transaction restriction rules for smart contract wallets (compliance, limits, etc.)';


--
-- Name: COLUMN wallet_restriction_rules.rule_data; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.wallet_restriction_rules.rule_data IS 'JSON configuration for the specific restriction type';


--
-- Name: wallet_signatories; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.wallet_signatories (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    wallet_address text NOT NULL,
    name text NOT NULL,
    email text NOT NULL,
    role text NOT NULL,
    status text DEFAULT 'pending'::text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT wallet_signatories_status_check CHECK ((status = ANY (ARRAY['pending'::text, 'active'::text, 'suspended'::text])))
);


--
-- Name: wallet_transaction_drafts; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.wallet_transaction_drafts (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    transaction_id text NOT NULL,
    wallet_id uuid NOT NULL,
    blockchain text NOT NULL,
    from_address text NOT NULL,
    to_address text NOT NULL,
    amount numeric NOT NULL,
    raw_transaction text NOT NULL,
    nonce integer,
    data jsonb DEFAULT '{}'::jsonb,
    expires_at timestamp with time zone NOT NULL,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP
);


--
-- Name: TABLE wallet_transaction_drafts; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.wallet_transaction_drafts IS 'Temporary storage for unsigned transactions during the signing process';


--
-- Name: COLUMN wallet_transaction_drafts.transaction_id; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.wallet_transaction_drafts.transaction_id IS 'Unique transaction identifier for client reference';


--
-- Name: COLUMN wallet_transaction_drafts.raw_transaction; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.wallet_transaction_drafts.raw_transaction IS 'Unsigned transaction ready for signing';


--
-- Name: COLUMN wallet_transaction_drafts.expires_at; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.wallet_transaction_drafts.expires_at IS 'When this draft expires and should be cleaned up';


--
-- Name: wallet_transactions; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.wallet_transactions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    chain_id text,
    data jsonb,
    from_address text,
    gas_limit numeric,
    gas_price numeric,
    nonce integer,
    to_address text,
    value numeric,
    created_at timestamp with time zone DEFAULT now(),
    tx_hash text,
    status text DEFAULT 'pending'::text,
    token_symbol text,
    token_address text,
    confirmation_count integer DEFAULT 0,
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: wallets; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.wallets (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    investor_id uuid NOT NULL,
    wallet_address text,
    wallet_type text NOT NULL,
    blockchain text DEFAULT 'ethereum'::text NOT NULL,
    is_multi_sig_enabled boolean DEFAULT false NOT NULL,
    guardian_policy jsonb DEFAULT '{}'::jsonb NOT NULL,
    signatories jsonb DEFAULT '[]'::jsonb NOT NULL,
    status text DEFAULT 'pending'::text NOT NULL,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
);


--
-- Name: TABLE wallets; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.wallets IS 'Wallet management for investors';


--
-- Name: COLUMN wallets.investor_id; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.wallets.investor_id IS 'Reference to investor who owns the wallet';


--
-- Name: COLUMN wallets.wallet_address; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.wallets.wallet_address IS 'Blockchain wallet address';


--
-- Name: COLUMN wallets.wallet_type; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.wallets.wallet_type IS 'Type of wallet (guardian, external, etc.)';


--
-- Name: COLUMN wallets.blockchain; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.wallets.blockchain IS 'Blockchain network (ethereum, polygon, etc.)';


--
-- Name: COLUMN wallets.is_multi_sig_enabled; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.wallets.is_multi_sig_enabled IS 'Whether multi-signature is enabled';


--
-- Name: COLUMN wallets.guardian_policy; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.wallets.guardian_policy IS 'Guardian wallet policy configuration';


--
-- Name: COLUMN wallets.signatories; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.wallets.signatories IS 'Array of wallet signatories';


--
-- Name: COLUMN wallets.status; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON COLUMN public.wallets.status IS 'Wallet status (pending, active, inactive)';


--
-- Name: weather_cache; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.weather_cache (
    cache_id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    cache_key character varying(255) NOT NULL,
    weather_data jsonb NOT NULL,
    expires_at timestamp with time zone NOT NULL,
    provider character varying(50) DEFAULT 'open-meteo'::character varying,
    location_lat numeric(10,7),
    location_lon numeric(10,7),
    created_at timestamp with time zone DEFAULT now()
);


--
-- Name: TABLE weather_cache; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.weather_cache IS 'Cache for free weather API data';


--
-- Name: weather_data; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.weather_data (
    weather_id uuid DEFAULT gen_random_uuid() NOT NULL,
    location character varying(255) NOT NULL,
    date date NOT NULL,
    sunlight_hours numeric(5,2),
    wind_speed numeric(5,2),
    temperature numeric(5,2),
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: webauthn_challenges; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.webauthn_challenges (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    wallet_id uuid NOT NULL,
    challenge text NOT NULL,
    challenge_type text NOT NULL,
    expires_at timestamp with time zone NOT NULL,
    is_used boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT webauthn_challenges_challenge_type_check CHECK ((challenge_type = ANY (ARRAY['registration'::text, 'authentication'::text])))
);


--
-- Name: TABLE webauthn_challenges; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.webauthn_challenges IS 'WebAuthn ceremony challenges for registration and authentication';


--
-- Name: webauthn_credentials; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.webauthn_credentials (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    wallet_id uuid NOT NULL,
    credential_id text NOT NULL,
    public_key_x text NOT NULL,
    public_key_y text NOT NULL,
    authenticator_data text,
    is_primary boolean DEFAULT false,
    device_name text,
    platform text,
    created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP
);


--
-- Name: TABLE webauthn_credentials; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON TABLE public.webauthn_credentials IS 'WebAuthn/Passkey credentials for P-256 signature verification';


--
-- Name: whitelist_entries; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.whitelist_entries (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    organization_id text NOT NULL,
    address text NOT NULL,
    label text,
    added_by text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: whitelist_settings; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.whitelist_settings (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    organization_id uuid,
    name text NOT NULL,
    description text,
    rule_id uuid,
    required_approvals integer NOT NULL,
    total_approvers integer NOT NULL,
    created_by uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT whitelist_settings_check CHECK ((total_approvers >= required_approvals)),
    CONSTRAINT whitelist_settings_required_approvals_check CHECK ((required_approvals > 0))
);


--
-- Name: whitelist_signatories; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.whitelist_signatories (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    whitelist_id uuid,
    user_id uuid,
    approved boolean DEFAULT false,
    approved_at timestamp with time zone
);


--
-- Name: workflow_stages; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.workflow_stages (
    id text NOT NULL,
    organization_id text NOT NULL,
    name text NOT NULL,
    description text,
    status text NOT NULL,
    completion_percentage integer DEFAULT 0 NOT NULL,
    "order" integer NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);


--
-- Name: nav_calculation_history id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nav_calculation_history ALTER COLUMN id SET DEFAULT nextval('public.nav_calculation_history_id_seq'::regclass);


--
-- Name: alerts alerts_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.alerts
    ADD CONSTRAINT alerts_pkey PRIMARY KEY (id);


--
-- Name: approval_config_approvers approval_config_approvers_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.approval_config_approvers
    ADD CONSTRAINT approval_config_approvers_pkey PRIMARY KEY (id);


--
-- Name: approval_config_history approval_config_history_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.approval_config_history
    ADD CONSTRAINT approval_config_history_pkey PRIMARY KEY (id);


--
-- Name: approval_configs approval_configs_permission_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.approval_configs
    ADD CONSTRAINT approval_configs_permission_id_key UNIQUE (permission_id);


--
-- Name: approval_configs approval_configs_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.approval_configs
    ADD CONSTRAINT approval_configs_pkey PRIMARY KEY (id);


--
-- Name: approval_requests approval_requests_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.approval_requests
    ADD CONSTRAINT approval_requests_pkey PRIMARY KEY (id);


--
-- Name: asset_backed_products asset_backed_products_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.asset_backed_products
    ADD CONSTRAINT asset_backed_products_pkey PRIMARY KEY (id);


--
-- Name: asset_backed_products asset_backed_products_project_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.asset_backed_products
    ADD CONSTRAINT asset_backed_products_project_id_key UNIQUE (project_id);


--
-- Name: CONSTRAINT asset_backed_products_project_id_key ON asset_backed_products; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON CONSTRAINT asset_backed_products_project_id_key ON public.asset_backed_products IS 'Ensures only one product per project in this table';


--
-- Name: asset_holdings asset_holdings_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.asset_holdings
    ADD CONSTRAINT asset_holdings_pkey PRIMARY KEY (id);


--
-- Name: asset_nav_data asset_nav_data_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.asset_nav_data
    ADD CONSTRAINT asset_nav_data_pkey PRIMARY KEY (id);


--
-- Name: audit_logs audit_logs_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.audit_logs
    ADD CONSTRAINT audit_logs_pkey PRIMARY KEY (id);


--
-- Name: auth_events auth_events_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.auth_events
    ADD CONSTRAINT auth_events_pkey PRIMARY KEY (id);


--
-- Name: batch_operations batch_operations_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.batch_operations
    ADD CONSTRAINT batch_operations_pkey PRIMARY KEY (id);


--
-- Name: bond_products bond_products_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.bond_products
    ADD CONSTRAINT bond_products_pkey PRIMARY KEY (id);


--
-- Name: bond_products bond_products_project_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.bond_products
    ADD CONSTRAINT bond_products_project_id_key UNIQUE (project_id);


--
-- Name: CONSTRAINT bond_products_project_id_key ON bond_products; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON CONSTRAINT bond_products_project_id_key ON public.bond_products IS 'Ensures only one product per project in this table';


--
-- Name: bulk_operations bulk_operations_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.bulk_operations
    ADD CONSTRAINT bulk_operations_pkey PRIMARY KEY (id);


--
-- Name: cap_tables cap_tables_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.cap_tables
    ADD CONSTRAINT cap_tables_pkey PRIMARY KEY (id);


--
-- Name: carbon_offsets carbon_offsets_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.carbon_offsets
    ADD CONSTRAINT carbon_offsets_pkey PRIMARY KEY (offset_id);


--
-- Name: climate_cash_flow_projections climate_cash_flow_projections_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_cash_flow_projections
    ADD CONSTRAINT climate_cash_flow_projections_pkey PRIMARY KEY (projection_id);


--
-- Name: climate_incentives climate_incentives_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_incentives
    ADD CONSTRAINT climate_incentives_pkey PRIMARY KEY (incentive_id);


--
-- Name: climate_investor_pools climate_investor_pools_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_investor_pools
    ADD CONSTRAINT climate_investor_pools_pkey PRIMARY KEY (investor_id, pool_id);


--
-- Name: climate_market_data_cache climate_market_data_cache_cache_key_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_market_data_cache
    ADD CONSTRAINT climate_market_data_cache_cache_key_key UNIQUE (cache_key);


--
-- Name: climate_market_data_cache climate_market_data_cache_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_market_data_cache
    ADD CONSTRAINT climate_market_data_cache_pkey PRIMARY KEY (cache_id);


--
-- Name: climate_nav_calculations climate_nav_calculations_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_nav_calculations
    ADD CONSTRAINT climate_nav_calculations_pkey PRIMARY KEY (id);


--
-- Name: climate_payers climate_payers_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_payers
    ADD CONSTRAINT climate_payers_pkey PRIMARY KEY (payer_id);


--
-- Name: climate_policies climate_policies_name_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_policies
    ADD CONSTRAINT climate_policies_name_key UNIQUE (name);


--
-- Name: climate_policies climate_policies_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_policies
    ADD CONSTRAINT climate_policies_pkey PRIMARY KEY (policy_id);


--
-- Name: climate_policy_impacts climate_policy_impacts_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_policy_impacts
    ADD CONSTRAINT climate_policy_impacts_pkey PRIMARY KEY (impact_id);


--
-- Name: climate_pool_energy_assets climate_pool_energy_assets_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_pool_energy_assets
    ADD CONSTRAINT climate_pool_energy_assets_pkey PRIMARY KEY (pool_id, asset_id);


--
-- Name: climate_pool_incentives climate_pool_incentives_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_pool_incentives
    ADD CONSTRAINT climate_pool_incentives_pkey PRIMARY KEY (pool_id, incentive_id);


--
-- Name: climate_pool_receivables climate_pool_receivables_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_pool_receivables
    ADD CONSTRAINT climate_pool_receivables_pkey PRIMARY KEY (pool_id, receivable_id);


--
-- Name: climate_pool_recs climate_pool_recs_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_pool_recs
    ADD CONSTRAINT climate_pool_recs_pkey PRIMARY KEY (pool_id, rec_id);


--
-- Name: climate_receivables climate_receivables_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_receivables
    ADD CONSTRAINT climate_receivables_pkey PRIMARY KEY (receivable_id);


--
-- Name: climate_reports climate_reports_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_reports
    ADD CONSTRAINT climate_reports_pkey PRIMARY KEY (report_id);


--
-- Name: climate_risk_calculations climate_risk_calculations_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_risk_calculations
    ADD CONSTRAINT climate_risk_calculations_pkey PRIMARY KEY (id);


--
-- Name: climate_risk_factors climate_risk_factors_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_risk_factors
    ADD CONSTRAINT climate_risk_factors_pkey PRIMARY KEY (factor_id);


--
-- Name: climate_tokenization_pools climate_tokenization_pools_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_tokenization_pools
    ADD CONSTRAINT climate_tokenization_pools_pkey PRIMARY KEY (pool_id);


--
-- Name: climate_user_data_cache climate_user_data_cache_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_user_data_cache
    ADD CONSTRAINT climate_user_data_cache_pkey PRIMARY KEY (cache_id);


--
-- Name: climate_user_data_sources climate_user_data_sources_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_user_data_sources
    ADD CONSTRAINT climate_user_data_sources_pkey PRIMARY KEY (source_id);


--
-- Name: collectibles_products collectibles_products_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.collectibles_products
    ADD CONSTRAINT collectibles_products_pkey PRIMARY KEY (id);


--
-- Name: collectibles_products collectibles_products_project_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.collectibles_products
    ADD CONSTRAINT collectibles_products_project_id_key UNIQUE (project_id);


--
-- Name: CONSTRAINT collectibles_products_project_id_key ON collectibles_products; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON CONSTRAINT collectibles_products_project_id_key ON public.collectibles_products IS 'Ensures only one product per project in this table';


--
-- Name: commodities_products commodities_products_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.commodities_products
    ADD CONSTRAINT commodities_products_pkey PRIMARY KEY (id);


--
-- Name: commodities_products commodities_products_project_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.commodities_products
    ADD CONSTRAINT commodities_products_project_id_key UNIQUE (project_id);


--
-- Name: CONSTRAINT commodities_products_project_id_key ON commodities_products; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON CONSTRAINT commodities_products_project_id_key ON public.commodities_products IS 'Ensures only one product per project in this table';


--
-- Name: compliance_checks compliance_checks_investor_id_project_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.compliance_checks
    ADD CONSTRAINT compliance_checks_investor_id_project_id_key UNIQUE (investor_id, project_id);


--
-- Name: compliance_checks compliance_checks_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.compliance_checks
    ADD CONSTRAINT compliance_checks_pkey PRIMARY KEY (id);


--
-- Name: compliance_reports compliance_reports_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.compliance_reports
    ADD CONSTRAINT compliance_reports_pkey PRIMARY KEY (id);


--
-- Name: compliance_settings compliance_settings_organization_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.compliance_settings
    ADD CONSTRAINT compliance_settings_organization_id_key UNIQUE (organization_id);


--
-- Name: compliance_settings compliance_settings_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.compliance_settings
    ADD CONSTRAINT compliance_settings_pkey PRIMARY KEY (id);


--
-- Name: consensus_settings consensus_settings_consensus_type_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.consensus_settings
    ADD CONSTRAINT consensus_settings_consensus_type_key UNIQUE (consensus_type);


--
-- Name: consensus_settings consensus_settings_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.consensus_settings
    ADD CONSTRAINT consensus_settings_pkey PRIMARY KEY (id);


--
-- Name: credential_usage_logs credential_usage_logs_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.credential_usage_logs
    ADD CONSTRAINT credential_usage_logs_pkey PRIMARY KEY (id);


--
-- Name: data_source_mappings data_source_mappings_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.data_source_mappings
    ADD CONSTRAINT data_source_mappings_pkey PRIMARY KEY (mapping_id);


--
-- Name: deployment_rate_limits deployment_rate_limits_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.deployment_rate_limits
    ADD CONSTRAINT deployment_rate_limits_pkey PRIMARY KEY (id);


--
-- Name: dfns_activity_logs dfns_activity_logs_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_activity_logs
    ADD CONSTRAINT dfns_activity_logs_pkey PRIMARY KEY (id);


--
-- Name: dfns_api_requests dfns_api_requests_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_api_requests
    ADD CONSTRAINT dfns_api_requests_pkey PRIMARY KEY (id);


--
-- Name: dfns_applications dfns_applications_app_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_applications
    ADD CONSTRAINT dfns_applications_app_id_key UNIQUE (app_id);


--
-- Name: dfns_applications dfns_applications_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_applications
    ADD CONSTRAINT dfns_applications_pkey PRIMARY KEY (id);


--
-- Name: dfns_authentication_challenges dfns_authentication_challenges_challenge_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_authentication_challenges
    ADD CONSTRAINT dfns_authentication_challenges_challenge_id_key UNIQUE (challenge_id);


--
-- Name: dfns_authentication_challenges dfns_authentication_challenges_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_authentication_challenges
    ADD CONSTRAINT dfns_authentication_challenges_pkey PRIMARY KEY (id);


--
-- Name: dfns_broadcast_transactions dfns_broadcast_transactions_broadcast_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_broadcast_transactions
    ADD CONSTRAINT dfns_broadcast_transactions_broadcast_id_key UNIQUE (broadcast_id);


--
-- Name: dfns_broadcast_transactions dfns_broadcast_transactions_dfns_broadcast_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_broadcast_transactions
    ADD CONSTRAINT dfns_broadcast_transactions_dfns_broadcast_id_key UNIQUE (dfns_broadcast_id);


--
-- Name: dfns_broadcast_transactions dfns_broadcast_transactions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_broadcast_transactions
    ADD CONSTRAINT dfns_broadcast_transactions_pkey PRIMARY KEY (id);


--
-- Name: dfns_credential_challenges dfns_credential_challenges_challenge_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_credential_challenges
    ADD CONSTRAINT dfns_credential_challenges_challenge_id_key UNIQUE (challenge_id);


--
-- Name: dfns_credential_challenges dfns_credential_challenges_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_credential_challenges
    ADD CONSTRAINT dfns_credential_challenges_pkey PRIMARY KEY (id);


--
-- Name: dfns_credentials dfns_credentials_credential_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_credentials
    ADD CONSTRAINT dfns_credentials_credential_id_key UNIQUE (credential_id);


--
-- Name: dfns_credentials dfns_credentials_dfns_credential_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_credentials
    ADD CONSTRAINT dfns_credentials_dfns_credential_id_key UNIQUE (dfns_credential_id);


--
-- Name: dfns_credentials dfns_credentials_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_credentials
    ADD CONSTRAINT dfns_credentials_pkey PRIMARY KEY (id);


--
-- Name: dfns_exchange_accounts dfns_exchange_accounts_account_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_exchange_accounts
    ADD CONSTRAINT dfns_exchange_accounts_account_id_key UNIQUE (account_id);


--
-- Name: dfns_exchange_accounts dfns_exchange_accounts_dfns_account_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_exchange_accounts
    ADD CONSTRAINT dfns_exchange_accounts_dfns_account_id_key UNIQUE (dfns_account_id);


--
-- Name: dfns_exchange_accounts dfns_exchange_accounts_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_exchange_accounts
    ADD CONSTRAINT dfns_exchange_accounts_pkey PRIMARY KEY (id);


--
-- Name: dfns_exchange_balances dfns_exchange_balances_account_id_asset_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_exchange_balances
    ADD CONSTRAINT dfns_exchange_balances_account_id_asset_key UNIQUE (account_id, asset);


--
-- Name: dfns_exchange_balances dfns_exchange_balances_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_exchange_balances
    ADD CONSTRAINT dfns_exchange_balances_pkey PRIMARY KEY (id);


--
-- Name: dfns_exchange_integrations dfns_exchange_integrations_dfns_exchange_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_exchange_integrations
    ADD CONSTRAINT dfns_exchange_integrations_dfns_exchange_id_key UNIQUE (dfns_exchange_id);


--
-- Name: dfns_exchange_integrations dfns_exchange_integrations_integration_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_exchange_integrations
    ADD CONSTRAINT dfns_exchange_integrations_integration_id_key UNIQUE (integration_id);


--
-- Name: dfns_exchange_integrations dfns_exchange_integrations_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_exchange_integrations
    ADD CONSTRAINT dfns_exchange_integrations_pkey PRIMARY KEY (id);


--
-- Name: dfns_fee_sponsors dfns_fee_sponsors_dfns_sponsor_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_fee_sponsors
    ADD CONSTRAINT dfns_fee_sponsors_dfns_sponsor_id_key UNIQUE (dfns_sponsor_id);


--
-- Name: dfns_fee_sponsors dfns_fee_sponsors_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_fee_sponsors
    ADD CONSTRAINT dfns_fee_sponsors_pkey PRIMARY KEY (id);


--
-- Name: dfns_fee_sponsors dfns_fee_sponsors_sponsor_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_fee_sponsors
    ADD CONSTRAINT dfns_fee_sponsors_sponsor_id_key UNIQUE (sponsor_id);


--
-- Name: dfns_fiat_activity_logs dfns_fiat_activity_logs_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_fiat_activity_logs
    ADD CONSTRAINT dfns_fiat_activity_logs_pkey PRIMARY KEY (id);


--
-- Name: dfns_fiat_provider_configs dfns_fiat_provider_configs_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_fiat_provider_configs
    ADD CONSTRAINT dfns_fiat_provider_configs_pkey PRIMARY KEY (id);


--
-- Name: dfns_fiat_provider_configs dfns_fiat_provider_configs_provider_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_fiat_provider_configs
    ADD CONSTRAINT dfns_fiat_provider_configs_provider_key UNIQUE (provider);


--
-- Name: dfns_fiat_quotes dfns_fiat_quotes_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_fiat_quotes
    ADD CONSTRAINT dfns_fiat_quotes_pkey PRIMARY KEY (id);


--
-- Name: dfns_fiat_transactions dfns_fiat_transactions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_fiat_transactions
    ADD CONSTRAINT dfns_fiat_transactions_pkey PRIMARY KEY (id);


--
-- Name: dfns_fiat_transactions dfns_fiat_transactions_provider_provider_transaction_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_fiat_transactions
    ADD CONSTRAINT dfns_fiat_transactions_provider_provider_transaction_id_key UNIQUE (provider, provider_transaction_id);


--
-- Name: dfns_permission_assignments dfns_permission_assignments_permission_id_identity_id_ident_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_permission_assignments
    ADD CONSTRAINT dfns_permission_assignments_permission_id_identity_id_ident_key UNIQUE (permission_id, identity_id, identity_kind);


--
-- Name: dfns_permission_assignments dfns_permission_assignments_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_permission_assignments
    ADD CONSTRAINT dfns_permission_assignments_pkey PRIMARY KEY (id);


--
-- Name: dfns_permissions dfns_permissions_dfns_permission_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_permissions
    ADD CONSTRAINT dfns_permissions_dfns_permission_id_key UNIQUE (dfns_permission_id);


--
-- Name: dfns_permissions dfns_permissions_permission_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_permissions
    ADD CONSTRAINT dfns_permissions_permission_id_key UNIQUE (permission_id);


--
-- Name: dfns_permissions dfns_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_permissions
    ADD CONSTRAINT dfns_permissions_pkey PRIMARY KEY (id);


--
-- Name: dfns_personal_access_tokens dfns_personal_access_tokens_dfns_token_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_personal_access_tokens
    ADD CONSTRAINT dfns_personal_access_tokens_dfns_token_id_key UNIQUE (dfns_token_id);


--
-- Name: dfns_personal_access_tokens dfns_personal_access_tokens_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_personal_access_tokens
    ADD CONSTRAINT dfns_personal_access_tokens_pkey PRIMARY KEY (id);


--
-- Name: dfns_policies dfns_policies_dfns_policy_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_policies
    ADD CONSTRAINT dfns_policies_dfns_policy_id_key UNIQUE (dfns_policy_id);


--
-- Name: dfns_policies dfns_policies_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_policies
    ADD CONSTRAINT dfns_policies_pkey PRIMARY KEY (id);


--
-- Name: dfns_policies dfns_policies_policy_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_policies
    ADD CONSTRAINT dfns_policies_policy_id_key UNIQUE (policy_id);


--
-- Name: dfns_policy_approval_decisions dfns_policy_approval_decisions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_policy_approval_decisions
    ADD CONSTRAINT dfns_policy_approval_decisions_pkey PRIMARY KEY (id);


--
-- Name: dfns_policy_approval_groups dfns_policy_approval_groups_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_policy_approval_groups
    ADD CONSTRAINT dfns_policy_approval_groups_pkey PRIMARY KEY (id);


--
-- Name: dfns_policy_approvals dfns_policy_approvals_approval_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_policy_approvals
    ADD CONSTRAINT dfns_policy_approvals_approval_id_key UNIQUE (approval_id);


--
-- Name: dfns_policy_approvals dfns_policy_approvals_dfns_approval_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_policy_approvals
    ADD CONSTRAINT dfns_policy_approvals_dfns_approval_id_key UNIQUE (dfns_approval_id);


--
-- Name: dfns_policy_approvals dfns_policy_approvals_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_policy_approvals
    ADD CONSTRAINT dfns_policy_approvals_pkey PRIMARY KEY (id);


--
-- Name: dfns_policy_change_requests dfns_policy_change_requests_dfns_change_request_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_policy_change_requests
    ADD CONSTRAINT dfns_policy_change_requests_dfns_change_request_id_key UNIQUE (dfns_change_request_id);


--
-- Name: dfns_policy_change_requests dfns_policy_change_requests_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_policy_change_requests
    ADD CONSTRAINT dfns_policy_change_requests_pkey PRIMARY KEY (id);


--
-- Name: dfns_policy_evaluations dfns_policy_evaluations_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_policy_evaluations
    ADD CONSTRAINT dfns_policy_evaluations_pkey PRIMARY KEY (id);


--
-- Name: dfns_service_accounts dfns_service_accounts_dfns_service_account_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_service_accounts
    ADD CONSTRAINT dfns_service_accounts_dfns_service_account_id_key UNIQUE (dfns_service_account_id);


--
-- Name: dfns_service_accounts dfns_service_accounts_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_service_accounts
    ADD CONSTRAINT dfns_service_accounts_pkey PRIMARY KEY (id);


--
-- Name: dfns_signatures dfns_signatures_dfns_signature_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_signatures
    ADD CONSTRAINT dfns_signatures_dfns_signature_id_key UNIQUE (dfns_signature_id);


--
-- Name: dfns_signatures dfns_signatures_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_signatures
    ADD CONSTRAINT dfns_signatures_pkey PRIMARY KEY (id);


--
-- Name: dfns_signatures dfns_signatures_signature_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_signatures
    ADD CONSTRAINT dfns_signatures_signature_id_key UNIQUE (signature_id);


--
-- Name: dfns_signing_keys dfns_signing_keys_dfns_key_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_signing_keys
    ADD CONSTRAINT dfns_signing_keys_dfns_key_id_key UNIQUE (dfns_key_id);


--
-- Name: dfns_signing_keys dfns_signing_keys_key_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_signing_keys
    ADD CONSTRAINT dfns_signing_keys_key_id_key UNIQUE (key_id);


--
-- Name: dfns_signing_keys dfns_signing_keys_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_signing_keys
    ADD CONSTRAINT dfns_signing_keys_pkey PRIMARY KEY (id);


--
-- Name: dfns_sponsored_fees dfns_sponsored_fees_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_sponsored_fees
    ADD CONSTRAINT dfns_sponsored_fees_pkey PRIMARY KEY (id);


--
-- Name: dfns_sponsored_fees dfns_sponsored_fees_sponsored_fee_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_sponsored_fees
    ADD CONSTRAINT dfns_sponsored_fees_sponsored_fee_id_key UNIQUE (sponsored_fee_id);


--
-- Name: dfns_staking_integrations dfns_staking_integrations_dfns_staking_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_staking_integrations
    ADD CONSTRAINT dfns_staking_integrations_dfns_staking_id_key UNIQUE (dfns_staking_id);


--
-- Name: dfns_staking_integrations dfns_staking_integrations_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_staking_integrations
    ADD CONSTRAINT dfns_staking_integrations_pkey PRIMARY KEY (id);


--
-- Name: dfns_staking_integrations dfns_staking_integrations_staking_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_staking_integrations
    ADD CONSTRAINT dfns_staking_integrations_staking_id_key UNIQUE (staking_id);


--
-- Name: dfns_sync_status dfns_sync_status_entity_type_entity_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_sync_status
    ADD CONSTRAINT dfns_sync_status_entity_type_entity_id_key UNIQUE (entity_type, entity_id);


--
-- Name: dfns_sync_status dfns_sync_status_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_sync_status
    ADD CONSTRAINT dfns_sync_status_pkey PRIMARY KEY (id);


--
-- Name: dfns_transaction_history dfns_transaction_history_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_transaction_history
    ADD CONSTRAINT dfns_transaction_history_pkey PRIMARY KEY (id);


--
-- Name: dfns_transaction_history dfns_transaction_history_wallet_id_tx_hash_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_transaction_history
    ADD CONSTRAINT dfns_transaction_history_wallet_id_tx_hash_key UNIQUE (wallet_id, tx_hash);


--
-- Name: dfns_transfers dfns_transfers_dfns_transfer_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_transfers
    ADD CONSTRAINT dfns_transfers_dfns_transfer_id_key UNIQUE (dfns_transfer_id);


--
-- Name: dfns_transfers dfns_transfers_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_transfers
    ADD CONSTRAINT dfns_transfers_pkey PRIMARY KEY (id);


--
-- Name: dfns_transfers dfns_transfers_transfer_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_transfers
    ADD CONSTRAINT dfns_transfers_transfer_id_key UNIQUE (transfer_id);


--
-- Name: dfns_user_action_challenges dfns_user_action_challenges_challenge_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_user_action_challenges
    ADD CONSTRAINT dfns_user_action_challenges_challenge_id_key UNIQUE (challenge_id);


--
-- Name: dfns_user_action_challenges dfns_user_action_challenges_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_user_action_challenges
    ADD CONSTRAINT dfns_user_action_challenges_pkey PRIMARY KEY (id);


--
-- Name: dfns_user_sessions dfns_user_sessions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_user_sessions
    ADD CONSTRAINT dfns_user_sessions_pkey PRIMARY KEY (id);


--
-- Name: dfns_user_sessions dfns_user_sessions_session_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_user_sessions
    ADD CONSTRAINT dfns_user_sessions_session_id_key UNIQUE (session_id);


--
-- Name: dfns_users dfns_users_dfns_user_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_users
    ADD CONSTRAINT dfns_users_dfns_user_id_key UNIQUE (dfns_user_id);


--
-- Name: dfns_users dfns_users_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_users
    ADD CONSTRAINT dfns_users_pkey PRIMARY KEY (id);


--
-- Name: dfns_users dfns_users_username_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_users
    ADD CONSTRAINT dfns_users_username_key UNIQUE (username);


--
-- Name: dfns_validators dfns_validators_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_validators
    ADD CONSTRAINT dfns_validators_pkey PRIMARY KEY (id);


--
-- Name: dfns_validators dfns_validators_validator_address_network_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_validators
    ADD CONSTRAINT dfns_validators_validator_address_network_key UNIQUE (validator_address, network);


--
-- Name: dfns_wallet_balances dfns_wallet_balances_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_wallet_balances
    ADD CONSTRAINT dfns_wallet_balances_pkey PRIMARY KEY (id);


--
-- Name: dfns_wallet_balances dfns_wallet_balances_wallet_id_asset_symbol_contract_addres_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_wallet_balances
    ADD CONSTRAINT dfns_wallet_balances_wallet_id_asset_symbol_contract_addres_key UNIQUE (wallet_id, asset_symbol, contract_address);


--
-- Name: dfns_wallet_nfts dfns_wallet_nfts_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_wallet_nfts
    ADD CONSTRAINT dfns_wallet_nfts_pkey PRIMARY KEY (id);


--
-- Name: dfns_wallet_nfts dfns_wallet_nfts_wallet_id_contract_token_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_wallet_nfts
    ADD CONSTRAINT dfns_wallet_nfts_wallet_id_contract_token_id_key UNIQUE (wallet_id, contract, token_id);


--
-- Name: dfns_wallets dfns_wallets_dfns_wallet_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_wallets
    ADD CONSTRAINT dfns_wallets_dfns_wallet_id_key UNIQUE (dfns_wallet_id);


--
-- Name: dfns_wallets dfns_wallets_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_wallets
    ADD CONSTRAINT dfns_wallets_pkey PRIMARY KEY (id);


--
-- Name: dfns_wallets dfns_wallets_wallet_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_wallets
    ADD CONSTRAINT dfns_wallets_wallet_id_key UNIQUE (wallet_id);


--
-- Name: dfns_webhook_deliveries dfns_webhook_deliveries_delivery_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_webhook_deliveries
    ADD CONSTRAINT dfns_webhook_deliveries_delivery_id_key UNIQUE (delivery_id);


--
-- Name: dfns_webhook_deliveries dfns_webhook_deliveries_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_webhook_deliveries
    ADD CONSTRAINT dfns_webhook_deliveries_pkey PRIMARY KEY (id);


--
-- Name: dfns_webhooks dfns_webhooks_dfns_webhook_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_webhooks
    ADD CONSTRAINT dfns_webhooks_dfns_webhook_id_key UNIQUE (dfns_webhook_id);


--
-- Name: dfns_webhooks dfns_webhooks_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_webhooks
    ADD CONSTRAINT dfns_webhooks_pkey PRIMARY KEY (id);


--
-- Name: dfns_webhooks dfns_webhooks_webhook_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_webhooks
    ADD CONSTRAINT dfns_webhooks_webhook_id_key UNIQUE (webhook_id);


--
-- Name: digital_tokenised_funds digital_tokenised_funds_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.digital_tokenised_funds
    ADD CONSTRAINT digital_tokenised_funds_pkey PRIMARY KEY (id);


--
-- Name: digital_tokenised_funds digital_tokenised_funds_project_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.digital_tokenised_funds
    ADD CONSTRAINT digital_tokenised_funds_project_id_key UNIQUE (project_id);


--
-- Name: digital_tokenized_fund_products digital_tokenized_fund_products_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.digital_tokenized_fund_products
    ADD CONSTRAINT digital_tokenized_fund_products_pkey PRIMARY KEY (id);


--
-- Name: digital_tokenized_fund_products digital_tokenized_fund_products_project_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.digital_tokenized_fund_products
    ADD CONSTRAINT digital_tokenized_fund_products_project_id_key UNIQUE (project_id);


--
-- Name: CONSTRAINT digital_tokenized_fund_products_project_id_key ON digital_tokenized_fund_products; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON CONSTRAINT digital_tokenized_fund_products_project_id_key ON public.digital_tokenized_fund_products IS 'Ensures only one product per project in this table';


--
-- Name: distribution_redemptions distribution_redemptions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.distribution_redemptions
    ADD CONSTRAINT distribution_redemptions_pkey PRIMARY KEY (id);


--
-- Name: distribution_redemptions distribution_redemptions_unique; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.distribution_redemptions
    ADD CONSTRAINT distribution_redemptions_unique UNIQUE (distribution_id, redemption_request_id);


--
-- Name: distributions distributions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.distributions
    ADD CONSTRAINT distributions_pkey PRIMARY KEY (id);


--
-- Name: document_approvals document_approvals_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.document_approvals
    ADD CONSTRAINT document_approvals_pkey PRIMARY KEY (id);


--
-- Name: document_versions document_versions_document_id_version_number_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.document_versions
    ADD CONSTRAINT document_versions_document_id_version_number_key UNIQUE (document_id, version_number);


--
-- Name: document_versions document_versions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.document_versions
    ADD CONSTRAINT document_versions_pkey PRIMARY KEY (id);


--
-- Name: document_workflows document_workflows_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.document_workflows
    ADD CONSTRAINT document_workflows_pkey PRIMARY KEY (id);


--
-- Name: documents documents_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.documents
    ADD CONSTRAINT documents_pkey PRIMARY KEY (id);


--
-- Name: energy_assets energy_assets_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.energy_assets
    ADD CONSTRAINT energy_assets_pkey PRIMARY KEY (asset_id);


--
-- Name: energy_products energy_products_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.energy_products
    ADD CONSTRAINT energy_products_pkey PRIMARY KEY (id);


--
-- Name: energy_products energy_products_project_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.energy_products
    ADD CONSTRAINT energy_products_project_id_key UNIQUE (project_id);


--
-- Name: CONSTRAINT energy_products_project_id_key ON energy_products; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON CONSTRAINT energy_products_project_id_key ON public.energy_products IS 'Ensures only one product per project in this table';


--
-- Name: equity_products equity_products_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.equity_products
    ADD CONSTRAINT equity_products_pkey PRIMARY KEY (id);


--
-- Name: equity_products equity_products_project_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.equity_products
    ADD CONSTRAINT equity_products_project_id_key UNIQUE (project_id);


--
-- Name: CONSTRAINT equity_products_project_id_key ON equity_products; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON CONSTRAINT equity_products_project_id_key ON public.equity_products IS 'Ensures only one product per project in this table';


--
-- Name: external_api_cache external_api_cache_cache_key_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.external_api_cache
    ADD CONSTRAINT external_api_cache_cache_key_key UNIQUE (cache_key);


--
-- Name: external_api_cache external_api_cache_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.external_api_cache
    ADD CONSTRAINT external_api_cache_pkey PRIMARY KEY (cache_id);


--
-- Name: facet_registry facet_registry_address_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.facet_registry
    ADD CONSTRAINT facet_registry_address_key UNIQUE (address);


--
-- Name: facet_registry facet_registry_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.facet_registry
    ADD CONSTRAINT facet_registry_pkey PRIMARY KEY (id);


--
-- Name: faucet_requests faucet_requests_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.faucet_requests
    ADD CONSTRAINT faucet_requests_pkey PRIMARY KEY (id);


--
-- Name: fiat_quotes fiat_quotes_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.fiat_quotes
    ADD CONSTRAINT fiat_quotes_pkey PRIMARY KEY (id);


--
-- Name: fiat_transactions fiat_transactions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.fiat_transactions
    ADD CONSTRAINT fiat_transactions_pkey PRIMARY KEY (id);


--
-- Name: fiat_transactions fiat_transactions_provider_transaction_unique; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.fiat_transactions
    ADD CONSTRAINT fiat_transactions_provider_transaction_unique UNIQUE (provider, provider_transaction_id);


--
-- Name: fund_nav_data fund_nav_data_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.fund_nav_data
    ADD CONSTRAINT fund_nav_data_pkey PRIMARY KEY (id);


--
-- Name: fund_products fund_products_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.fund_products
    ADD CONSTRAINT fund_products_pkey PRIMARY KEY (id);


--
-- Name: fund_products fund_products_project_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.fund_products
    ADD CONSTRAINT fund_products_project_id_key UNIQUE (project_id);


--
-- Name: CONSTRAINT fund_products_project_id_key ON fund_products; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON CONSTRAINT fund_products_project_id_key ON public.fund_products IS 'Ensures only one product per project in this table';


--
-- Name: geographic_jurisdictions geographic_jurisdictions_country_code_3_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.geographic_jurisdictions
    ADD CONSTRAINT geographic_jurisdictions_country_code_3_key UNIQUE (country_code_3);


--
-- Name: geographic_jurisdictions geographic_jurisdictions_country_code_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.geographic_jurisdictions
    ADD CONSTRAINT geographic_jurisdictions_country_code_key UNIQUE (country_code);


--
-- Name: geographic_jurisdictions geographic_jurisdictions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.geographic_jurisdictions
    ADD CONSTRAINT geographic_jurisdictions_pkey PRIMARY KEY (id);


--
-- Name: guardian_api_tests guardian_api_tests_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.guardian_api_tests
    ADD CONSTRAINT guardian_api_tests_pkey PRIMARY KEY (id);


--
-- Name: guardian_operations guardian_operations_operation_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.guardian_operations
    ADD CONSTRAINT guardian_operations_operation_id_key UNIQUE (operation_id);


--
-- Name: guardian_operations guardian_operations_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.guardian_operations
    ADD CONSTRAINT guardian_operations_pkey PRIMARY KEY (id);


--
-- Name: guardian_wallets guardian_wallets_guardian_wallet_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.guardian_wallets
    ADD CONSTRAINT guardian_wallets_guardian_wallet_id_key UNIQUE (guardian_wallet_id);


--
-- Name: guardian_wallets guardian_wallets_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.guardian_wallets
    ADD CONSTRAINT guardian_wallets_pkey PRIMARY KEY (id);


--
-- Name: health_checks health_checks_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.health_checks
    ADD CONSTRAINT health_checks_pkey PRIMARY KEY (id);


--
-- Name: health_checks health_checks_service_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.health_checks
    ADD CONSTRAINT health_checks_service_key UNIQUE (service);


--
-- Name: individual_documents individual_documents_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.individual_documents
    ADD CONSTRAINT individual_documents_pkey PRIMARY KEY (id);


--
-- Name: infrastructure_products infrastructure_products_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.infrastructure_products
    ADD CONSTRAINT infrastructure_products_pkey PRIMARY KEY (id);


--
-- Name: infrastructure_products infrastructure_products_project_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.infrastructure_products
    ADD CONSTRAINT infrastructure_products_project_id_key UNIQUE (project_id);


--
-- Name: CONSTRAINT infrastructure_products_project_id_key ON infrastructure_products; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON CONSTRAINT infrastructure_products_project_id_key ON public.infrastructure_products IS 'Ensures only one product per project in this table';


--
-- Name: investor_approvals investor_approvals_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.investor_approvals
    ADD CONSTRAINT investor_approvals_pkey PRIMARY KEY (id);


--
-- Name: investor_documents investor_documents_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.investor_documents
    ADD CONSTRAINT investor_documents_pkey PRIMARY KEY (id);


--
-- Name: investor_group_members investor_group_members_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.investor_group_members
    ADD CONSTRAINT investor_group_members_pkey PRIMARY KEY (group_id, investor_id);


--
-- Name: investor_groups_investors investor_groups_investors_group_id_investor_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.investor_groups_investors
    ADD CONSTRAINT investor_groups_investors_group_id_investor_id_key UNIQUE (group_id, investor_id);


--
-- Name: investor_groups_investors investor_groups_investors_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.investor_groups_investors
    ADD CONSTRAINT investor_groups_investors_pkey PRIMARY KEY (id);


--
-- Name: investor_groups investor_groups_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.investor_groups
    ADD CONSTRAINT investor_groups_pkey PRIMARY KEY (id);


--
-- Name: investors investors_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.investors
    ADD CONSTRAINT investors_pkey PRIMARY KEY (investor_id);


--
-- Name: invoice invoice_invoice_number_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.invoice
    ADD CONSTRAINT invoice_invoice_number_key UNIQUE (invoice_number);


--
-- Name: invoice invoice_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.invoice
    ADD CONSTRAINT invoice_pkey PRIMARY KEY (invoice_id);


--
-- Name: invoices invoices_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.invoices
    ADD CONSTRAINT invoices_pkey PRIMARY KEY (id);


--
-- Name: issuer_access_roles issuer_access_roles_issuer_id_user_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.issuer_access_roles
    ADD CONSTRAINT issuer_access_roles_issuer_id_user_id_key UNIQUE (issuer_id, user_id);


--
-- Name: issuer_access_roles issuer_access_roles_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.issuer_access_roles
    ADD CONSTRAINT issuer_access_roles_pkey PRIMARY KEY (id);


--
-- Name: issuer_detail_documents issuer_detail_documents_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.issuer_detail_documents
    ADD CONSTRAINT issuer_detail_documents_pkey PRIMARY KEY (id);


--
-- Name: issuer_documents issuer_documents_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.issuer_documents
    ADD CONSTRAINT issuer_documents_pkey PRIMARY KEY (id);


--
-- Name: kyc_screening_logs kyc_screening_logs_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.kyc_screening_logs
    ADD CONSTRAINT kyc_screening_logs_pkey PRIMARY KEY (id);


--
-- Name: market_data_snapshots market_data_snapshots_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.market_data_snapshots
    ADD CONSTRAINT market_data_snapshots_pkey PRIMARY KEY (snapshot_id);


--
-- Name: mfa_policies mfa_policies_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.mfa_policies
    ADD CONSTRAINT mfa_policies_pkey PRIMARY KEY (id);


--
-- Name: monitoring_metrics monitoring_metrics_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.monitoring_metrics
    ADD CONSTRAINT monitoring_metrics_pkey PRIMARY KEY (id);


--
-- Name: moonpay_asset_cache moonpay_asset_cache_contract_address_token_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.moonpay_asset_cache
    ADD CONSTRAINT moonpay_asset_cache_contract_address_token_id_key UNIQUE (contract_address, token_id);


--
-- Name: moonpay_asset_cache moonpay_asset_cache_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.moonpay_asset_cache
    ADD CONSTRAINT moonpay_asset_cache_pkey PRIMARY KEY (id);


--
-- Name: moonpay_compliance_alerts moonpay_compliance_alerts_alert_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.moonpay_compliance_alerts
    ADD CONSTRAINT moonpay_compliance_alerts_alert_id_key UNIQUE (alert_id);


--
-- Name: moonpay_compliance_alerts moonpay_compliance_alerts_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.moonpay_compliance_alerts
    ADD CONSTRAINT moonpay_compliance_alerts_pkey PRIMARY KEY (id);


--
-- Name: moonpay_customers moonpay_customers_external_customer_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.moonpay_customers
    ADD CONSTRAINT moonpay_customers_external_customer_id_key UNIQUE (external_customer_id);


--
-- Name: moonpay_customers moonpay_customers_moonpay_customer_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.moonpay_customers
    ADD CONSTRAINT moonpay_customers_moonpay_customer_id_key UNIQUE (moonpay_customer_id);


--
-- Name: moonpay_customers moonpay_customers_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.moonpay_customers
    ADD CONSTRAINT moonpay_customers_pkey PRIMARY KEY (id);


--
-- Name: moonpay_passes moonpay_passes_external_pass_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.moonpay_passes
    ADD CONSTRAINT moonpay_passes_external_pass_id_key UNIQUE (external_pass_id);


--
-- Name: moonpay_passes moonpay_passes_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.moonpay_passes
    ADD CONSTRAINT moonpay_passes_pkey PRIMARY KEY (id);


--
-- Name: moonpay_policies moonpay_policies_external_policy_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.moonpay_policies
    ADD CONSTRAINT moonpay_policies_external_policy_id_key UNIQUE (external_policy_id);


--
-- Name: moonpay_policies moonpay_policies_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.moonpay_policies
    ADD CONSTRAINT moonpay_policies_pkey PRIMARY KEY (id);


--
-- Name: moonpay_policy_logs moonpay_policy_logs_log_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.moonpay_policy_logs
    ADD CONSTRAINT moonpay_policy_logs_log_id_key UNIQUE (log_id);


--
-- Name: moonpay_policy_logs moonpay_policy_logs_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.moonpay_policy_logs
    ADD CONSTRAINT moonpay_policy_logs_pkey PRIMARY KEY (id);


--
-- Name: moonpay_projects moonpay_projects_external_project_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.moonpay_projects
    ADD CONSTRAINT moonpay_projects_external_project_id_key UNIQUE (external_project_id);


--
-- Name: moonpay_projects moonpay_projects_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.moonpay_projects
    ADD CONSTRAINT moonpay_projects_pkey PRIMARY KEY (id);


--
-- Name: moonpay_swap_transactions moonpay_swap_transactions_external_transaction_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.moonpay_swap_transactions
    ADD CONSTRAINT moonpay_swap_transactions_external_transaction_id_key UNIQUE (external_transaction_id);


--
-- Name: moonpay_swap_transactions moonpay_swap_transactions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.moonpay_swap_transactions
    ADD CONSTRAINT moonpay_swap_transactions_pkey PRIMARY KEY (id);


--
-- Name: moonpay_transactions moonpay_transactions_external_transaction_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.moonpay_transactions
    ADD CONSTRAINT moonpay_transactions_external_transaction_id_key UNIQUE (external_transaction_id);


--
-- Name: moonpay_transactions moonpay_transactions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.moonpay_transactions
    ADD CONSTRAINT moonpay_transactions_pkey PRIMARY KEY (id);


--
-- Name: moonpay_webhook_config moonpay_webhook_config_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.moonpay_webhook_config
    ADD CONSTRAINT moonpay_webhook_config_pkey PRIMARY KEY (id);


--
-- Name: moonpay_webhook_config moonpay_webhook_config_webhook_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.moonpay_webhook_config
    ADD CONSTRAINT moonpay_webhook_config_webhook_id_key UNIQUE (webhook_id);


--
-- Name: moonpay_webhook_events moonpay_webhook_events_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.moonpay_webhook_events
    ADD CONSTRAINT moonpay_webhook_events_pkey PRIMARY KEY (id);


--
-- Name: multi_sig_confirmations multi_sig_confirmations_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.multi_sig_confirmations
    ADD CONSTRAINT multi_sig_confirmations_pkey PRIMARY KEY (id);


--
-- Name: multi_sig_transactions multi_sig_transactions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.multi_sig_transactions
    ADD CONSTRAINT multi_sig_transactions_pkey PRIMARY KEY (id);


--
-- Name: multi_sig_wallets multi_sig_wallets_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.multi_sig_wallets
    ADD CONSTRAINT multi_sig_wallets_pkey PRIMARY KEY (id);


--
-- Name: nav_approvals nav_approvals_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nav_approvals
    ADD CONSTRAINT nav_approvals_pkey PRIMARY KEY (id);


--
-- Name: nav_calculation_history nav_calculation_history_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nav_calculation_history
    ADD CONSTRAINT nav_calculation_history_pkey PRIMARY KEY (id);


--
-- Name: nav_calculation_runs nav_calculation_runs_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nav_calculation_runs
    ADD CONSTRAINT nav_calculation_runs_pkey PRIMARY KEY (id);


--
-- Name: nav_fx_rates nav_fx_rates_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nav_fx_rates
    ADD CONSTRAINT nav_fx_rates_pkey PRIMARY KEY (base_ccy, quote_ccy, as_of);


--
-- Name: nav_oracle_configs nav_oracle_configs_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nav_oracle_configs
    ADD CONSTRAINT nav_oracle_configs_pkey PRIMARY KEY (id);


--
-- Name: nav_price_cache nav_price_cache_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nav_price_cache
    ADD CONSTRAINT nav_price_cache_pkey PRIMARY KEY (instrument_key, source, as_of);


--
-- Name: nav_redemptions nav_redemptions_asset_id_as_of_date_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nav_redemptions
    ADD CONSTRAINT nav_redemptions_asset_id_as_of_date_key UNIQUE (asset_id, as_of_date);


--
-- Name: nav_redemptions nav_redemptions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nav_redemptions
    ADD CONSTRAINT nav_redemptions_pkey PRIMARY KEY (id);


--
-- Name: nav_validation_results nav_validation_results_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nav_validation_results
    ADD CONSTRAINT nav_validation_results_pkey PRIMARY KEY (id);


--
-- Name: notification_settings notification_settings_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.notification_settings
    ADD CONSTRAINT notification_settings_pkey PRIMARY KEY (id);


--
-- Name: notifications notifications_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.notifications
    ADD CONSTRAINT notifications_pkey PRIMARY KEY (id);


--
-- Name: onboarding_restrictions onboarding_restrictions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.onboarding_restrictions
    ADD CONSTRAINT onboarding_restrictions_pkey PRIMARY KEY (id);


--
-- Name: onchain_claims onchain_claims_identity_id_issuer_id_topic_signature_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.onchain_claims
    ADD CONSTRAINT onchain_claims_identity_id_issuer_id_topic_signature_key UNIQUE (identity_id, issuer_id, topic, signature);


--
-- Name: onchain_claims onchain_claims_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.onchain_claims
    ADD CONSTRAINT onchain_claims_pkey PRIMARY KEY (id);


--
-- Name: onchain_identities onchain_identities_identity_address_blockchain_network_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.onchain_identities
    ADD CONSTRAINT onchain_identities_identity_address_blockchain_network_key UNIQUE (identity_address, blockchain, network);


--
-- Name: onchain_identities onchain_identities_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.onchain_identities
    ADD CONSTRAINT onchain_identities_pkey PRIMARY KEY (id);


--
-- Name: onchain_identities onchain_identities_user_id_blockchain_network_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.onchain_identities
    ADD CONSTRAINT onchain_identities_user_id_blockchain_network_key UNIQUE (user_id, blockchain, network);


--
-- Name: onchain_issuers onchain_issuers_issuer_address_blockchain_network_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.onchain_issuers
    ADD CONSTRAINT onchain_issuers_issuer_address_blockchain_network_key UNIQUE (issuer_address, blockchain, network);


--
-- Name: onchain_issuers onchain_issuers_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.onchain_issuers
    ADD CONSTRAINT onchain_issuers_pkey PRIMARY KEY (id);


--
-- Name: onchain_verification_history onchain_verification_history_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.onchain_verification_history
    ADD CONSTRAINT onchain_verification_history_pkey PRIMARY KEY (id);


--
-- Name: token_erc1155_properties one_erc1155_property_per_token; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1155_properties
    ADD CONSTRAINT one_erc1155_property_per_token UNIQUE (token_id);


--
-- Name: token_erc1400_properties one_erc1400_property_per_token; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1400_properties
    ADD CONSTRAINT one_erc1400_property_per_token UNIQUE (token_id);


--
-- Name: token_erc3525_properties one_erc3525_property_per_token; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc3525_properties
    ADD CONSTRAINT one_erc3525_property_per_token UNIQUE (token_id);


--
-- Name: token_erc4626_properties one_erc4626_property_per_token; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc4626_properties
    ADD CONSTRAINT one_erc4626_property_per_token UNIQUE (token_id);


--
-- Name: token_erc721_properties one_erc721_property_per_token; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc721_properties
    ADD CONSTRAINT one_erc721_property_per_token UNIQUE (token_id);


--
-- Name: token_erc20_properties one_property_per_token; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc20_properties
    ADD CONSTRAINT one_property_per_token UNIQUE (token_id);


--
-- Name: organizations organizations_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.organizations
    ADD CONSTRAINT organizations_pkey PRIMARY KEY (id);


--
-- Name: payer payer_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.payer
    ADD CONSTRAINT payer_pkey PRIMARY KEY (payer_id);


--
-- Name: paymaster_operations paymaster_operations_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.paymaster_operations
    ADD CONSTRAINT paymaster_operations_pkey PRIMARY KEY (id);


--
-- Name: permissions permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.permissions
    ADD CONSTRAINT permissions_pkey PRIMARY KEY (name);


--
-- Name: policy_rule_approvers policy_rule_approvers_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.policy_rule_approvers
    ADD CONSTRAINT policy_rule_approvers_pkey PRIMARY KEY (id);


--
-- Name: policy_template_approvers policy_template_approvers_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.policy_template_approvers
    ADD CONSTRAINT policy_template_approvers_pkey PRIMARY KEY (template_id, user_id);


--
-- Name: policy_templates policy_templates_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.policy_templates
    ADD CONSTRAINT policy_templates_pkey PRIMARY KEY (template_id);


--
-- Name: pool pool_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.pool
    ADD CONSTRAINT pool_pkey PRIMARY KEY (pool_id);


--
-- Name: private_debt_products private_debt_products_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.private_debt_products
    ADD CONSTRAINT private_debt_products_pkey PRIMARY KEY (id);


--
-- Name: private_debt_products private_debt_products_project_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.private_debt_products
    ADD CONSTRAINT private_debt_products_project_id_key UNIQUE (project_id);


--
-- Name: CONSTRAINT private_debt_products_project_id_key ON private_debt_products; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON CONSTRAINT private_debt_products_project_id_key ON public.private_debt_products IS 'Ensures only one product per project in this table';


--
-- Name: private_equity_products private_equity_products_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.private_equity_products
    ADD CONSTRAINT private_equity_products_pkey PRIMARY KEY (id);


--
-- Name: private_equity_products private_equity_products_project_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.private_equity_products
    ADD CONSTRAINT private_equity_products_project_id_key UNIQUE (project_id);


--
-- Name: CONSTRAINT private_equity_products_project_id_key ON private_equity_products; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON CONSTRAINT private_equity_products_project_id_key ON public.private_equity_products IS 'Ensures only one product per project in this table';


--
-- Name: product_lifecycle_events product_lifecycle_events_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.product_lifecycle_events
    ADD CONSTRAINT product_lifecycle_events_pkey PRIMARY KEY (id);


--
-- Name: production_data production_data_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.production_data
    ADD CONSTRAINT production_data_pkey PRIMARY KEY (production_id);


--
-- Name: profiles profiles_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.profiles
    ADD CONSTRAINT profiles_pkey PRIMARY KEY (id);


--
-- Name: project_organization_assignments project_organization_assignments_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.project_organization_assignments
    ADD CONSTRAINT project_organization_assignments_pkey PRIMARY KEY (id);


--
-- Name: project_wallets project_wallets_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.project_wallets
    ADD CONSTRAINT project_wallets_pkey PRIMARY KEY (id);


--
-- Name: projects projects_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.projects
    ADD CONSTRAINT projects_pkey PRIMARY KEY (id);


--
-- Name: provider provider_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.provider
    ADD CONSTRAINT provider_pkey PRIMARY KEY (provider_id);


--
-- Name: quantitative_investment_strategies_products quantitative_investment_strategies_products_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.quantitative_investment_strategies_products
    ADD CONSTRAINT quantitative_investment_strategies_products_pkey PRIMARY KEY (id);


--
-- Name: quantitative_investment_strategies_products quantitative_investment_strategies_products_project_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.quantitative_investment_strategies_products
    ADD CONSTRAINT quantitative_investment_strategies_products_project_id_key UNIQUE (project_id);


--
-- Name: CONSTRAINT quantitative_investment_strategies_products_project_id_key ON quantitative_investment_strategies_products; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON CONSTRAINT quantitative_investment_strategies_products_project_id_key ON public.quantitative_investment_strategies_products IS 'Ensures only one product per project in this table';


--
-- Name: quantitative_strategies quantitative_strategies_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.quantitative_strategies
    ADD CONSTRAINT quantitative_strategies_pkey PRIMARY KEY (id);


--
-- Name: quantitative_strategies quantitative_strategies_project_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.quantitative_strategies
    ADD CONSTRAINT quantitative_strategies_project_id_key UNIQUE (project_id);


--
-- Name: ramp_network_config ramp_network_config_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.ramp_network_config
    ADD CONSTRAINT ramp_network_config_pkey PRIMARY KEY (id);


--
-- Name: ramp_supported_assets ramp_supported_assets_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.ramp_supported_assets
    ADD CONSTRAINT ramp_supported_assets_pkey PRIMARY KEY (id);


--
-- Name: ramp_supported_assets ramp_supported_assets_symbol_chain_flow_unique; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.ramp_supported_assets
    ADD CONSTRAINT ramp_supported_assets_symbol_chain_flow_unique UNIQUE (symbol, chain, flow_type);


--
-- Name: ramp_transaction_events ramp_transaction_events_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.ramp_transaction_events
    ADD CONSTRAINT ramp_transaction_events_pkey PRIMARY KEY (id);


--
-- Name: ramp_webhook_events ramp_webhook_events_event_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.ramp_webhook_events
    ADD CONSTRAINT ramp_webhook_events_event_id_key UNIQUE (event_id);


--
-- Name: ramp_webhook_events ramp_webhook_events_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.ramp_webhook_events
    ADD CONSTRAINT ramp_webhook_events_pkey PRIMARY KEY (id);


--
-- Name: real_estate_products real_estate_products_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.real_estate_products
    ADD CONSTRAINT real_estate_products_pkey PRIMARY KEY (id);


--
-- Name: real_estate_products real_estate_products_project_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.real_estate_products
    ADD CONSTRAINT real_estate_products_project_id_key UNIQUE (project_id);


--
-- Name: CONSTRAINT real_estate_products_project_id_key ON real_estate_products; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON CONSTRAINT real_estate_products_project_id_key ON public.real_estate_products IS 'Ensures only one product per project in this table';


--
-- Name: rec_price_cache rec_price_cache_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.rec_price_cache
    ADD CONSTRAINT rec_price_cache_pkey PRIMARY KEY (cache_id);


--
-- Name: redemption_analytics redemption_analytics_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.redemption_analytics
    ADD CONSTRAINT redemption_analytics_pkey PRIMARY KEY (id);


--
-- Name: redemption_approvers redemption_approvers_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.redemption_approvers
    ADD CONSTRAINT redemption_approvers_pkey PRIMARY KEY (id);


--
-- Name: redemption_notifications redemption_notifications_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.redemption_notifications
    ADD CONSTRAINT redemption_notifications_pkey PRIMARY KEY (id);


--
-- Name: redemption_requests redemption_requests_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.redemption_requests
    ADD CONSTRAINT redemption_requests_pkey PRIMARY KEY (id);


--
-- Name: redemption_rules redemption_rules_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.redemption_rules
    ADD CONSTRAINT redemption_rules_pkey PRIMARY KEY (id);


--
-- Name: redemption_settlements redemption_settlements_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.redemption_settlements
    ADD CONSTRAINT redemption_settlements_pkey PRIMARY KEY (id);


--
-- Name: redemption_window_templates redemption_window_templates_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.redemption_window_templates
    ADD CONSTRAINT redemption_window_templates_pkey PRIMARY KEY (id);


--
-- Name: redemption_windows redemption_windows_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.redemption_windows
    ADD CONSTRAINT redemption_windows_pkey PRIMARY KEY (id);


--
-- Name: regulatory_equivalence_mapping regulatory_equivalence_mappin_home_jurisdiction_equivalent__key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.regulatory_equivalence_mapping
    ADD CONSTRAINT regulatory_equivalence_mappin_home_jurisdiction_equivalent__key UNIQUE (home_jurisdiction, equivalent_jurisdiction, regulatory_framework);


--
-- Name: regulatory_equivalence_mapping regulatory_equivalence_mapping_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.regulatory_equivalence_mapping
    ADD CONSTRAINT regulatory_equivalence_mapping_pkey PRIMARY KEY (id);


--
-- Name: regulatory_exemptions regulatory_exemptions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.regulatory_exemptions
    ADD CONSTRAINT regulatory_exemptions_pkey PRIMARY KEY (id);


--
-- Name: renewable_energy_credits renewable_energy_credits_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.renewable_energy_credits
    ADD CONSTRAINT renewable_energy_credits_pkey PRIMARY KEY (rec_id);


--
-- Name: restriction_validation_logs restriction_validation_logs_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.restriction_validation_logs
    ADD CONSTRAINT restriction_validation_logs_pkey PRIMARY KEY (id);


--
-- Name: ripple_payments ripple_payments_hash_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.ripple_payments
    ADD CONSTRAINT ripple_payments_hash_key UNIQUE (hash);


--
-- Name: ripple_payments ripple_payments_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.ripple_payments
    ADD CONSTRAINT ripple_payments_pkey PRIMARY KEY (id);


--
-- Name: risk_assessments risk_assessments_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.risk_assessments
    ADD CONSTRAINT risk_assessments_pkey PRIMARY KEY (id);


--
-- Name: role_permissions role_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.role_permissions
    ADD CONSTRAINT role_permissions_pkey PRIMARY KEY (role_id, permission_name);


--
-- Name: roles roles_name_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.roles
    ADD CONSTRAINT roles_name_key UNIQUE (name);


--
-- Name: roles roles_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.roles
    ADD CONSTRAINT roles_pkey PRIMARY KEY (id);


--
-- Name: rules rules_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.rules
    ADD CONSTRAINT rules_pkey UNIQUE (rule_id);


--
-- Name: secure_keys secure_keys_key_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.secure_keys
    ADD CONSTRAINT secure_keys_key_id_key UNIQUE (key_id);


--
-- Name: secure_keys secure_keys_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.secure_keys
    ADD CONSTRAINT secure_keys_pkey PRIMARY KEY (id);


--
-- Name: security_audit_logs security_audit_logs_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.security_audit_logs
    ADD CONSTRAINT security_audit_logs_pkey PRIMARY KEY (id);


--
-- Name: security_events security_events_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.security_events
    ADD CONSTRAINT security_events_pkey PRIMARY KEY (id);


--
-- Name: settlement_metrics settlement_metrics_date_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.settlement_metrics
    ADD CONSTRAINT settlement_metrics_date_key UNIQUE (date);


--
-- Name: settlement_metrics settlement_metrics_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.settlement_metrics
    ADD CONSTRAINT settlement_metrics_pkey PRIMARY KEY (id);


--
-- Name: sidebar_configurations sidebar_configurations_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.sidebar_configurations
    ADD CONSTRAINT sidebar_configurations_pkey PRIMARY KEY (id);


--
-- Name: sidebar_items sidebar_items_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.sidebar_items
    ADD CONSTRAINT sidebar_items_pkey PRIMARY KEY (id);


--
-- Name: sidebar_sections sidebar_sections_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.sidebar_sections
    ADD CONSTRAINT sidebar_sections_pkey PRIMARY KEY (id);


--
-- Name: signature_migration_approvals signature_migration_approvals_migration_id_approver_address_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.signature_migration_approvals
    ADD CONSTRAINT signature_migration_approvals_migration_id_approver_address_key UNIQUE (migration_id, approver_address);


--
-- Name: signature_migration_approvals signature_migration_approvals_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.signature_migration_approvals
    ADD CONSTRAINT signature_migration_approvals_pkey PRIMARY KEY (id);


--
-- Name: signature_migrations signature_migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.signature_migrations
    ADD CONSTRAINT signature_migrations_pkey PRIMARY KEY (id);


--
-- Name: signatures signatures_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.signatures
    ADD CONSTRAINT signatures_pkey PRIMARY KEY (id);


--
-- Name: smart_contract_wallets smart_contract_wallets_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.smart_contract_wallets
    ADD CONSTRAINT smart_contract_wallets_pkey PRIMARY KEY (id);


--
-- Name: stablecoin_collateral stablecoin_collateral_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.stablecoin_collateral
    ADD CONSTRAINT stablecoin_collateral_pkey PRIMARY KEY (id);


--
-- Name: stablecoin_products stablecoin_products_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.stablecoin_products
    ADD CONSTRAINT stablecoin_products_pkey PRIMARY KEY (id);


--
-- Name: stablecoin_products stablecoin_products_project_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.stablecoin_products
    ADD CONSTRAINT stablecoin_products_project_id_key UNIQUE (project_id);


--
-- Name: CONSTRAINT stablecoin_products_project_id_key ON stablecoin_products; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON CONSTRAINT stablecoin_products_project_id_key ON public.stablecoin_products IS 'Ensures only one product per project in this table';


--
-- Name: stage_requirements stage_requirements_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.stage_requirements
    ADD CONSTRAINT stage_requirements_pkey PRIMARY KEY (id);


--
-- Name: stripe_conversion_transactions stripe_conversion_transactions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.stripe_conversion_transactions
    ADD CONSTRAINT stripe_conversion_transactions_pkey PRIMARY KEY (id);


--
-- Name: stripe_stablecoin_accounts stripe_stablecoin_accounts_account_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.stripe_stablecoin_accounts
    ADD CONSTRAINT stripe_stablecoin_accounts_account_id_key UNIQUE (account_id);


--
-- Name: stripe_stablecoin_accounts stripe_stablecoin_accounts_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.stripe_stablecoin_accounts
    ADD CONSTRAINT stripe_stablecoin_accounts_pkey PRIMARY KEY (id);


--
-- Name: stripe_webhook_events stripe_webhook_events_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.stripe_webhook_events
    ADD CONSTRAINT stripe_webhook_events_pkey PRIMARY KEY (id);


--
-- Name: stripe_webhook_events stripe_webhook_events_stripe_event_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.stripe_webhook_events
    ADD CONSTRAINT stripe_webhook_events_stripe_event_id_key UNIQUE (stripe_event_id);


--
-- Name: structured_products structured_products_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.structured_products
    ADD CONSTRAINT structured_products_pkey PRIMARY KEY (id);


--
-- Name: structured_products structured_products_project_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.structured_products
    ADD CONSTRAINT structured_products_project_id_key UNIQUE (project_id);


--
-- Name: CONSTRAINT structured_products_project_id_key ON structured_products; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON CONSTRAINT structured_products_project_id_key ON public.structured_products IS 'Ensures only one product per project in this table';


--
-- Name: subscriptions subscriptions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.subscriptions
    ADD CONSTRAINT subscriptions_pkey PRIMARY KEY (id);


--
-- Name: system_processes system_processes_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.system_processes
    ADD CONSTRAINT system_processes_pkey PRIMARY KEY (id);


--
-- Name: system_settings system_settings_key_unique; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.system_settings
    ADD CONSTRAINT system_settings_key_unique UNIQUE (key);


--
-- Name: system_settings system_settings_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.system_settings
    ADD CONSTRAINT system_settings_pkey PRIMARY KEY (id);


--
-- Name: token_allocations token_allocations_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_allocations
    ADD CONSTRAINT token_allocations_pkey PRIMARY KEY (id);


--
-- Name: token_climate_properties token_climate_properties_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_climate_properties
    ADD CONSTRAINT token_climate_properties_pkey PRIMARY KEY (token_id);


--
-- Name: token_deployment_history token_deployment_history_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_deployment_history
    ADD CONSTRAINT token_deployment_history_pkey PRIMARY KEY (id);


--
-- Name: token_deployments token_deployments_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_deployments
    ADD CONSTRAINT token_deployments_pkey PRIMARY KEY (id);


--
-- Name: token_designs token_designs_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_designs
    ADD CONSTRAINT token_designs_pkey PRIMARY KEY (id);


--
-- Name: token_erc1155_balances token_erc1155_balances_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1155_balances
    ADD CONSTRAINT token_erc1155_balances_pkey PRIMARY KEY (id);


--
-- Name: token_erc1155_crafting_recipes token_erc1155_crafting_recipes_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1155_crafting_recipes
    ADD CONSTRAINT token_erc1155_crafting_recipes_pkey PRIMARY KEY (id);


--
-- Name: token_erc1155_discount_tiers token_erc1155_discount_tiers_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1155_discount_tiers
    ADD CONSTRAINT token_erc1155_discount_tiers_pkey PRIMARY KEY (id);


--
-- Name: token_erc1155_properties token_erc1155_properties_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1155_properties
    ADD CONSTRAINT token_erc1155_properties_pkey PRIMARY KEY (id);


--
-- Name: token_erc1155_type_configs token_erc1155_type_configs_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1155_type_configs
    ADD CONSTRAINT token_erc1155_type_configs_pkey PRIMARY KEY (id);


--
-- Name: token_erc1155_type_configs token_erc1155_type_configs_token_id_token_type_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1155_type_configs
    ADD CONSTRAINT token_erc1155_type_configs_token_id_token_type_id_key UNIQUE (token_id, token_type_id);


--
-- Name: token_erc1155_types token_erc1155_types_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1155_types
    ADD CONSTRAINT token_erc1155_types_pkey PRIMARY KEY (id);


--
-- Name: token_erc1155_uri_mappings token_erc1155_uri_mappings_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1155_uri_mappings
    ADD CONSTRAINT token_erc1155_uri_mappings_pkey PRIMARY KEY (id);


--
-- Name: token_erc1400_controllers token_erc1400_controllers_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1400_controllers
    ADD CONSTRAINT token_erc1400_controllers_pkey PRIMARY KEY (id);


--
-- Name: token_erc1400_corporate_actions token_erc1400_corporate_actions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1400_corporate_actions
    ADD CONSTRAINT token_erc1400_corporate_actions_pkey PRIMARY KEY (id);


--
-- Name: token_erc1400_custody_providers token_erc1400_custody_providers_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1400_custody_providers
    ADD CONSTRAINT token_erc1400_custody_providers_pkey PRIMARY KEY (id);


--
-- Name: token_erc1400_documents token_erc1400_documents_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1400_documents
    ADD CONSTRAINT token_erc1400_documents_pkey PRIMARY KEY (id);


--
-- Name: token_erc1400_partition_balances token_erc1400_partition_balance_partition_id_holder_address_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1400_partition_balances
    ADD CONSTRAINT token_erc1400_partition_balance_partition_id_holder_address_key UNIQUE (partition_id, holder_address);


--
-- Name: token_erc1400_partition_balances token_erc1400_partition_balances_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1400_partition_balances
    ADD CONSTRAINT token_erc1400_partition_balances_pkey PRIMARY KEY (id);


--
-- Name: token_erc1400_partition_operators token_erc1400_partition_opera_partition_id_holder_address_o_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1400_partition_operators
    ADD CONSTRAINT token_erc1400_partition_opera_partition_id_holder_address_o_key UNIQUE (partition_id, holder_address, operator_address);


--
-- Name: token_erc1400_partition_operators token_erc1400_partition_operators_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1400_partition_operators
    ADD CONSTRAINT token_erc1400_partition_operators_pkey PRIMARY KEY (id);


--
-- Name: token_erc1400_partition_transfers token_erc1400_partition_transfers_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1400_partition_transfers
    ADD CONSTRAINT token_erc1400_partition_transfers_pkey PRIMARY KEY (id);


--
-- Name: token_erc1400_partitions token_erc1400_partitions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1400_partitions
    ADD CONSTRAINT token_erc1400_partitions_pkey PRIMARY KEY (id);


--
-- Name: token_erc1400_properties token_erc1400_properties_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1400_properties
    ADD CONSTRAINT token_erc1400_properties_pkey PRIMARY KEY (id);


--
-- Name: token_erc1400_regulatory_filings token_erc1400_regulatory_filings_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1400_regulatory_filings
    ADD CONSTRAINT token_erc1400_regulatory_filings_pkey PRIMARY KEY (id);


--
-- Name: token_erc20_properties token_erc20_properties_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc20_properties
    ADD CONSTRAINT token_erc20_properties_pkey PRIMARY KEY (id);


--
-- Name: token_erc3525_allocations token_erc3525_allocations_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc3525_allocations
    ADD CONSTRAINT token_erc3525_allocations_pkey PRIMARY KEY (id);


--
-- Name: token_erc3525_payment_schedules token_erc3525_payment_schedules_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc3525_payment_schedules
    ADD CONSTRAINT token_erc3525_payment_schedules_pkey PRIMARY KEY (id);


--
-- Name: token_erc3525_properties token_erc3525_properties_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc3525_properties
    ADD CONSTRAINT token_erc3525_properties_pkey PRIMARY KEY (id);


--
-- Name: token_erc3525_slot_configs token_erc3525_slot_configs_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc3525_slot_configs
    ADD CONSTRAINT token_erc3525_slot_configs_pkey PRIMARY KEY (id);


--
-- Name: token_erc3525_slot_configs token_erc3525_slot_configs_token_id_slot_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc3525_slot_configs
    ADD CONSTRAINT token_erc3525_slot_configs_token_id_slot_id_key UNIQUE (token_id, slot_id);


--
-- Name: token_erc3525_slots token_erc3525_slots_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc3525_slots
    ADD CONSTRAINT token_erc3525_slots_pkey PRIMARY KEY (id);


--
-- Name: token_erc3525_value_adjustments token_erc3525_value_adjustments_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc3525_value_adjustments
    ADD CONSTRAINT token_erc3525_value_adjustments_pkey PRIMARY KEY (id);


--
-- Name: token_erc4626_asset_allocations token_erc4626_asset_allocations_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc4626_asset_allocations
    ADD CONSTRAINT token_erc4626_asset_allocations_pkey PRIMARY KEY (id);


--
-- Name: token_erc4626_fee_tiers token_erc4626_fee_tiers_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc4626_fee_tiers
    ADD CONSTRAINT token_erc4626_fee_tiers_pkey PRIMARY KEY (id);


--
-- Name: token_erc4626_performance_metrics token_erc4626_performance_metrics_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc4626_performance_metrics
    ADD CONSTRAINT token_erc4626_performance_metrics_pkey PRIMARY KEY (id);


--
-- Name: token_erc4626_performance_metrics token_erc4626_performance_metrics_token_id_metric_date_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc4626_performance_metrics
    ADD CONSTRAINT token_erc4626_performance_metrics_token_id_metric_date_key UNIQUE (token_id, metric_date);


--
-- Name: token_erc4626_properties token_erc4626_properties_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc4626_properties
    ADD CONSTRAINT token_erc4626_properties_pkey PRIMARY KEY (id);


--
-- Name: token_erc4626_strategy_params token_erc4626_strategy_params_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc4626_strategy_params
    ADD CONSTRAINT token_erc4626_strategy_params_pkey PRIMARY KEY (id);


--
-- Name: token_erc4626_vault_strategies token_erc4626_vault_strategies_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc4626_vault_strategies
    ADD CONSTRAINT token_erc4626_vault_strategies_pkey PRIMARY KEY (id);


--
-- Name: token_erc721_attributes token_erc721_attributes_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc721_attributes
    ADD CONSTRAINT token_erc721_attributes_pkey PRIMARY KEY (id);


--
-- Name: token_erc721_mint_phases token_erc721_mint_phases_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc721_mint_phases
    ADD CONSTRAINT token_erc721_mint_phases_pkey PRIMARY KEY (id);


--
-- Name: token_erc721_mint_phases token_erc721_mint_phases_token_id_phase_order_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc721_mint_phases
    ADD CONSTRAINT token_erc721_mint_phases_token_id_phase_order_key UNIQUE (token_id, phase_order);


--
-- Name: token_erc721_properties token_erc721_properties_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc721_properties
    ADD CONSTRAINT token_erc721_properties_pkey PRIMARY KEY (id);


--
-- Name: token_erc721_trait_definitions token_erc721_trait_definitions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc721_trait_definitions
    ADD CONSTRAINT token_erc721_trait_definitions_pkey PRIMARY KEY (id);


--
-- Name: token_erc721_trait_definitions token_erc721_trait_definitions_token_id_trait_name_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc721_trait_definitions
    ADD CONSTRAINT token_erc721_trait_definitions_token_id_trait_name_key UNIQUE (token_id, trait_name);


--
-- Name: token_events token_events_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_events
    ADD CONSTRAINT token_events_pkey PRIMARY KEY (id);


--
-- Name: token_geographic_restrictions token_geographic_restrictions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_geographic_restrictions
    ADD CONSTRAINT token_geographic_restrictions_pkey PRIMARY KEY (id);


--
-- Name: token_geographic_restrictions token_geographic_restrictions_token_id_country_code_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_geographic_restrictions
    ADD CONSTRAINT token_geographic_restrictions_token_id_country_code_key UNIQUE (token_id, country_code);


--
-- Name: token_operations token_operations_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_operations
    ADD CONSTRAINT token_operations_pkey PRIMARY KEY (id);


--
-- Name: token_sanctions_rules token_sanctions_rules_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_sanctions_rules
    ADD CONSTRAINT token_sanctions_rules_pkey PRIMARY KEY (id);


--
-- Name: token_templates token_templates_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_templates
    ADD CONSTRAINT token_templates_pkey PRIMARY KEY (id);


--
-- Name: token_versions token_versions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_versions
    ADD CONSTRAINT token_versions_pkey PRIMARY KEY (id);


--
-- Name: token_whitelists token_whitelists_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_whitelists
    ADD CONSTRAINT token_whitelists_pkey PRIMARY KEY (id);


--
-- Name: tokens tokens_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.tokens
    ADD CONSTRAINT tokens_pkey PRIMARY KEY (id);


--
-- Name: transaction_events transaction_events_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.transaction_events
    ADD CONSTRAINT transaction_events_pkey PRIMARY KEY (id);


--
-- Name: transaction_notifications transaction_notifications_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.transaction_notifications
    ADD CONSTRAINT transaction_notifications_pkey PRIMARY KEY (id);


--
-- Name: transaction_proposals transaction_proposals_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.transaction_proposals
    ADD CONSTRAINT transaction_proposals_pkey PRIMARY KEY (id);


--
-- Name: transaction_signatures transaction_signatures_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.transaction_signatures
    ADD CONSTRAINT transaction_signatures_pkey PRIMARY KEY (id);


--
-- Name: transactions transactions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.transactions
    ADD CONSTRAINT transactions_pkey PRIMARY KEY (id);


--
-- Name: transactions transactions_transaction_hash_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.transactions
    ADD CONSTRAINT transactions_transaction_hash_key UNIQUE (transaction_hash);


--
-- Name: asset_nav_data unique_asset_date; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.asset_nav_data
    ADD CONSTRAINT unique_asset_date UNIQUE (asset_id, date);


--
-- Name: approval_config_approvers unique_config_role_approver; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.approval_config_approvers
    ADD CONSTRAINT unique_config_role_approver UNIQUE (approval_config_id, approver_role_id);


--
-- Name: approval_config_approvers unique_config_user_approver; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.approval_config_approvers
    ADD CONSTRAINT unique_config_user_approver UNIQUE (approval_config_id, approver_user_id);


--
-- Name: sidebar_configurations unique_default_per_new_target; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.sidebar_configurations
    ADD CONSTRAINT unique_default_per_new_target UNIQUE (target_role_ids, target_profile_type_enums, is_default, organization_id) DEFERRABLE;


--
-- Name: energy_assets unique_energy_asset_combination; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.energy_assets
    ADD CONSTRAINT unique_energy_asset_combination UNIQUE (name, type, location, capacity);


--
-- Name: fund_nav_data unique_fund_date; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.fund_nav_data
    ADD CONSTRAINT unique_fund_date UNIQUE (fund_id, date);


--
-- Name: sidebar_items unique_item_per_section; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.sidebar_items
    ADD CONSTRAINT unique_item_per_section UNIQUE (item_id, section_id);


--
-- Name: project_organization_assignments unique_project_organization_relationship; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.project_organization_assignments
    ADD CONSTRAINT unique_project_organization_relationship UNIQUE (project_id, organization_id, relationship_type);


--
-- Name: regulatory_exemptions unique_region_country_exemption_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.regulatory_exemptions
    ADD CONSTRAINT unique_region_country_exemption_type UNIQUE (region, country, exemption_type);


--
-- Name: sidebar_sections unique_section_per_org; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.sidebar_sections
    ADD CONSTRAINT unique_section_per_org UNIQUE (section_id, organization_id);


--
-- Name: token_erc3525_allocations unique_token_allocation; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc3525_allocations
    ADD CONSTRAINT unique_token_allocation UNIQUE (token_id, slot_id, token_id_within_slot);


--
-- Name: token_erc1400_controllers unique_token_controller; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1400_controllers
    ADD CONSTRAINT unique_token_controller UNIQUE (token_id, address);


--
-- Name: deployment_rate_limits unique_token_deployment; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.deployment_rate_limits
    ADD CONSTRAINT unique_token_deployment UNIQUE (token_id, started_at);


--
-- Name: token_erc1400_partitions unique_token_partition; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1400_partitions
    ADD CONSTRAINT unique_token_partition UNIQUE (token_id, partition_id);


--
-- Name: token_erc3525_slots unique_token_slot; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc3525_slots
    ADD CONSTRAINT unique_token_slot UNIQUE (token_id, slot_id);


--
-- Name: token_erc4626_strategy_params unique_token_strategy_param; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc4626_strategy_params
    ADD CONSTRAINT unique_token_strategy_param UNIQUE (token_id, name);


--
-- Name: token_erc721_attributes unique_token_trait; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc721_attributes
    ADD CONSTRAINT unique_token_trait UNIQUE (token_id, trait_type);


--
-- Name: token_erc1155_types unique_token_type; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1155_types
    ADD CONSTRAINT unique_token_type UNIQUE (token_id, token_type_id);


--
-- Name: user_sidebar_preferences unique_user_prefs; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.user_sidebar_preferences
    ADD CONSTRAINT unique_user_prefs UNIQUE (user_id, organization_id);


--
-- Name: token_whitelists unique_whitelist_token_wallet; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_whitelists
    ADD CONSTRAINT unique_whitelist_token_wallet UNIQUE (token_id, wallet_address);


--
-- Name: project_wallets uq_project_wallets_wallet_address; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.project_wallets
    ADD CONSTRAINT uq_project_wallets_wallet_address UNIQUE (wallet_address);


--
-- Name: user_mfa_settings user_mfa_settings_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.user_mfa_settings
    ADD CONSTRAINT user_mfa_settings_pkey PRIMARY KEY (id);


--
-- Name: user_operations user_operations_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.user_operations
    ADD CONSTRAINT user_operations_pkey PRIMARY KEY (id);


--
-- Name: user_operations user_operations_user_op_hash_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.user_operations
    ADD CONSTRAINT user_operations_user_op_hash_key UNIQUE (user_op_hash);


--
-- Name: user_organization_roles user_organization_roles_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.user_organization_roles
    ADD CONSTRAINT user_organization_roles_pkey PRIMARY KEY (id);


--
-- Name: user_organization_roles user_organization_roles_user_id_role_id_organization_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.user_organization_roles
    ADD CONSTRAINT user_organization_roles_user_id_role_id_organization_id_key UNIQUE (user_id, role_id, organization_id);


--
-- Name: user_roles user_roles_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.user_roles
    ADD CONSTRAINT user_roles_pkey PRIMARY KEY (user_id);


--
-- Name: user_sessions user_sessions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.user_sessions
    ADD CONSTRAINT user_sessions_pkey PRIMARY KEY (id);


--
-- Name: user_sidebar_preferences user_sidebar_preferences_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.user_sidebar_preferences
    ADD CONSTRAINT user_sidebar_preferences_pkey PRIMARY KEY (id);


--
-- Name: users users_email_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_email_key UNIQUE (email);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: wallet_details wallet_details_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.wallet_details
    ADD CONSTRAINT wallet_details_pkey PRIMARY KEY (id);


--
-- Name: wallet_facets wallet_facets_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.wallet_facets
    ADD CONSTRAINT wallet_facets_pkey PRIMARY KEY (id);


--
-- Name: wallet_guardians wallet_guardians_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.wallet_guardians
    ADD CONSTRAINT wallet_guardians_pkey PRIMARY KEY (id);


--
-- Name: wallet_locks wallet_locks_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.wallet_locks
    ADD CONSTRAINT wallet_locks_pkey PRIMARY KEY (id);


--
-- Name: wallet_restriction_rules wallet_restriction_rules_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.wallet_restriction_rules
    ADD CONSTRAINT wallet_restriction_rules_pkey PRIMARY KEY (id);


--
-- Name: wallet_signatories wallet_signatories_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.wallet_signatories
    ADD CONSTRAINT wallet_signatories_pkey PRIMARY KEY (id);


--
-- Name: wallet_signatories wallet_signatories_wallet_address_email_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.wallet_signatories
    ADD CONSTRAINT wallet_signatories_wallet_address_email_key UNIQUE (wallet_address, email);


--
-- Name: wallet_transaction_drafts wallet_transaction_drafts_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.wallet_transaction_drafts
    ADD CONSTRAINT wallet_transaction_drafts_pkey PRIMARY KEY (id);


--
-- Name: wallet_transaction_drafts wallet_transaction_drafts_transaction_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.wallet_transaction_drafts
    ADD CONSTRAINT wallet_transaction_drafts_transaction_id_key UNIQUE (transaction_id);


--
-- Name: wallet_transactions wallet_transactions_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.wallet_transactions
    ADD CONSTRAINT wallet_transactions_pkey PRIMARY KEY (id);


--
-- Name: wallets wallets_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.wallets
    ADD CONSTRAINT wallets_pkey PRIMARY KEY (id);


--
-- Name: weather_cache weather_cache_cache_key_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.weather_cache
    ADD CONSTRAINT weather_cache_cache_key_key UNIQUE (cache_key);


--
-- Name: weather_cache weather_cache_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.weather_cache
    ADD CONSTRAINT weather_cache_pkey PRIMARY KEY (cache_id);


--
-- Name: weather_data weather_data_location_date_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.weather_data
    ADD CONSTRAINT weather_data_location_date_key UNIQUE (location, date);


--
-- Name: weather_data weather_data_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.weather_data
    ADD CONSTRAINT weather_data_pkey PRIMARY KEY (weather_id);


--
-- Name: webauthn_challenges webauthn_challenges_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.webauthn_challenges
    ADD CONSTRAINT webauthn_challenges_pkey PRIMARY KEY (id);


--
-- Name: webauthn_credentials webauthn_credentials_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.webauthn_credentials
    ADD CONSTRAINT webauthn_credentials_pkey PRIMARY KEY (id);


--
-- Name: whitelist_entries whitelist_entries_organization_id_address_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.whitelist_entries
    ADD CONSTRAINT whitelist_entries_organization_id_address_key UNIQUE (organization_id, address);


--
-- Name: whitelist_entries whitelist_entries_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.whitelist_entries
    ADD CONSTRAINT whitelist_entries_pkey PRIMARY KEY (id);


--
-- Name: whitelist_settings whitelist_settings_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.whitelist_settings
    ADD CONSTRAINT whitelist_settings_pkey PRIMARY KEY (id);


--
-- Name: whitelist_signatories whitelist_signatories_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.whitelist_signatories
    ADD CONSTRAINT whitelist_signatories_pkey PRIMARY KEY (id);


--
-- Name: whitelist_signatories whitelist_signatories_whitelist_id_user_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.whitelist_signatories
    ADD CONSTRAINT whitelist_signatories_whitelist_id_user_id_key UNIQUE (whitelist_id, user_id);


--
-- Name: workflow_stages workflow_stages_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.workflow_stages
    ADD CONSTRAINT workflow_stages_pkey PRIMARY KEY (id);


--
-- Name: idx_alerts_service; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_alerts_service ON public.alerts USING btree (service);


--
-- Name: idx_alerts_severity; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_alerts_severity ON public.alerts USING btree (severity);


--
-- Name: idx_alerts_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_alerts_status ON public.alerts USING btree (status);


--
-- Name: idx_approval_config_approvers_config_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_approval_config_approvers_config_id ON public.approval_config_approvers USING btree (approval_config_id);


--
-- Name: idx_approval_config_approvers_role_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_approval_config_approvers_role_id ON public.approval_config_approvers USING btree (approver_role_id);


--
-- Name: idx_approval_config_approvers_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_approval_config_approvers_type ON public.approval_config_approvers USING btree (approver_type);


--
-- Name: idx_approval_config_approvers_user_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_approval_config_approvers_user_id ON public.approval_config_approvers USING btree (approver_user_id);


--
-- Name: idx_approval_config_history_changed_by; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_approval_config_history_changed_by ON public.approval_config_history USING btree (changed_by);


--
-- Name: idx_approval_config_history_config_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_approval_config_history_config_id ON public.approval_config_history USING btree (approval_config_id);


--
-- Name: idx_approval_config_history_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_approval_config_history_created_at ON public.approval_config_history USING btree (created_at);


--
-- Name: idx_approval_configs_active; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_approval_configs_active ON public.approval_configs USING btree (active);


--
-- Name: idx_approval_configs_approval_mode; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_approval_configs_approval_mode ON public.approval_configs USING btree (approval_mode);


--
-- Name: idx_approval_configs_created_by; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_approval_configs_created_by ON public.approval_configs USING btree (created_by);


--
-- Name: idx_asset_backed_products_asset_number; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_asset_backed_products_asset_number ON public.asset_backed_products USING btree (asset_number);


--
-- Name: idx_asset_backed_products_project_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_asset_backed_products_project_id ON public.asset_backed_products USING btree (project_id);


--
-- Name: idx_asset_backed_products_project_id_unique; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX idx_asset_backed_products_project_id_unique ON public.asset_backed_products USING btree (project_id);


--
-- Name: idx_asset_holdings_asset_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_asset_holdings_asset_id ON public.asset_holdings USING btree (asset_id);


--
-- Name: idx_asset_holdings_maturity_date; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_asset_holdings_maturity_date ON public.asset_holdings USING btree (maturity_date);


--
-- Name: idx_asset_holdings_updated_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_asset_holdings_updated_at ON public.asset_holdings USING btree (updated_at);


--
-- Name: idx_asset_nav_data_asset_date; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_asset_nav_data_asset_date ON public.asset_nav_data USING btree (asset_id, date);


--
-- Name: idx_asset_nav_data_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_asset_nav_data_created_at ON public.asset_nav_data USING btree (created_at);


--
-- Name: idx_asset_nav_data_fund_date; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_asset_nav_data_fund_date ON public.asset_nav_data USING btree (asset_id, date DESC);


--
-- Name: idx_asset_nav_data_project_date; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_asset_nav_data_project_date ON public.asset_nav_data USING btree (project_id, date);


--
-- Name: idx_asset_nav_data_source_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_asset_nav_data_source_status ON public.asset_nav_data USING btree (source, validated);


--
-- Name: idx_asset_nav_data_validated; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_asset_nav_data_validated ON public.asset_nav_data USING btree (validated, date DESC);


--
-- Name: idx_audit_logs_action; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_audit_logs_action ON public.audit_logs USING btree (action);


--
-- Name: idx_audit_logs_action_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_audit_logs_action_type ON public.audit_logs USING btree (action_type);


--
-- Name: idx_audit_logs_batch; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_audit_logs_batch ON public.audit_logs USING btree (batch_operation_id) WHERE (batch_operation_id IS NOT NULL);


--
-- Name: idx_audit_logs_batch_operation; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_audit_logs_batch_operation ON public.audit_logs USING btree (batch_operation_id);


--
-- Name: idx_audit_logs_category; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_audit_logs_category ON public.audit_logs USING btree (category);


--
-- Name: idx_audit_logs_correlation; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_audit_logs_correlation ON public.audit_logs USING btree (correlation_id) WHERE (correlation_id IS NOT NULL);


--
-- Name: idx_audit_logs_correlation_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_audit_logs_correlation_id ON public.audit_logs USING btree (correlation_id);


--
-- Name: idx_audit_logs_entity; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_audit_logs_entity ON public.audit_logs USING btree (entity_type, entity_id);


--
-- Name: idx_audit_logs_entity_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_audit_logs_entity_type ON public.audit_logs USING btree (entity_type);


--
-- Name: idx_audit_logs_is_automated; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_audit_logs_is_automated ON public.audit_logs USING btree (is_automated);


--
-- Name: idx_audit_logs_parent_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_audit_logs_parent_id ON public.audit_logs USING btree (parent_id);


--
-- Name: idx_audit_logs_performance; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_audit_logs_performance ON public.audit_logs USING btree ("timestamp" DESC, source, status);


--
-- Name: idx_audit_logs_project; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_audit_logs_project ON public.audit_logs USING btree (project_id, "timestamp" DESC) WHERE (project_id IS NOT NULL);


--
-- Name: idx_audit_logs_search; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_audit_logs_search ON public.audit_logs USING gin (to_tsvector('english'::regconfig, ((action || ' '::text) || COALESCE(details, ''::text))));


--
-- Name: idx_audit_logs_session_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_audit_logs_session_id ON public.audit_logs USING btree (session_id);


--
-- Name: idx_audit_logs_severity; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_audit_logs_severity ON public.audit_logs USING btree (severity);


--
-- Name: idx_audit_logs_source; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_audit_logs_source ON public.audit_logs USING btree (source);


--
-- Name: idx_audit_logs_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_audit_logs_status ON public.audit_logs USING btree (status);


--
-- Name: idx_audit_logs_system_process; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_audit_logs_system_process ON public.audit_logs USING btree (system_process_id);


--
-- Name: idx_audit_logs_timestamp; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_audit_logs_timestamp ON public.audit_logs USING btree ("timestamp" DESC);


--
-- Name: idx_audit_logs_user; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_audit_logs_user ON public.audit_logs USING btree (username);


--
-- Name: idx_audit_logs_user_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_audit_logs_user_id ON public.audit_logs USING btree (user_id);


--
-- Name: idx_batch_operations_index; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_batch_operations_index ON public.batch_operations USING btree (operation_index);


--
-- Name: idx_batch_operations_success; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_batch_operations_success ON public.batch_operations USING btree (success);


--
-- Name: idx_batch_operations_target; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_batch_operations_target ON public.batch_operations USING btree (target_address);


--
-- Name: idx_batch_operations_unique; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX idx_batch_operations_unique ON public.batch_operations USING btree (user_operation_id, operation_index);


--
-- Name: idx_batch_operations_user_op; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_batch_operations_user_op ON public.batch_operations USING btree (user_operation_id);


--
-- Name: idx_bond_products_bond_isin_cusip; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_bond_products_bond_isin_cusip ON public.bond_products USING btree (bond_isin_cusip);


--
-- Name: idx_bond_products_maturity_date; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_bond_products_maturity_date ON public.bond_products USING btree (maturity_date);


--
-- Name: idx_bond_products_project_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_bond_products_project_id ON public.bond_products USING btree (project_id);


--
-- Name: idx_bond_products_project_id_unique; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX idx_bond_products_project_id_unique ON public.bond_products USING btree (project_id);


--
-- Name: idx_bulk_operations_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_bulk_operations_created_at ON public.bulk_operations USING btree (created_at DESC);


--
-- Name: idx_bulk_operations_operation_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_bulk_operations_operation_type ON public.bulk_operations USING btree (operation_type);


--
-- Name: idx_bulk_operations_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_bulk_operations_status ON public.bulk_operations USING btree (status);


--
-- Name: idx_climate_incentives_asset; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_climate_incentives_asset ON public.climate_incentives USING btree (asset_id);


--
-- Name: idx_climate_incentives_project_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_climate_incentives_project_id ON public.climate_incentives USING btree (project_id);


--
-- Name: idx_climate_incentives_receivable; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_climate_incentives_receivable ON public.climate_incentives USING btree (receivable_id);


--
-- Name: idx_climate_incentives_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_climate_incentives_type ON public.climate_incentives USING btree (type);


--
-- Name: idx_climate_market_data_cache_expires; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_climate_market_data_cache_expires ON public.climate_market_data_cache USING btree (expires_at);


--
-- Name: idx_climate_market_data_cache_key; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_climate_market_data_cache_key ON public.climate_market_data_cache USING btree (cache_key);


--
-- Name: idx_climate_nav_asset; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_climate_nav_asset ON public.climate_nav_calculations USING btree (asset_id);


--
-- Name: idx_climate_nav_created; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_climate_nav_created ON public.climate_nav_calculations USING btree (created_at);


--
-- Name: idx_climate_nav_receivable; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_climate_nav_receivable ON public.climate_nav_calculations USING btree (receivable_id);


--
-- Name: idx_climate_nav_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_climate_nav_type ON public.climate_nav_calculations USING btree (calculation_type);


--
-- Name: idx_climate_policies_effective_date; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_climate_policies_effective_date ON public.climate_policies USING btree (effective_date);


--
-- Name: idx_climate_pool_energy_assets_asset_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_climate_pool_energy_assets_asset_id ON public.climate_pool_energy_assets USING btree (asset_id);


--
-- Name: idx_climate_pool_energy_assets_pool_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_climate_pool_energy_assets_pool_id ON public.climate_pool_energy_assets USING btree (pool_id);


--
-- Name: idx_climate_pool_energy_assets_project_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_climate_pool_energy_assets_project_id ON public.climate_pool_energy_assets USING btree (project_id);


--
-- Name: idx_climate_pool_incentives_incentive_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_climate_pool_incentives_incentive_id ON public.climate_pool_incentives USING btree (incentive_id);


--
-- Name: idx_climate_pool_incentives_pool_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_climate_pool_incentives_pool_id ON public.climate_pool_incentives USING btree (pool_id);


--
-- Name: idx_climate_pool_incentives_project_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_climate_pool_incentives_project_id ON public.climate_pool_incentives USING btree (project_id);


--
-- Name: idx_climate_pool_recs_pool_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_climate_pool_recs_pool_id ON public.climate_pool_recs USING btree (pool_id);


--
-- Name: idx_climate_pool_recs_project_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_climate_pool_recs_project_id ON public.climate_pool_recs USING btree (project_id);


--
-- Name: idx_climate_pool_recs_rec_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_climate_pool_recs_rec_id ON public.climate_pool_recs USING btree (rec_id);


--
-- Name: idx_climate_receivables_payer_due; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_climate_receivables_payer_due ON public.climate_receivables USING btree (payer_id, due_date);


--
-- Name: idx_climate_risk_calculations_active; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_climate_risk_calculations_active ON public.climate_risk_calculations USING btree (receivable_id, next_review_date);


--
-- Name: idx_climate_risk_calculations_calculated_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_climate_risk_calculations_calculated_at ON public.climate_risk_calculations USING btree (calculated_at);


--
-- Name: idx_climate_risk_calculations_next_review; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_climate_risk_calculations_next_review ON public.climate_risk_calculations USING btree (next_review_date);


--
-- Name: idx_climate_risk_calculations_receivable_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_climate_risk_calculations_receivable_id ON public.climate_risk_calculations USING btree (receivable_id);


--
-- Name: idx_climate_risk_calculations_risk_level; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_climate_risk_calculations_risk_level ON public.climate_risk_calculations USING btree (composite_risk_level);


--
-- Name: idx_climate_tokenization_pools_project_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_climate_tokenization_pools_project_id ON public.climate_tokenization_pools USING btree (project_id);


--
-- Name: idx_climate_user_data_cache_entity; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_climate_user_data_cache_entity ON public.climate_user_data_cache USING btree (entity_id);


--
-- Name: idx_climate_user_data_cache_expires; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_climate_user_data_cache_expires ON public.climate_user_data_cache USING btree (expires_at);


--
-- Name: idx_climate_user_data_cache_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_climate_user_data_cache_type ON public.climate_user_data_cache USING btree (data_type);


--
-- Name: idx_climate_user_data_sources_active; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_climate_user_data_sources_active ON public.climate_user_data_sources USING btree (is_active);


--
-- Name: idx_climate_user_data_sources_type_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_climate_user_data_sources_type_status ON public.climate_user_data_sources USING btree (source_type, processing_status);


--
-- Name: idx_climate_user_data_sources_user_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_climate_user_data_sources_user_id ON public.climate_user_data_sources USING btree (user_id);


--
-- Name: idx_collectibles_products_asset_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_collectibles_products_asset_id ON public.collectibles_products USING btree (asset_id);


--
-- Name: idx_collectibles_products_project_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_collectibles_products_project_id ON public.collectibles_products USING btree (project_id);


--
-- Name: idx_collectibles_products_project_id_unique; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX idx_collectibles_products_project_id_unique ON public.collectibles_products USING btree (project_id);


--
-- Name: idx_commodities_products_commodity_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_commodities_products_commodity_id ON public.commodities_products USING btree (commodity_id);


--
-- Name: idx_commodities_products_project_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_commodities_products_project_id ON public.commodities_products USING btree (project_id);


--
-- Name: idx_commodities_products_project_id_unique; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX idx_commodities_products_project_id_unique ON public.commodities_products USING btree (project_id);


--
-- Name: idx_compliance_checks_project_risk; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_compliance_checks_project_risk ON public.compliance_checks USING btree (project_id, risk_level);


--
-- Name: idx_compliance_reports_generated_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_compliance_reports_generated_at ON public.compliance_reports USING btree (generated_at);


--
-- Name: idx_compliance_reports_issuer_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_compliance_reports_issuer_id ON public.compliance_reports USING btree (issuer_id);


--
-- Name: idx_compliance_reports_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_compliance_reports_status ON public.compliance_reports USING btree (status);


--
-- Name: idx_credential_usage_logs_credential_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_credential_usage_logs_credential_id ON public.credential_usage_logs USING btree (credential_id);


--
-- Name: idx_data_source_mappings_source; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_data_source_mappings_source ON public.data_source_mappings USING btree (source_id);


--
-- Name: idx_deployment_rate_limits_started_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_deployment_rate_limits_started_at ON public.deployment_rate_limits USING btree (started_at);


--
-- Name: idx_deployment_rate_limits_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_deployment_rate_limits_status ON public.deployment_rate_limits USING btree (status);


--
-- Name: idx_deployment_rate_limits_user_project; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_deployment_rate_limits_user_project ON public.deployment_rate_limits USING btree (user_id, project_id);


--
-- Name: idx_dfns_activity_logs_activity_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_activity_logs_activity_type ON public.dfns_activity_logs USING btree (activity_type);


--
-- Name: idx_dfns_activity_logs_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_activity_logs_created_at ON public.dfns_activity_logs USING btree (created_at);


--
-- Name: idx_dfns_activity_logs_entity_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_activity_logs_entity_id ON public.dfns_activity_logs USING btree (entity_id);


--
-- Name: idx_dfns_activity_logs_entity_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_activity_logs_entity_type ON public.dfns_activity_logs USING btree (entity_type);


--
-- Name: idx_dfns_api_requests_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_api_requests_created_at ON public.dfns_api_requests USING btree (created_at);


--
-- Name: idx_dfns_api_requests_endpoint; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_api_requests_endpoint ON public.dfns_api_requests USING btree (endpoint);


--
-- Name: idx_dfns_api_requests_status_code; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_api_requests_status_code ON public.dfns_api_requests USING btree (status_code);


--
-- Name: idx_dfns_applications_app_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_applications_app_id ON public.dfns_applications USING btree (app_id);


--
-- Name: idx_dfns_applications_organization_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_applications_organization_id ON public.dfns_applications USING btree (organization_id);


--
-- Name: idx_dfns_applications_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_applications_status ON public.dfns_applications USING btree (status);


--
-- Name: idx_dfns_authentication_challenges_expires_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_authentication_challenges_expires_at ON public.dfns_authentication_challenges USING btree (expires_at);


--
-- Name: idx_dfns_authentication_challenges_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_authentication_challenges_status ON public.dfns_authentication_challenges USING btree (status);


--
-- Name: idx_dfns_authentication_challenges_user_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_authentication_challenges_user_id ON public.dfns_authentication_challenges USING btree (user_id);


--
-- Name: idx_dfns_credential_challenges_expires_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_credential_challenges_expires_at ON public.dfns_credential_challenges USING btree (expires_at);


--
-- Name: idx_dfns_credential_challenges_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_credential_challenges_status ON public.dfns_credential_challenges USING btree (status);


--
-- Name: idx_dfns_credential_challenges_user_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_credential_challenges_user_id ON public.dfns_credential_challenges USING btree (user_id);


--
-- Name: idx_dfns_credentials_credential_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_credentials_credential_id ON public.dfns_credentials USING btree (credential_id);


--
-- Name: idx_dfns_credentials_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_credentials_status ON public.dfns_credentials USING btree (status);


--
-- Name: idx_dfns_credentials_user_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_credentials_user_id ON public.dfns_credentials USING btree (user_id);


--
-- Name: idx_dfns_fiat_activity_logs_activity_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_fiat_activity_logs_activity_type ON public.dfns_fiat_activity_logs USING btree (activity_type);


--
-- Name: idx_dfns_fiat_activity_logs_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_fiat_activity_logs_created_at ON public.dfns_fiat_activity_logs USING btree (created_at);


--
-- Name: idx_dfns_fiat_activity_logs_transaction_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_fiat_activity_logs_transaction_id ON public.dfns_fiat_activity_logs USING btree (transaction_id);


--
-- Name: idx_dfns_fiat_quotes_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_fiat_quotes_created_at ON public.dfns_fiat_quotes USING btree (created_at);


--
-- Name: idx_dfns_fiat_quotes_expires_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_fiat_quotes_expires_at ON public.dfns_fiat_quotes USING btree (expires_at);


--
-- Name: idx_dfns_fiat_quotes_provider; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_fiat_quotes_provider ON public.dfns_fiat_quotes USING btree (provider);


--
-- Name: idx_dfns_fiat_quotes_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_fiat_quotes_type ON public.dfns_fiat_quotes USING btree (type);


--
-- Name: idx_dfns_fiat_transactions_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_fiat_transactions_created_at ON public.dfns_fiat_transactions USING btree (created_at);


--
-- Name: idx_dfns_fiat_transactions_crypto_asset; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_fiat_transactions_crypto_asset ON public.dfns_fiat_transactions USING btree (crypto_asset);


--
-- Name: idx_dfns_fiat_transactions_currency; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_fiat_transactions_currency ON public.dfns_fiat_transactions USING btree (currency);


--
-- Name: idx_dfns_fiat_transactions_organization_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_fiat_transactions_organization_id ON public.dfns_fiat_transactions USING btree (organization_id);


--
-- Name: idx_dfns_fiat_transactions_project_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_fiat_transactions_project_id ON public.dfns_fiat_transactions USING btree (project_id);


--
-- Name: idx_dfns_fiat_transactions_provider; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_fiat_transactions_provider ON public.dfns_fiat_transactions USING btree (provider);


--
-- Name: idx_dfns_fiat_transactions_provider_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_fiat_transactions_provider_status ON public.dfns_fiat_transactions USING btree (provider, status);


--
-- Name: idx_dfns_fiat_transactions_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_fiat_transactions_status ON public.dfns_fiat_transactions USING btree (status);


--
-- Name: idx_dfns_fiat_transactions_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_fiat_transactions_type ON public.dfns_fiat_transactions USING btree (type);


--
-- Name: idx_dfns_fiat_transactions_user_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_fiat_transactions_user_id ON public.dfns_fiat_transactions USING btree (user_id);


--
-- Name: idx_dfns_fiat_transactions_user_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_fiat_transactions_user_status ON public.dfns_fiat_transactions USING btree (user_id, status);


--
-- Name: idx_dfns_fiat_transactions_wallet_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_fiat_transactions_wallet_id ON public.dfns_fiat_transactions USING btree (wallet_id);


--
-- Name: idx_dfns_fiat_transactions_wallet_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_fiat_transactions_wallet_type ON public.dfns_fiat_transactions USING btree (wallet_id, type);


--
-- Name: idx_dfns_policies_action_kind; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_policies_action_kind ON public.dfns_policies USING btree (action_kind);


--
-- Name: idx_dfns_policies_activity_kind; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_policies_activity_kind ON public.dfns_policies USING btree (activity_kind);


--
-- Name: idx_dfns_policies_dfns_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_policies_dfns_id ON public.dfns_policies USING btree (dfns_policy_id);


--
-- Name: idx_dfns_policies_org; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_policies_org ON public.dfns_policies USING btree (organization_id);


--
-- Name: idx_dfns_policies_policy_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_policies_policy_id ON public.dfns_policies USING btree (policy_id);


--
-- Name: idx_dfns_policies_rule_kind; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_policies_rule_kind ON public.dfns_policies USING btree (rule_kind);


--
-- Name: idx_dfns_policies_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_policies_status ON public.dfns_policies USING btree (status);


--
-- Name: idx_dfns_policy_approval_decisions_approval; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_policy_approval_decisions_approval ON public.dfns_policy_approval_decisions USING btree (approval_id);


--
-- Name: idx_dfns_policy_approval_decisions_dfns_approval; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_policy_approval_decisions_dfns_approval ON public.dfns_policy_approval_decisions USING btree (dfns_approval_id);


--
-- Name: idx_dfns_policy_approval_decisions_user; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_policy_approval_decisions_user ON public.dfns_policy_approval_decisions USING btree (user_id);


--
-- Name: idx_dfns_policy_approval_groups_dfns_policy; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_policy_approval_groups_dfns_policy ON public.dfns_policy_approval_groups USING btree (dfns_policy_id);


--
-- Name: idx_dfns_policy_approval_groups_policy; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_policy_approval_groups_policy ON public.dfns_policy_approval_groups USING btree (policy_id);


--
-- Name: idx_dfns_policy_approvals_activity; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_policy_approvals_activity ON public.dfns_policy_approvals USING btree (activity_id);


--
-- Name: idx_dfns_policy_approvals_dfns_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_policy_approvals_dfns_id ON public.dfns_policy_approvals USING btree (dfns_approval_id);


--
-- Name: idx_dfns_policy_approvals_org; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_policy_approvals_org ON public.dfns_policy_approvals USING btree (organization_id);


--
-- Name: idx_dfns_policy_approvals_policy_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_policy_approvals_policy_id ON public.dfns_policy_approvals USING btree (policy_id);


--
-- Name: idx_dfns_policy_approvals_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_policy_approvals_status ON public.dfns_policy_approvals USING btree (status);


--
-- Name: idx_dfns_policy_change_requests_dfns_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_policy_change_requests_dfns_id ON public.dfns_policy_change_requests USING btree (dfns_change_request_id);


--
-- Name: idx_dfns_policy_change_requests_entity; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_policy_change_requests_entity ON public.dfns_policy_change_requests USING btree (entity_id);


--
-- Name: idx_dfns_policy_change_requests_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_policy_change_requests_status ON public.dfns_policy_change_requests USING btree (status);


--
-- Name: idx_dfns_policy_evaluations_activity; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_policy_evaluations_activity ON public.dfns_policy_evaluations USING btree (activity_id);


--
-- Name: idx_dfns_policy_evaluations_policy; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_policy_evaluations_policy ON public.dfns_policy_evaluations USING btree (dfns_policy_id);


--
-- Name: idx_dfns_policy_evaluations_timestamp; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_policy_evaluations_timestamp ON public.dfns_policy_evaluations USING btree (evaluation_timestamp);


--
-- Name: idx_dfns_policy_evaluations_trigger_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_policy_evaluations_trigger_status ON public.dfns_policy_evaluations USING btree (trigger_status);


--
-- Name: idx_dfns_signing_keys_key_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_signing_keys_key_id ON public.dfns_signing_keys USING btree (key_id);


--
-- Name: idx_dfns_signing_keys_network; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_signing_keys_network ON public.dfns_signing_keys USING btree (network);


--
-- Name: idx_dfns_signing_keys_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_signing_keys_status ON public.dfns_signing_keys USING btree (status);


--
-- Name: idx_dfns_sync_status_entity_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_sync_status_entity_type ON public.dfns_sync_status USING btree (entity_type);


--
-- Name: idx_dfns_sync_status_last_sync_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_sync_status_last_sync_at ON public.dfns_sync_status USING btree (last_sync_at);


--
-- Name: idx_dfns_sync_status_sync_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_sync_status_sync_status ON public.dfns_sync_status USING btree (sync_status);


--
-- Name: idx_dfns_transaction_history_timestamp; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_transaction_history_timestamp ON public.dfns_transaction_history USING btree ("timestamp");


--
-- Name: idx_dfns_transaction_history_tx_hash; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_transaction_history_tx_hash ON public.dfns_transaction_history USING btree (tx_hash);


--
-- Name: idx_dfns_transaction_history_wallet_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_transaction_history_wallet_id ON public.dfns_transaction_history USING btree (wallet_id);


--
-- Name: idx_dfns_transfers_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_transfers_status ON public.dfns_transfers USING btree (status);


--
-- Name: idx_dfns_transfers_transfer_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_transfers_transfer_id ON public.dfns_transfers USING btree (transfer_id);


--
-- Name: idx_dfns_transfers_tx_hash; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_transfers_tx_hash ON public.dfns_transfers USING btree (tx_hash);


--
-- Name: idx_dfns_transfers_wallet_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_transfers_wallet_id ON public.dfns_transfers USING btree (wallet_id);


--
-- Name: idx_dfns_user_action_challenges_expires_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_user_action_challenges_expires_at ON public.dfns_user_action_challenges USING btree (expires_at);


--
-- Name: idx_dfns_user_action_challenges_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_user_action_challenges_status ON public.dfns_user_action_challenges USING btree (status);


--
-- Name: idx_dfns_user_action_challenges_user_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_user_action_challenges_user_id ON public.dfns_user_action_challenges USING btree (user_id);


--
-- Name: idx_dfns_user_sessions_access_token; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_user_sessions_access_token ON public.dfns_user_sessions USING btree (access_token);


--
-- Name: idx_dfns_user_sessions_expires_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_user_sessions_expires_at ON public.dfns_user_sessions USING btree (expires_at);


--
-- Name: idx_dfns_user_sessions_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_user_sessions_status ON public.dfns_user_sessions USING btree (status);


--
-- Name: idx_dfns_user_sessions_user_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_user_sessions_user_id ON public.dfns_user_sessions USING btree (user_id);


--
-- Name: idx_dfns_users_dfns_user_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_users_dfns_user_id ON public.dfns_users USING btree (dfns_user_id);


--
-- Name: idx_dfns_users_email; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_users_email ON public.dfns_users USING btree (email);


--
-- Name: idx_dfns_users_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_users_status ON public.dfns_users USING btree (status);


--
-- Name: idx_dfns_users_username; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_users_username ON public.dfns_users USING btree (username);


--
-- Name: idx_dfns_wallet_balances_asset_symbol; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_wallet_balances_asset_symbol ON public.dfns_wallet_balances USING btree (asset_symbol);


--
-- Name: idx_dfns_wallet_balances_wallet_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_wallet_balances_wallet_id ON public.dfns_wallet_balances USING btree (wallet_id);


--
-- Name: idx_dfns_wallets_address; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_wallets_address ON public.dfns_wallets USING btree (address);


--
-- Name: idx_dfns_wallets_investor_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_wallets_investor_id ON public.dfns_wallets USING btree (investor_id);


--
-- Name: idx_dfns_wallets_network; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_wallets_network ON public.dfns_wallets USING btree (network);


--
-- Name: idx_dfns_wallets_project_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_wallets_project_id ON public.dfns_wallets USING btree (project_id);


--
-- Name: idx_dfns_wallets_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_wallets_status ON public.dfns_wallets USING btree (status);


--
-- Name: idx_dfns_wallets_wallet_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_dfns_wallets_wallet_id ON public.dfns_wallets USING btree (wallet_id);


--
-- Name: idx_digital_tokenised_funds_asset_symbol; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_digital_tokenised_funds_asset_symbol ON public.digital_tokenised_funds USING btree (asset_symbol);


--
-- Name: idx_digital_tokenised_funds_project_id_unique; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX idx_digital_tokenised_funds_project_id_unique ON public.digital_tokenised_funds USING btree (project_id);


--
-- Name: idx_distributions_distribution_date; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_distributions_distribution_date ON public.distributions USING btree (distribution_date);


--
-- Name: idx_distributions_investor_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_distributions_investor_id ON public.distributions USING btree (investor_id);


--
-- Name: idx_distributions_redemption_tracking; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_distributions_redemption_tracking ON public.distributions USING btree (investor_id, project_id, remaining_amount) WHERE (remaining_amount > (0)::numeric);


--
-- Name: idx_distributions_token_allocation_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_distributions_token_allocation_id ON public.distributions USING btree (token_allocation_id);


--
-- Name: idx_document_approvals_document_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_document_approvals_document_id ON public.document_approvals USING btree (document_id);


--
-- Name: idx_document_versions_document_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_document_versions_document_id ON public.document_versions USING btree (document_id);


--
-- Name: idx_document_workflows_document_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_document_workflows_document_id ON public.document_workflows USING btree (document_id);


--
-- Name: idx_document_workflows_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_document_workflows_status ON public.document_workflows USING btree (status);


--
-- Name: idx_documents_entity_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_documents_entity_id ON public.documents USING btree (entity_id);


--
-- Name: idx_documents_entity_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_documents_entity_type ON public.documents USING btree (entity_type);


--
-- Name: idx_documents_expiry_date; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_documents_expiry_date ON public.documents USING btree (expiry_date);


--
-- Name: idx_documents_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_documents_status ON public.documents USING btree (status);


--
-- Name: idx_documents_workflow_stage; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_documents_workflow_stage ON public.documents USING btree (workflow_stage_id);


--
-- Name: idx_energy_assets_capacity_factor; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_energy_assets_capacity_factor ON public.energy_assets USING btree (capacity_factor_actual);


--
-- Name: idx_energy_assets_competitiveness; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_energy_assets_competitiveness ON public.energy_assets USING btree (lcoe_competitiveness_ratio);


--
-- Name: idx_energy_assets_duplicate_check; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_energy_assets_duplicate_check ON public.energy_assets USING btree (name, type, location, capacity);


--
-- Name: idx_energy_assets_lcoe_calculated; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_energy_assets_lcoe_calculated ON public.energy_assets USING btree (lcoe_calculated);


--
-- Name: idx_energy_products_project_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_energy_products_project_id ON public.energy_products USING btree (project_id);


--
-- Name: idx_energy_products_project_id_unique; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX idx_energy_products_project_id_unique ON public.energy_products USING btree (project_id);


--
-- Name: idx_energy_products_project_identifier; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_energy_products_project_identifier ON public.energy_products USING btree (project_identifier);


--
-- Name: idx_equity_products_project_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_equity_products_project_id ON public.equity_products USING btree (project_id);


--
-- Name: idx_equity_products_project_id_unique; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX idx_equity_products_project_id_unique ON public.equity_products USING btree (project_id);


--
-- Name: idx_equity_products_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_equity_products_status ON public.equity_products USING btree (status);


--
-- Name: idx_equity_products_ticker_symbol; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_equity_products_ticker_symbol ON public.equity_products USING btree (ticker_symbol);


--
-- Name: idx_erc1155_bridge; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_erc1155_bridge ON public.token_erc1155_properties USING btree (bridge_enabled);


--
-- Name: idx_erc1155_crafting; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_erc1155_crafting ON public.token_erc1155_properties USING btree (crafting_enabled);


--
-- Name: idx_erc1155_lazy_minting; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_erc1155_lazy_minting ON public.token_erc1155_properties USING btree (lazy_minting_enabled);


--
-- Name: idx_erc1155_pricing_model; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_erc1155_pricing_model ON public.token_erc1155_properties USING btree (pricing_model);


--
-- Name: idx_erc1155_voting_power; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_erc1155_voting_power ON public.token_erc1155_properties USING btree (voting_power_enabled);


--
-- Name: idx_erc1400_advanced_governance; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_erc1400_advanced_governance ON public.token_erc1400_properties USING btree (advanced_governance_enabled);


--
-- Name: idx_erc1400_compliance_monitoring; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_erc1400_compliance_monitoring ON public.token_erc1400_properties USING btree (real_time_compliance_monitoring);


--
-- Name: idx_erc1400_cross_border; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_erc1400_cross_border ON public.token_erc1400_properties USING btree (cross_border_trading_enabled);


--
-- Name: idx_erc1400_custody_integration; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_erc1400_custody_integration ON public.token_erc1400_properties USING btree (custody_integration_enabled);


--
-- Name: idx_erc1400_institutional_grade; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_erc1400_institutional_grade ON public.token_erc1400_properties USING btree (institutional_grade);


--
-- Name: idx_erc1400_traditional_finance; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_erc1400_traditional_finance ON public.token_erc1400_properties USING btree (traditional_finance_integration);


--
-- Name: idx_erc20_governance_enabled; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_erc20_governance_enabled ON public.token_erc20_properties USING btree (governance_enabled);


--
-- Name: idx_erc20_presale_enabled; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_erc20_presale_enabled ON public.token_erc20_properties USING btree (presale_enabled);


--
-- Name: idx_erc20_token_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_erc20_token_type ON public.token_erc20_properties USING btree (token_type);


--
-- Name: idx_erc20_trading_start; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_erc20_trading_start ON public.token_erc20_properties USING btree (trading_start_time);


--
-- Name: idx_erc3525_compliance; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_erc3525_compliance ON public.token_erc3525_properties USING btree (regulatory_compliance_enabled);


--
-- Name: idx_erc3525_derivative_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_erc3525_derivative_type ON public.token_erc3525_properties USING btree (derivative_type);


--
-- Name: idx_erc3525_expiration_date; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_erc3525_expiration_date ON public.token_erc3525_properties USING btree (expiration_date);


--
-- Name: idx_erc3525_financial_instrument; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_erc3525_financial_instrument ON public.token_erc3525_properties USING btree (financial_instrument_type);


--
-- Name: idx_erc3525_maturity_date; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_erc3525_maturity_date ON public.token_erc3525_properties USING btree (maturity_date);


--
-- Name: idx_erc3525_slot_marketplace; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_erc3525_slot_marketplace ON public.token_erc3525_properties USING btree (slot_marketplace_enabled);


--
-- Name: idx_erc3525_yield_farming; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_erc3525_yield_farming ON public.token_erc3525_properties USING btree (yield_farming_enabled);


--
-- Name: idx_erc4626_compound_frequency; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_erc4626_compound_frequency ON public.token_erc4626_properties USING btree (compound_frequency);


--
-- Name: idx_erc4626_governance; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_erc4626_governance ON public.token_erc4626_properties USING btree (governance_token_enabled);


--
-- Name: idx_erc4626_institutional; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_erc4626_institutional ON public.token_erc4626_properties USING btree (institutional_grade);


--
-- Name: idx_erc4626_multi_asset; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_erc4626_multi_asset ON public.token_erc4626_properties USING btree (multi_asset_enabled);


--
-- Name: idx_erc4626_rebalancing; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_erc4626_rebalancing ON public.token_erc4626_properties USING btree (rebalancing_enabled);


--
-- Name: idx_erc4626_strategy_complexity; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_erc4626_strategy_complexity ON public.token_erc4626_properties USING btree (strategy_complexity);


--
-- Name: idx_erc4626_yield_optimization; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_erc4626_yield_optimization ON public.token_erc4626_properties USING btree (yield_optimization_enabled);


--
-- Name: idx_erc721_public_sale; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_erc721_public_sale ON public.token_erc721_properties USING btree (public_sale_enabled, public_sale_start_time);


--
-- Name: idx_erc721_revealable; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_erc721_revealable ON public.token_erc721_properties USING btree (revealable);


--
-- Name: idx_erc721_staking; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_erc721_staking ON public.token_erc721_properties USING btree (staking_enabled);


--
-- Name: idx_erc721_utility; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_erc721_utility ON public.token_erc721_properties USING btree (utility_enabled, utility_type);


--
-- Name: idx_erc721_whitelist_sale; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_erc721_whitelist_sale ON public.token_erc721_properties USING btree (whitelist_sale_enabled, whitelist_sale_start_time);


--
-- Name: idx_external_api_cache_expires; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_external_api_cache_expires ON public.external_api_cache USING btree (expires_at);


--
-- Name: idx_external_api_cache_key; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_external_api_cache_key ON public.external_api_cache USING btree (cache_key);


--
-- Name: idx_facet_registry_active; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_facet_registry_active ON public.facet_registry USING btree (is_active, audit_status);


--
-- Name: idx_facet_registry_address; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_facet_registry_address ON public.facet_registry USING btree (address);


--
-- Name: idx_facet_registry_selectors; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_facet_registry_selectors ON public.facet_registry USING gin (function_selectors);


--
-- Name: idx_faucet_requests_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_faucet_requests_created_at ON public.faucet_requests USING btree (created_at);


--
-- Name: idx_faucet_requests_network; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_faucet_requests_network ON public.faucet_requests USING btree (network);


--
-- Name: idx_faucet_requests_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_faucet_requests_status ON public.faucet_requests USING btree (status);


--
-- Name: idx_faucet_requests_wallet_address; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_faucet_requests_wallet_address ON public.faucet_requests USING btree (wallet_address);


--
-- Name: idx_fiat_quotes_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_fiat_quotes_created_at ON public.fiat_quotes USING btree (created_at DESC);


--
-- Name: idx_fiat_quotes_expires_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_fiat_quotes_expires_at ON public.fiat_quotes USING btree (expires_at);


--
-- Name: idx_fiat_quotes_provider; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_fiat_quotes_provider ON public.fiat_quotes USING btree (provider);


--
-- Name: idx_fiat_quotes_session_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_fiat_quotes_session_id ON public.fiat_quotes USING btree (session_id);


--
-- Name: idx_fiat_quotes_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_fiat_quotes_type ON public.fiat_quotes USING btree (type);


--
-- Name: idx_fiat_quotes_user_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_fiat_quotes_user_id ON public.fiat_quotes USING btree (user_id);


--
-- Name: idx_fiat_transactions_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_fiat_transactions_created_at ON public.fiat_transactions USING btree (created_at DESC);


--
-- Name: idx_fiat_transactions_provider; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_fiat_transactions_provider ON public.fiat_transactions USING btree (provider);


--
-- Name: idx_fiat_transactions_provider_transaction_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_fiat_transactions_provider_transaction_id ON public.fiat_transactions USING btree (provider_transaction_id);


--
-- Name: idx_fiat_transactions_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_fiat_transactions_status ON public.fiat_transactions USING btree (status);


--
-- Name: idx_fiat_transactions_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_fiat_transactions_type ON public.fiat_transactions USING btree (type);


--
-- Name: idx_fiat_transactions_user_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_fiat_transactions_user_id ON public.fiat_transactions USING btree (user_id);


--
-- Name: idx_fiat_transactions_wallet_address; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_fiat_transactions_wallet_address ON public.fiat_transactions USING btree (wallet_address);


--
-- Name: idx_fund_nav_data_fund_date; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_fund_nav_data_fund_date ON public.fund_nav_data USING btree (fund_id, date DESC);


--
-- Name: idx_fund_nav_data_validated; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_fund_nav_data_validated ON public.fund_nav_data USING btree (validated, date DESC);


--
-- Name: idx_fund_products_fund_ticker; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_fund_products_fund_ticker ON public.fund_products USING btree (fund_ticker);


--
-- Name: idx_fund_products_project_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_fund_products_project_id ON public.fund_products USING btree (project_id);


--
-- Name: idx_fund_products_project_id_unique; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX idx_fund_products_project_id_unique ON public.fund_products USING btree (project_id);


--
-- Name: idx_geographic_restrictions_effective; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_geographic_restrictions_effective ON public.token_geographic_restrictions USING btree (effective_date, expiry_date);


--
-- Name: idx_geographic_restrictions_token_country; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_geographic_restrictions_token_country ON public.token_geographic_restrictions USING btree (token_id, country_code);


--
-- Name: idx_geographic_restrictions_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_geographic_restrictions_type ON public.token_geographic_restrictions USING btree (restriction_type);


--
-- Name: idx_guardian_api_tests_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_guardian_api_tests_created_at ON public.guardian_api_tests USING btree (created_at);


--
-- Name: idx_guardian_api_tests_guardian_operation_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_guardian_api_tests_guardian_operation_id ON public.guardian_api_tests USING btree (guardian_operation_id);


--
-- Name: idx_guardian_api_tests_guardian_wallet_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_guardian_api_tests_guardian_wallet_id ON public.guardian_api_tests USING btree (guardian_wallet_id);


--
-- Name: idx_guardian_api_tests_test_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_guardian_api_tests_test_type ON public.guardian_api_tests USING btree (test_type);


--
-- Name: idx_guardian_operations_operation_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_guardian_operations_operation_id ON public.guardian_operations USING btree (operation_id);


--
-- Name: idx_guardian_operations_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_guardian_operations_status ON public.guardian_operations USING btree (operation_status);


--
-- Name: idx_guardian_operations_wallet_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_guardian_operations_wallet_id ON public.guardian_operations USING btree (guardian_wallet_id);


--
-- Name: idx_guardian_wallets_guardian_wallet_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_guardian_wallets_guardian_wallet_id ON public.guardian_wallets USING btree (guardian_wallet_id);


--
-- Name: idx_guardian_wallets_requested_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_guardian_wallets_requested_at ON public.guardian_wallets USING btree (requested_at);


--
-- Name: idx_guardian_wallets_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_guardian_wallets_status ON public.guardian_wallets USING btree (wallet_status);


--
-- Name: idx_health_checks_service; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_health_checks_service ON public.health_checks USING btree (service);


--
-- Name: idx_individual_documents_entity_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_individual_documents_entity_id ON public.individual_documents USING btree (entity_id);


--
-- Name: idx_individual_documents_entity_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_individual_documents_entity_type ON public.individual_documents USING btree (entity_type);


--
-- Name: idx_individual_documents_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_individual_documents_status ON public.individual_documents USING btree (status);


--
-- Name: idx_individual_documents_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_individual_documents_type ON public.individual_documents USING btree (document_type);


--
-- Name: idx_infrastructure_products_asset_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_infrastructure_products_asset_id ON public.infrastructure_products USING btree (asset_id);


--
-- Name: idx_infrastructure_products_project_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_infrastructure_products_project_id ON public.infrastructure_products USING btree (project_id);


--
-- Name: idx_infrastructure_products_project_id_unique; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX idx_infrastructure_products_project_id_unique ON public.infrastructure_products USING btree (project_id);


--
-- Name: idx_investor_approvals_approval_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_investor_approvals_approval_type ON public.investor_approvals USING btree (approval_type);


--
-- Name: idx_investor_approvals_investor_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_investor_approvals_investor_id ON public.investor_approvals USING btree (investor_id);


--
-- Name: idx_investor_approvals_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_investor_approvals_status ON public.investor_approvals USING btree (status);


--
-- Name: idx_investor_documents_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_investor_documents_created_at ON public.investor_documents USING btree (created_at);


--
-- Name: idx_investor_documents_document_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_investor_documents_document_type ON public.investor_documents USING btree (document_type);


--
-- Name: idx_investor_documents_investor_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_investor_documents_investor_id ON public.investor_documents USING btree (investor_id);


--
-- Name: idx_investor_documents_is_public; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_investor_documents_is_public ON public.investor_documents USING btree (is_public);


--
-- Name: idx_investor_documents_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_investor_documents_status ON public.investor_documents USING btree (status);


--
-- Name: idx_investor_groups_investors_group_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_investor_groups_investors_group_id ON public.investor_groups_investors USING btree (group_id);


--
-- Name: idx_investor_groups_investors_investor_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_investor_groups_investors_investor_id ON public.investor_groups_investors USING btree (investor_id);


--
-- Name: idx_investors_compliance_checked_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_investors_compliance_checked_at ON public.investors USING btree (compliance_checked_at);


--
-- Name: idx_investors_compliance_checked_by; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_investors_compliance_checked_by ON public.investors USING btree (compliance_checked_by);


--
-- Name: idx_investors_kyc_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_investors_kyc_status ON public.investors USING btree (kyc_status);


--
-- Name: idx_investors_last_compliance_check; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_investors_last_compliance_check ON public.investors USING btree (last_compliance_check);


--
-- Name: idx_investors_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_investors_type ON public.investors USING btree (type);


--
-- Name: idx_investors_user_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_investors_user_id ON public.investors USING btree (user_id);


--
-- Name: idx_invoice_payer_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_invoice_payer_id ON public.invoice USING btree (payer_id);


--
-- Name: idx_invoice_pool_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_invoice_pool_id ON public.invoice USING btree (pool_id);


--
-- Name: idx_invoice_provider_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_invoice_provider_id ON public.invoice USING btree (provider_id);


--
-- Name: idx_issuer_access_roles_issuer_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_issuer_access_roles_issuer_id ON public.issuer_access_roles USING btree (issuer_id);


--
-- Name: idx_issuer_access_roles_role; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_issuer_access_roles_role ON public.issuer_access_roles USING btree (role);


--
-- Name: idx_issuer_access_roles_user_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_issuer_access_roles_user_id ON public.issuer_access_roles USING btree (user_id);


--
-- Name: idx_issuer_documents_document_name; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_issuer_documents_document_name ON public.issuer_documents USING btree (document_name);


--
-- Name: idx_issuer_documents_document_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_issuer_documents_document_type ON public.issuer_documents USING btree (document_type);


--
-- Name: idx_issuer_documents_downloads; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_issuer_documents_downloads ON public.issuer_documents USING btree (id, status) WHERE (status = 'active'::public.document_status);


--
-- Name: idx_issuer_documents_is_public; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_issuer_documents_is_public ON public.issuer_documents USING btree (is_public);


--
-- Name: idx_issuer_documents_issuer_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_issuer_documents_issuer_id ON public.issuer_documents USING btree (issuer_id);


--
-- Name: idx_issuer_documents_lookup; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_issuer_documents_lookup ON public.issuer_documents USING btree (issuer_id, document_type, status, created_at DESC);


--
-- Name: idx_issuer_documents_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_issuer_documents_status ON public.issuer_documents USING btree (status);


--
-- Name: idx_issuer_documents_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_issuer_documents_type ON public.issuer_documents USING btree (document_type);


--
-- Name: idx_issuer_documents_unique_combo; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX idx_issuer_documents_unique_combo ON public.issuer_documents USING btree (issuer_id, document_type, document_name) WHERE (status = 'active'::public.document_status);


--
-- Name: idx_jurisdictions_region; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_jurisdictions_region ON public.geographic_jurisdictions USING btree (region, regulatory_regime);


--
-- Name: idx_jurisdictions_sanctions; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_jurisdictions_sanctions ON public.geographic_jurisdictions USING btree (is_ofac_sanctioned, is_eu_sanctioned, is_un_sanctioned);


--
-- Name: idx_lifecycle_events_product_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_lifecycle_events_product_id ON public.product_lifecycle_events USING btree (product_id);


--
-- Name: idx_market_data_snapshots_date; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_market_data_snapshots_date ON public.market_data_snapshots USING btree (snapshot_date);


--
-- Name: idx_monitoring_metrics_metric_name; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_monitoring_metrics_metric_name ON public.monitoring_metrics USING btree (metric_name);


--
-- Name: idx_monitoring_metrics_service_time; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_monitoring_metrics_service_time ON public.monitoring_metrics USING btree (service, recorded_at);


--
-- Name: idx_moonpay_asset_cache_contract_token; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_asset_cache_contract_token ON public.moonpay_asset_cache USING btree (contract_address, token_id);


--
-- Name: idx_moonpay_asset_cache_expires_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_asset_cache_expires_at ON public.moonpay_asset_cache USING btree (expires_at);


--
-- Name: idx_moonpay_compliance_alerts_alert_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_compliance_alerts_alert_id ON public.moonpay_compliance_alerts USING btree (alert_id);


--
-- Name: idx_moonpay_compliance_alerts_assigned_to; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_compliance_alerts_assigned_to ON public.moonpay_compliance_alerts USING btree (assigned_to);


--
-- Name: idx_moonpay_compliance_alerts_customer_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_compliance_alerts_customer_id ON public.moonpay_compliance_alerts USING btree (customer_id);


--
-- Name: idx_moonpay_compliance_alerts_details; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_compliance_alerts_details ON public.moonpay_compliance_alerts USING gin (details);


--
-- Name: idx_moonpay_compliance_alerts_entity; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_compliance_alerts_entity ON public.moonpay_compliance_alerts USING btree (entity_type, entity_id);


--
-- Name: idx_moonpay_compliance_alerts_risk_level; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_compliance_alerts_risk_level ON public.moonpay_compliance_alerts USING btree (risk_level);


--
-- Name: idx_moonpay_compliance_alerts_severity; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_compliance_alerts_severity ON public.moonpay_compliance_alerts USING btree (severity);


--
-- Name: idx_moonpay_compliance_alerts_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_compliance_alerts_status ON public.moonpay_compliance_alerts USING btree (status);


--
-- Name: idx_moonpay_compliance_alerts_transaction_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_compliance_alerts_transaction_id ON public.moonpay_compliance_alerts USING btree (transaction_id);


--
-- Name: idx_moonpay_compliance_alerts_triggered_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_compliance_alerts_triggered_at ON public.moonpay_compliance_alerts USING btree (triggered_at);


--
-- Name: idx_moonpay_compliance_alerts_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_compliance_alerts_type ON public.moonpay_compliance_alerts USING btree (alert_type);


--
-- Name: idx_moonpay_customers_email; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_customers_email ON public.moonpay_customers USING btree (email);


--
-- Name: idx_moonpay_customers_external_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_customers_external_id ON public.moonpay_customers USING btree (external_customer_id);


--
-- Name: idx_moonpay_customers_moonpay_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_customers_moonpay_id ON public.moonpay_customers USING btree (moonpay_customer_id);


--
-- Name: idx_moonpay_passes_contract_token; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_passes_contract_token ON public.moonpay_passes USING btree (contract_address, token_id);


--
-- Name: idx_moonpay_passes_owner; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_passes_owner ON public.moonpay_passes USING btree (owner_address);


--
-- Name: idx_moonpay_passes_project_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_passes_project_id ON public.moonpay_passes USING btree (project_id);


--
-- Name: idx_moonpay_passes_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_passes_status ON public.moonpay_passes USING btree (status);


--
-- Name: idx_moonpay_policy_logs_action_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_policy_logs_action_type ON public.moonpay_policy_logs USING btree (action_type);


--
-- Name: idx_moonpay_policy_logs_correlation_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_policy_logs_correlation_id ON public.moonpay_policy_logs USING btree (correlation_id);


--
-- Name: idx_moonpay_policy_logs_customer_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_policy_logs_customer_id ON public.moonpay_policy_logs USING btree (customer_id);


--
-- Name: idx_moonpay_policy_logs_entity; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_policy_logs_entity ON public.moonpay_policy_logs USING btree (entity_type, entity_id);


--
-- Name: idx_moonpay_policy_logs_executed_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_policy_logs_executed_at ON public.moonpay_policy_logs USING btree (executed_at);


--
-- Name: idx_moonpay_policy_logs_execution_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_policy_logs_execution_status ON public.moonpay_policy_logs USING btree (execution_status);


--
-- Name: idx_moonpay_policy_logs_log_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_policy_logs_log_id ON public.moonpay_policy_logs USING btree (log_id);


--
-- Name: idx_moonpay_policy_logs_metadata; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_policy_logs_metadata ON public.moonpay_policy_logs USING gin (metadata);


--
-- Name: idx_moonpay_policy_logs_policy_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_policy_logs_policy_id ON public.moonpay_policy_logs USING btree (policy_id);


--
-- Name: idx_moonpay_policy_logs_policy_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_policy_logs_policy_type ON public.moonpay_policy_logs USING btree (policy_type);


--
-- Name: idx_moonpay_policy_logs_requires_action; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_policy_logs_requires_action ON public.moonpay_policy_logs USING btree (requires_action);


--
-- Name: idx_moonpay_policy_logs_severity; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_policy_logs_severity ON public.moonpay_policy_logs USING btree (severity);


--
-- Name: idx_moonpay_policy_logs_transaction_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_policy_logs_transaction_id ON public.moonpay_policy_logs USING btree (transaction_id);


--
-- Name: idx_moonpay_swap_transactions_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_swap_transactions_created_at ON public.moonpay_swap_transactions USING btree (created_at);


--
-- Name: idx_moonpay_swap_transactions_external_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_swap_transactions_external_id ON public.moonpay_swap_transactions USING btree (external_transaction_id);


--
-- Name: idx_moonpay_swap_transactions_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_swap_transactions_status ON public.moonpay_swap_transactions USING btree (status);


--
-- Name: idx_moonpay_transactions_composite; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_transactions_composite ON public.moonpay_transactions USING btree (wallet_address, type, status, created_at);


--
-- Name: idx_moonpay_transactions_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_transactions_created_at ON public.moonpay_transactions USING btree (created_at);


--
-- Name: idx_moonpay_transactions_customer_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_transactions_customer_id ON public.moonpay_transactions USING btree (customer_id);


--
-- Name: idx_moonpay_transactions_external_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_transactions_external_id ON public.moonpay_transactions USING btree (external_transaction_id);


--
-- Name: idx_moonpay_transactions_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_transactions_status ON public.moonpay_transactions USING btree (status);


--
-- Name: idx_moonpay_transactions_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_transactions_type ON public.moonpay_transactions USING btree (type);


--
-- Name: idx_moonpay_transactions_wallet_address; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_transactions_wallet_address ON public.moonpay_transactions USING btree (wallet_address);


--
-- Name: idx_moonpay_webhook_config_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_webhook_config_created_at ON public.moonpay_webhook_config USING btree (created_at);


--
-- Name: idx_moonpay_webhook_config_environment; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_webhook_config_environment ON public.moonpay_webhook_config USING btree (environment);


--
-- Name: idx_moonpay_webhook_config_events; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_webhook_config_events ON public.moonpay_webhook_config USING gin (events);


--
-- Name: idx_moonpay_webhook_config_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_webhook_config_status ON public.moonpay_webhook_config USING btree (status);


--
-- Name: idx_moonpay_webhook_config_webhook_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_webhook_config_webhook_id ON public.moonpay_webhook_config USING btree (webhook_id);


--
-- Name: idx_moonpay_webhook_events_processed; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_webhook_events_processed ON public.moonpay_webhook_events USING btree (processed);


--
-- Name: idx_moonpay_webhook_events_received_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_webhook_events_received_at ON public.moonpay_webhook_events USING btree (received_at);


--
-- Name: idx_moonpay_webhook_events_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_moonpay_webhook_events_type ON public.moonpay_webhook_events USING btree (event_type);


--
-- Name: idx_nav_approvals_requested_by; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_nav_approvals_requested_by ON public.nav_approvals USING btree (requested_by);


--
-- Name: idx_nav_approvals_run_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_nav_approvals_run_status ON public.nav_approvals USING btree (run_id, status);


--
-- Name: idx_nav_approvals_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_nav_approvals_status ON public.nav_approvals USING btree (status);


--
-- Name: idx_nav_calc_runs_asset_date; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_nav_calc_runs_asset_date ON public.nav_calculation_runs USING btree (asset_id, valuation_date);


--
-- Name: idx_nav_calc_runs_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_nav_calc_runs_created_at ON public.nav_calculation_runs USING btree (created_at);


--
-- Name: idx_nav_calc_runs_project_date; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_nav_calc_runs_project_date ON public.nav_calculation_runs USING btree (project_id, valuation_date);


--
-- Name: idx_nav_calc_runs_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_nav_calc_runs_status ON public.nav_calculation_runs USING btree (status);


--
-- Name: idx_nav_fx_pair_asof; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_nav_fx_pair_asof ON public.nav_fx_rates USING btree (base_ccy, quote_ccy, as_of DESC);


--
-- Name: idx_nav_fx_rates_as_of; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_nav_fx_rates_as_of ON public.nav_fx_rates USING btree (as_of);


--
-- Name: idx_nav_fx_rates_currencies; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_nav_fx_rates_currencies ON public.nav_fx_rates USING btree (base_ccy, quote_ccy);


--
-- Name: idx_nav_history_asset; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_nav_history_asset ON public.nav_calculation_history USING btree (asset_id);


--
-- Name: idx_nav_history_run; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_nav_history_run ON public.nav_calculation_history USING btree (run_id);


--
-- Name: idx_nav_oracle_configs_active; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_nav_oracle_configs_active ON public.nav_oracle_configs USING btree (active);


--
-- Name: idx_nav_oracle_configs_fund_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_nav_oracle_configs_fund_id ON public.nav_oracle_configs USING btree (fund_id);


--
-- Name: idx_nav_price_cache_as_of; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_nav_price_cache_as_of ON public.nav_price_cache USING btree (as_of);


--
-- Name: idx_nav_price_cache_instrument; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_nav_price_cache_instrument ON public.nav_price_cache USING btree (instrument_key);


--
-- Name: idx_nav_redemptions_asset_date; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_nav_redemptions_asset_date ON public.nav_redemptions USING btree (asset_id, as_of_date);


--
-- Name: idx_nav_redemptions_product_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_nav_redemptions_product_type ON public.nav_redemptions USING btree (product_type);


--
-- Name: idx_nav_validation_rule_severity; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_nav_validation_rule_severity ON public.nav_validation_results USING btree (rule_code, severity);


--
-- Name: idx_nav_validation_run; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_nav_validation_run ON public.nav_validation_results USING btree (run_id);


--
-- Name: idx_notification_settings_project_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_notification_settings_project_id ON public.notification_settings USING btree (project_id);


--
-- Name: idx_notification_settings_user_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_notification_settings_user_id ON public.notification_settings USING btree (user_id);


--
-- Name: idx_onchain_claims_identity_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_onchain_claims_identity_id ON public.onchain_claims USING btree (identity_id);


--
-- Name: idx_onchain_claims_issuer_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_onchain_claims_issuer_id ON public.onchain_claims USING btree (issuer_id);


--
-- Name: idx_onchain_claims_topic; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_onchain_claims_topic ON public.onchain_claims USING btree (topic);


--
-- Name: idx_onchain_identities_identity_address; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_onchain_identities_identity_address ON public.onchain_identities USING btree (identity_address);


--
-- Name: idx_onchain_identities_user_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_onchain_identities_user_id ON public.onchain_identities USING btree (user_id);


--
-- Name: idx_onchain_verification_history_identity_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_onchain_verification_history_identity_id ON public.onchain_verification_history USING btree (identity_id);


--
-- Name: idx_organizations_entity_structure; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_organizations_entity_structure ON public.organizations USING btree (entity_structure);


--
-- Name: idx_organizations_governance_model; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_organizations_governance_model ON public.organizations USING btree (governance_model);


--
-- Name: idx_organizations_issuer_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_organizations_issuer_type ON public.organizations USING btree (issuer_type);


--
-- Name: idx_partition_balances_holder_address; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_partition_balances_holder_address ON public.token_erc1400_partition_balances USING btree (holder_address);


--
-- Name: idx_partition_balances_partition_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_partition_balances_partition_id ON public.token_erc1400_partition_balances USING btree (partition_id);


--
-- Name: idx_partition_operators_partition_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_partition_operators_partition_id ON public.token_erc1400_partition_operators USING btree (partition_id);


--
-- Name: idx_partition_transfers_from_address; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_partition_transfers_from_address ON public.token_erc1400_partition_transfers USING btree (from_address);


--
-- Name: idx_partition_transfers_partition_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_partition_transfers_partition_id ON public.token_erc1400_partition_transfers USING btree (partition_id);


--
-- Name: idx_partition_transfers_to_address; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_partition_transfers_to_address ON public.token_erc1400_partition_transfers USING btree (to_address);


--
-- Name: idx_paymaster_operations_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_paymaster_operations_created_at ON public.paymaster_operations USING btree (created_at);


--
-- Name: idx_paymaster_operations_paymaster; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_paymaster_operations_paymaster ON public.paymaster_operations USING btree (paymaster_address);


--
-- Name: idx_paymaster_operations_paymaster_created; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_paymaster_operations_paymaster_created ON public.paymaster_operations USING btree (paymaster_address, created_at);


--
-- Name: idx_paymaster_operations_sponsor; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_paymaster_operations_sponsor ON public.paymaster_operations USING btree (sponsor_address);


--
-- Name: idx_paymaster_operations_user_op; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_paymaster_operations_user_op ON public.paymaster_operations USING btree (user_operation_id);


--
-- Name: idx_policy_rule_approvers_rule_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_policy_rule_approvers_rule_id ON public.policy_rule_approvers USING btree (policy_rule_id);


--
-- Name: idx_policy_rule_approvers_user_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_policy_rule_approvers_user_id ON public.policy_rule_approvers USING btree (user_id);


--
-- Name: idx_policy_template_approvers_template_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_policy_template_approvers_template_id ON public.policy_template_approvers USING btree (template_id);


--
-- Name: idx_policy_templates_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_policy_templates_created_at ON public.policy_templates USING btree (created_at DESC);


--
-- Name: idx_policy_templates_name; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_policy_templates_name ON public.policy_templates USING btree (template_name);


--
-- Name: idx_policy_templates_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_policy_templates_status ON public.policy_templates USING btree (status);


--
-- Name: idx_policy_templates_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_policy_templates_type ON public.policy_templates USING btree (template_type);


--
-- Name: idx_private_debt_products_deal_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_private_debt_products_deal_id ON public.private_debt_products USING btree (deal_id);


--
-- Name: idx_private_debt_products_project_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_private_debt_products_project_id ON public.private_debt_products USING btree (project_id);


--
-- Name: idx_private_debt_products_project_id_unique; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX idx_private_debt_products_project_id_unique ON public.private_debt_products USING btree (project_id);


--
-- Name: idx_private_equity_products_fund_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_private_equity_products_fund_id ON public.private_equity_products USING btree (fund_id);


--
-- Name: idx_private_equity_products_project_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_private_equity_products_project_id ON public.private_equity_products USING btree (project_id);


--
-- Name: idx_private_equity_products_project_id_unique; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX idx_private_equity_products_project_id_unique ON public.private_equity_products USING btree (project_id);


--
-- Name: idx_product_lifecycle_events_event_date; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_product_lifecycle_events_event_date ON public.product_lifecycle_events USING btree (event_date);


--
-- Name: idx_product_lifecycle_events_event_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_product_lifecycle_events_event_type ON public.product_lifecycle_events USING btree (event_type);


--
-- Name: idx_product_lifecycle_events_product_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_product_lifecycle_events_product_id ON public.product_lifecycle_events USING btree (product_id);


--
-- Name: idx_product_lifecycle_events_product_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_product_lifecycle_events_product_type ON public.product_lifecycle_events USING btree (product_type);


--
-- Name: idx_production_asset_date; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_production_asset_date ON public.production_data USING btree (asset_id, production_date);


--
-- Name: idx_project_organization_assignments_active; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_project_organization_assignments_active ON public.project_organization_assignments USING btree (is_active) WHERE (is_active = true);


--
-- Name: idx_project_organization_assignments_organization_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_project_organization_assignments_organization_id ON public.project_organization_assignments USING btree (organization_id);


--
-- Name: idx_project_organization_assignments_project_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_project_organization_assignments_project_id ON public.project_organization_assignments USING btree (project_id);


--
-- Name: idx_project_organization_assignments_relationship_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_project_organization_assignments_relationship_type ON public.project_organization_assignments USING btree (relationship_type);


--
-- Name: idx_project_wallets_project_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_project_wallets_project_id ON public.project_wallets USING btree (project_id);


--
-- Name: idx_project_wallets_wallet_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_project_wallets_wallet_type ON public.project_wallets USING btree (wallet_type);


--
-- Name: idx_projects_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_projects_created_at ON public.projects USING btree (created_at);


--
-- Name: idx_projects_investment_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_projects_investment_status ON public.projects USING btree (investment_status);


--
-- Name: idx_projects_is_primary; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_projects_is_primary ON public.projects USING btree (is_primary) WHERE (is_primary = true);


--
-- Name: idx_projects_org_investment_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_projects_org_investment_status ON public.projects USING btree (organization_id, investment_status);


--
-- Name: idx_projects_organization_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_projects_organization_id ON public.projects USING btree (organization_id);


--
-- Name: idx_projects_project_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_projects_project_type ON public.projects USING btree (project_type);


--
-- Name: idx_projects_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_projects_status ON public.projects USING btree (status);


--
-- Name: idx_quantitative_strategies_project_id_unique; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX idx_quantitative_strategies_project_id_unique ON public.quantitative_strategies USING btree (project_id);


--
-- Name: idx_quantitative_strategies_strategy_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_quantitative_strategies_strategy_id ON public.quantitative_strategies USING btree (strategy_id);


--
-- Name: idx_ramp_network_config_environment; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_ramp_network_config_environment ON public.ramp_network_config USING btree (environment);


--
-- Name: idx_ramp_network_config_is_active; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_ramp_network_config_is_active ON public.ramp_network_config USING btree (is_active);


--
-- Name: idx_ramp_network_config_organization_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_ramp_network_config_organization_id ON public.ramp_network_config USING btree (organization_id);


--
-- Name: idx_ramp_supported_assets_chain; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_ramp_supported_assets_chain ON public.ramp_supported_assets USING btree (chain);


--
-- Name: idx_ramp_supported_assets_enabled; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_ramp_supported_assets_enabled ON public.ramp_supported_assets USING btree (enabled);


--
-- Name: idx_ramp_supported_assets_flow_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_ramp_supported_assets_flow_type ON public.ramp_supported_assets USING btree (flow_type);


--
-- Name: idx_ramp_supported_assets_last_updated; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_ramp_supported_assets_last_updated ON public.ramp_supported_assets USING btree (last_updated DESC);


--
-- Name: idx_ramp_supported_assets_symbol; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_ramp_supported_assets_symbol ON public.ramp_supported_assets USING btree (symbol);


--
-- Name: idx_ramp_transaction_events_event_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_ramp_transaction_events_event_type ON public.ramp_transaction_events USING btree (event_type);


--
-- Name: idx_ramp_transaction_events_session_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_ramp_transaction_events_session_id ON public.ramp_transaction_events USING btree (session_id);


--
-- Name: idx_ramp_transaction_events_timestamp; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_ramp_transaction_events_timestamp ON public.ramp_transaction_events USING btree ("timestamp" DESC);


--
-- Name: idx_ramp_transaction_events_transaction_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_ramp_transaction_events_transaction_id ON public.ramp_transaction_events USING btree (transaction_id);


--
-- Name: idx_ramp_webhook_events_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_ramp_webhook_events_created_at ON public.ramp_webhook_events USING btree (created_at DESC);


--
-- Name: idx_ramp_webhook_events_event_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_ramp_webhook_events_event_id ON public.ramp_webhook_events USING btree (event_id);


--
-- Name: idx_ramp_webhook_events_flow_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_ramp_webhook_events_flow_type ON public.ramp_webhook_events USING btree (flow_type);


--
-- Name: idx_ramp_webhook_events_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_ramp_webhook_events_type ON public.ramp_webhook_events USING btree (event_type);


--
-- Name: idx_real_estate_products_project_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_real_estate_products_project_id ON public.real_estate_products USING btree (project_id);


--
-- Name: idx_real_estate_products_project_id_unique; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX idx_real_estate_products_project_id_unique ON public.real_estate_products USING btree (project_id);


--
-- Name: idx_real_estate_products_property_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_real_estate_products_property_id ON public.real_estate_products USING btree (property_id);


--
-- Name: idx_rec_price_cache_date; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_rec_price_cache_date ON public.rec_price_cache USING btree (date);


--
-- Name: idx_rec_price_cache_market_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_rec_price_cache_market_type ON public.rec_price_cache USING btree (market_type);


--
-- Name: idx_rec_price_cache_region; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_rec_price_cache_region ON public.rec_price_cache USING btree (region);


--
-- Name: idx_redemption_analytics_window_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_analytics_window_id ON public.redemption_analytics USING btree (redemption_window_id);


--
-- Name: idx_redemption_approvers_approver_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_approvers_approver_id ON public.redemption_approvers USING btree (approver_id);


--
-- Name: idx_redemption_approvers_redemption_id_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_approvers_redemption_id_status ON public.redemption_approvers USING btree (redemption_id, status);


--
-- Name: idx_redemption_approvers_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_approvers_status ON public.redemption_approvers USING btree (status);


--
-- Name: idx_redemption_notifications_is_read; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_notifications_is_read ON public.redemption_notifications USING btree (is_read);


--
-- Name: idx_redemption_notifications_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_notifications_type ON public.redemption_notifications USING btree (notification_type);


--
-- Name: idx_redemption_notifications_user_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_notifications_user_id ON public.redemption_notifications USING btree (user_id);


--
-- Name: idx_redemption_requests_compliance_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_requests_compliance_status ON public.redemption_requests USING btree (compliance_status);


--
-- Name: idx_redemption_requests_priority; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_requests_priority ON public.redemption_requests USING btree (priority_level);


--
-- Name: idx_redemption_requests_requested_by; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_requests_requested_by ON public.redemption_requests USING btree (requested_by);


--
-- Name: idx_redemption_requests_validation; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_requests_validation ON public.redemption_requests USING btree (project_id, status, created_at);


--
-- Name: idx_redemption_requests_window_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_requests_window_id ON public.redemption_requests USING btree (redemption_window_id);


--
-- Name: idx_redemption_rules_capacity_analysis; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_rules_capacity_analysis ON public.redemption_rules USING btree (project_id, target_raise_amount, is_redemption_open);


--
-- Name: idx_redemption_rules_continuous; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_rules_continuous ON public.redemption_rules USING btree (allow_continuous_redemption) WHERE (allow_continuous_redemption = true);


--
-- Name: idx_redemption_rules_open_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_rules_open_status ON public.redemption_rules USING btree (is_redemption_open, open_after_date);


--
-- Name: idx_redemption_rules_product_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_rules_product_id ON public.redemption_rules USING btree (product_id) WHERE (product_id IS NOT NULL);


--
-- Name: idx_redemption_rules_product_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_rules_product_type ON public.redemption_rules USING btree (product_type);


--
-- Name: idx_redemption_rules_project_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_rules_project_id ON public.redemption_rules USING btree (project_id);


--
-- Name: idx_redemption_rules_project_product; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_rules_project_product ON public.redemption_rules USING btree (project_id, product_id);


--
-- Name: idx_redemption_rules_project_product_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_rules_project_product_id ON public.redemption_rules USING btree (project_id, product_id);


--
-- Name: idx_redemption_rules_project_product_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_rules_project_product_type ON public.redemption_rules USING btree (project_id, product_type);


--
-- Name: idx_redemption_rules_rule_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_rules_rule_id ON public.redemption_rules USING btree (rule_id);


--
-- Name: idx_redemption_rules_target_raise_amount; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_rules_target_raise_amount ON public.redemption_rules USING btree (target_raise_amount) WHERE (target_raise_amount IS NOT NULL);


--
-- Name: idx_redemption_settlements_burn_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_settlements_burn_status ON public.redemption_settlements USING btree (burn_status);


--
-- Name: idx_redemption_settlements_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_settlements_created_at ON public.redemption_settlements USING btree (created_at);


--
-- Name: idx_redemption_settlements_request_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_settlements_request_id ON public.redemption_settlements USING btree (redemption_request_id);


--
-- Name: idx_redemption_settlements_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_settlements_status ON public.redemption_settlements USING btree (status);


--
-- Name: idx_redemption_settlements_transfer_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_settlements_transfer_status ON public.redemption_settlements USING btree (transfer_status);


--
-- Name: idx_redemption_templates_is_active; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_templates_is_active ON public.redemption_window_templates USING btree (is_active);


--
-- Name: idx_redemption_templates_project_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_templates_project_id ON public.redemption_window_templates USING btree (project_id);


--
-- Name: idx_redemption_windows_auto_process; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_windows_auto_process ON public.redemption_windows USING btree (auto_process);


--
-- Name: idx_redemption_windows_dates; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_windows_dates ON public.redemption_windows USING btree (start_date, end_date);


--
-- Name: idx_redemption_windows_enable_pro_rata; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_windows_enable_pro_rata ON public.redemption_windows USING btree (enable_pro_rata_distribution);


--
-- Name: idx_redemption_windows_is_active; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_windows_is_active ON public.redemption_windows USING btree (is_active);


--
-- Name: idx_redemption_windows_lockup_days; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_windows_lockup_days ON public.redemption_windows USING btree (lockup_days) WHERE (submission_date_mode = 'relative'::public.submission_date_mode_enum);


--
-- Name: idx_redemption_windows_processing_mode; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_windows_processing_mode ON public.redemption_windows USING btree (processing_date_mode);


--
-- Name: idx_redemption_windows_processing_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_windows_processing_status ON public.redemption_windows USING btree (processing_status);


--
-- Name: idx_redemption_windows_project_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_windows_project_id ON public.redemption_windows USING btree (project_id);


--
-- Name: idx_redemption_windows_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_windows_status ON public.redemption_windows USING btree (status);


--
-- Name: idx_redemption_windows_submission_mode; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_windows_submission_mode ON public.redemption_windows USING btree (submission_date_mode);


--
-- Name: idx_redemption_windows_submission_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_redemption_windows_submission_status ON public.redemption_windows USING btree (submission_status);


--
-- Name: idx_regulatory_exemptions_country; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_regulatory_exemptions_country ON public.regulatory_exemptions USING btree (country);


--
-- Name: idx_regulatory_exemptions_exemption_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_regulatory_exemptions_exemption_type ON public.regulatory_exemptions USING btree (exemption_type);


--
-- Name: idx_regulatory_exemptions_region; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_regulatory_exemptions_region ON public.regulatory_exemptions USING btree (region);


--
-- Name: idx_renewable_energy_credits_incentive_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_renewable_energy_credits_incentive_id ON public.renewable_energy_credits USING btree (incentive_id);


--
-- Name: idx_renewable_energy_credits_project_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_renewable_energy_credits_project_id ON public.renewable_energy_credits USING btree (project_id);


--
-- Name: idx_renewable_energy_credits_receivable_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_renewable_energy_credits_receivable_id ON public.renewable_energy_credits USING btree (receivable_id) WHERE (receivable_id IS NOT NULL);


--
-- Name: INDEX idx_renewable_energy_credits_receivable_id; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON INDEX public.idx_renewable_energy_credits_receivable_id IS 'Performance index for RECs linked to climate receivables';


--
-- Name: idx_restriction_validation_logs_validated_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_restriction_validation_logs_validated_at ON public.restriction_validation_logs USING btree (validated_at DESC);


--
-- Name: idx_restriction_validation_logs_wallet_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_restriction_validation_logs_wallet_id ON public.restriction_validation_logs USING btree (wallet_id);


--
-- Name: idx_ripple_payments_composite; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_ripple_payments_composite ON public.ripple_payments USING btree (from_account, status, created_at);


--
-- Name: idx_ripple_payments_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_ripple_payments_created_at ON public.ripple_payments USING btree (created_at);


--
-- Name: idx_ripple_payments_from_account; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_ripple_payments_from_account ON public.ripple_payments USING btree (from_account);


--
-- Name: idx_ripple_payments_hash; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_ripple_payments_hash ON public.ripple_payments USING btree (hash);


--
-- Name: idx_ripple_payments_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_ripple_payments_status ON public.ripple_payments USING btree (status);


--
-- Name: idx_ripple_payments_to_account; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_ripple_payments_to_account ON public.ripple_payments USING btree (to_account);


--
-- Name: idx_risk_assessments_user_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_risk_assessments_user_id ON public.risk_assessments USING btree (user_id);


--
-- Name: idx_risk_assessments_wallet_address; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_risk_assessments_wallet_address ON public.risk_assessments USING btree (wallet_address);


--
-- Name: idx_rules_is_template; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_rules_is_template ON public.rules USING btree (is_template);


--
-- Name: idx_rules_rule_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_rules_rule_id ON public.rules USING btree (rule_id);


--
-- Name: idx_security_audit_logs_user_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_security_audit_logs_user_id ON public.security_audit_logs USING btree (user_id);


--
-- Name: idx_security_audit_logs_wallet_address; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_security_audit_logs_wallet_address ON public.security_audit_logs USING btree (wallet_address);


--
-- Name: idx_security_events_event_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_security_events_event_type ON public.security_events USING btree (event_type);


--
-- Name: idx_security_events_severity; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_security_events_severity ON public.security_events USING btree (severity);


--
-- Name: idx_security_events_timestamp; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_security_events_timestamp ON public.security_events USING btree ("timestamp" DESC);


--
-- Name: idx_security_events_user_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_security_events_user_id ON public.security_events USING btree (user_id);


--
-- Name: idx_security_events_wallet_address; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_security_events_wallet_address ON public.security_events USING btree (wallet_address);


--
-- Name: idx_security_events_wallet_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_security_events_wallet_id ON public.security_events USING btree (wallet_id);


--
-- Name: idx_settlement_metrics_date; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_settlement_metrics_date ON public.settlement_metrics USING btree (date DESC);


--
-- Name: idx_sidebar_configs_active; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_sidebar_configs_active ON public.sidebar_configurations USING btree (is_active) WHERE (is_active = true);


--
-- Name: idx_sidebar_configs_default; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_sidebar_configs_default ON public.sidebar_configurations USING btree (is_default) WHERE (is_default = true);


--
-- Name: idx_sidebar_configs_org; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_sidebar_configs_org ON public.sidebar_configurations USING btree (organization_id);


--
-- Name: idx_sidebar_configs_profile_enums; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_sidebar_configs_profile_enums ON public.sidebar_configurations USING gin (target_profile_type_enums);


--
-- Name: idx_sidebar_configs_role_ids; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_sidebar_configs_role_ids ON public.sidebar_configurations USING gin (target_role_ids);


--
-- Name: idx_sidebar_items_active; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_sidebar_items_active ON public.sidebar_items USING btree (is_active) WHERE (is_active = true);


--
-- Name: idx_sidebar_items_order; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_sidebar_items_order ON public.sidebar_items USING btree (display_order);


--
-- Name: idx_sidebar_items_org; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_sidebar_items_org ON public.sidebar_items USING btree (organization_id);


--
-- Name: idx_sidebar_items_permissions; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_sidebar_items_permissions ON public.sidebar_items USING gin (required_permissions);


--
-- Name: idx_sidebar_items_roles; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_sidebar_items_roles ON public.sidebar_items USING gin (required_roles);


--
-- Name: idx_sidebar_items_section; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_sidebar_items_section ON public.sidebar_items USING btree (section_id);


--
-- Name: idx_sidebar_sections_active; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_sidebar_sections_active ON public.sidebar_sections USING btree (is_active) WHERE (is_active = true);


--
-- Name: idx_sidebar_sections_order; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_sidebar_sections_order ON public.sidebar_sections USING btree (display_order);


--
-- Name: idx_sidebar_sections_org; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_sidebar_sections_org ON public.sidebar_sections USING btree (organization_id);


--
-- Name: idx_signature_migration_approvals_migration_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_signature_migration_approvals_migration_id ON public.signature_migration_approvals USING btree (migration_id);


--
-- Name: idx_signature_migrations_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_signature_migrations_created_at ON public.signature_migrations USING btree (created_at DESC);


--
-- Name: idx_signature_migrations_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_signature_migrations_status ON public.signature_migrations USING btree (status);


--
-- Name: idx_signature_migrations_wallet_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_signature_migrations_wallet_id ON public.signature_migrations USING btree (wallet_id);


--
-- Name: idx_smart_contract_wallets_proxy; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_smart_contract_wallets_proxy ON public.smart_contract_wallets USING btree (diamond_proxy_address);


--
-- Name: idx_smart_contract_wallets_wallet_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_smart_contract_wallets_wallet_id ON public.smart_contract_wallets USING btree (wallet_id);


--
-- Name: idx_stablecoin_collateral_coin; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_stablecoin_collateral_coin ON public.stablecoin_collateral USING btree (stablecoin_id);


--
-- Name: idx_stablecoin_collateral_stablecoin_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_stablecoin_collateral_stablecoin_id ON public.stablecoin_collateral USING btree (stablecoin_id);


--
-- Name: idx_stablecoin_collateral_value; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_stablecoin_collateral_value ON public.stablecoin_collateral USING btree (stablecoin_id, collateral_value_usd DESC);


--
-- Name: idx_stablecoin_products_asset_symbol; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_stablecoin_products_asset_symbol ON public.stablecoin_products USING btree (asset_symbol);


--
-- Name: idx_stablecoin_products_project_id_unique; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX idx_stablecoin_products_project_id_unique ON public.stablecoin_products USING btree (project_id);


--
-- Name: idx_stripe_conversion_transactions_payment_intent; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_stripe_conversion_transactions_payment_intent ON public.stripe_conversion_transactions USING btree (stripe_payment_intent_id);


--
-- Name: idx_stripe_conversion_transactions_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_stripe_conversion_transactions_status ON public.stripe_conversion_transactions USING btree (status);


--
-- Name: idx_stripe_conversion_transactions_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_stripe_conversion_transactions_type ON public.stripe_conversion_transactions USING btree (conversion_type);


--
-- Name: idx_stripe_conversion_transactions_user_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_stripe_conversion_transactions_user_id ON public.stripe_conversion_transactions USING btree (user_id);


--
-- Name: idx_stripe_stablecoin_accounts_account_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_stripe_stablecoin_accounts_account_id ON public.stripe_stablecoin_accounts USING btree (account_id);


--
-- Name: idx_stripe_stablecoin_accounts_user_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_stripe_stablecoin_accounts_user_id ON public.stripe_stablecoin_accounts USING btree (user_id);


--
-- Name: idx_stripe_webhook_events_processed; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_stripe_webhook_events_processed ON public.stripe_webhook_events USING btree (processed);


--
-- Name: idx_stripe_webhook_events_stripe_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_stripe_webhook_events_stripe_id ON public.stripe_webhook_events USING btree (stripe_event_id);


--
-- Name: idx_stripe_webhook_events_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_stripe_webhook_events_type ON public.stripe_webhook_events USING btree (event_type);


--
-- Name: idx_structured_products_maturity_date; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_structured_products_maturity_date ON public.structured_products USING btree (maturity_date);


--
-- Name: idx_structured_products_project_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_structured_products_project_id ON public.structured_products USING btree (project_id);


--
-- Name: idx_structured_products_project_id_unique; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX idx_structured_products_project_id_unique ON public.structured_products USING btree (project_id);


--
-- Name: idx_structured_products_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_structured_products_status ON public.structured_products USING btree (status);


--
-- Name: idx_system_processes_process_name; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_system_processes_process_name ON public.system_processes USING btree (process_name);


--
-- Name: idx_system_processes_start_time; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_system_processes_start_time ON public.system_processes USING btree (start_time DESC);


--
-- Name: idx_system_processes_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_system_processes_status ON public.system_processes USING btree (status);


--
-- Name: idx_token_allocations_token_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_token_allocations_token_id ON public.token_allocations USING btree (token_id);


--
-- Name: idx_token_climate_properties_pool; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_token_climate_properties_pool ON public.token_climate_properties USING btree (pool_id);


--
-- Name: idx_token_deployment_history_project_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_token_deployment_history_project_id ON public.token_deployment_history USING btree (project_id);


--
-- Name: idx_token_deployment_history_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_token_deployment_history_status ON public.token_deployment_history USING btree (status);


--
-- Name: idx_token_deployment_history_timestamp; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_token_deployment_history_timestamp ON public.token_deployment_history USING btree ("timestamp");


--
-- Name: idx_token_deployment_history_token_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_token_deployment_history_token_id ON public.token_deployment_history USING btree (token_id);


--
-- Name: idx_token_deployments_token_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_token_deployments_token_id ON public.token_deployments USING btree (token_id);


--
-- Name: idx_token_erc1155_types_fungibility_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_token_erc1155_types_fungibility_type ON public.token_erc1155_types USING btree (fungibility_type);


--
-- Name: idx_token_erc1155_types_token_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_token_erc1155_types_token_id ON public.token_erc1155_types USING btree (token_id);


--
-- Name: idx_token_erc1155_whitelist_enabled; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_token_erc1155_whitelist_enabled ON public.token_erc1155_properties USING gin (((whitelist_config -> 'enabled'::text))) WHERE ((whitelist_config -> 'enabled'::text) = 'true'::jsonb);


--
-- Name: idx_token_erc1400_controllers_token_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_token_erc1400_controllers_token_id ON public.token_erc1400_controllers USING btree (token_id);


--
-- Name: idx_token_erc1400_documents_token_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_token_erc1400_documents_token_id ON public.token_erc1400_documents USING btree (token_id);


--
-- Name: idx_token_erc1400_partitions_token_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_token_erc1400_partitions_token_id ON public.token_erc1400_partitions USING btree (token_id);


--
-- Name: idx_token_erc1400_whitelist_enabled; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_token_erc1400_whitelist_enabled ON public.token_erc1400_properties USING btree (investor_whitelist_enabled) WHERE (investor_whitelist_enabled = true);


--
-- Name: idx_token_erc20_whitelist_enabled; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_token_erc20_whitelist_enabled ON public.token_erc20_properties USING gin (((whitelist_config -> 'enabled'::text))) WHERE ((whitelist_config -> 'enabled'::text) = 'true'::jsonb);


--
-- Name: idx_token_erc3525_allocations_token_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_token_erc3525_allocations_token_id ON public.token_erc3525_allocations USING btree (token_id);


--
-- Name: idx_token_erc3525_properties_token_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_token_erc3525_properties_token_id ON public.token_erc3525_properties USING btree (token_id);


--
-- Name: idx_token_erc3525_slots_token_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_token_erc3525_slots_token_id ON public.token_erc3525_slots USING btree (token_id);


--
-- Name: idx_token_erc3525_whitelist_enabled; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_token_erc3525_whitelist_enabled ON public.token_erc3525_properties USING gin (((whitelist_config -> 'enabled'::text))) WHERE ((whitelist_config -> 'enabled'::text) = 'true'::jsonb);


--
-- Name: idx_token_erc4626_whitelist_enabled; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_token_erc4626_whitelist_enabled ON public.token_erc4626_properties USING gin (((whitelist_config -> 'enabled'::text))) WHERE ((whitelist_config -> 'enabled'::text) = 'true'::jsonb);


--
-- Name: idx_token_erc721_attributes_token_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_token_erc721_attributes_token_id ON public.token_erc721_attributes USING btree (token_id);


--
-- Name: idx_token_erc721_whitelist_enabled; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_token_erc721_whitelist_enabled ON public.token_erc721_properties USING gin (((whitelist_config -> 'enabled'::text))) WHERE ((whitelist_config -> 'enabled'::text) = 'true'::jsonb);


--
-- Name: idx_token_events_event_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_token_events_event_type ON public.token_events USING btree (event_type);


--
-- Name: idx_token_events_is_read; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_token_events_is_read ON public.token_events USING btree (is_read);


--
-- Name: idx_token_events_timestamp; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_token_events_timestamp ON public.token_events USING btree ("timestamp");


--
-- Name: idx_token_events_token_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_token_events_token_id ON public.token_events USING btree (token_id);


--
-- Name: idx_token_operations_token_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_token_operations_token_id ON public.token_operations USING btree (token_id);


--
-- Name: idx_token_versions_token_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_token_versions_token_id ON public.token_versions USING btree (token_id);


--
-- Name: idx_token_versions_token_id_version; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_token_versions_token_id_version ON public.token_versions USING btree (token_id, version);


--
-- Name: idx_token_whitelists_active; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_token_whitelists_active ON public.token_whitelists USING btree (is_active) WHERE (is_active = true);


--
-- Name: idx_token_whitelists_blockchain; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_token_whitelists_blockchain ON public.token_whitelists USING btree (blockchain);


--
-- Name: idx_token_whitelists_token_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_token_whitelists_token_id ON public.token_whitelists USING btree (token_id);


--
-- Name: idx_token_whitelists_wallet_address; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_token_whitelists_wallet_address ON public.token_whitelists USING btree (wallet_address);


--
-- Name: idx_tokens_blockchain; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_tokens_blockchain ON public.tokens USING btree (blockchain);


--
-- Name: idx_tokens_deployment_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_tokens_deployment_status ON public.tokens USING btree (deployment_status);


--
-- Name: idx_tokens_project_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_tokens_project_id ON public.tokens USING btree (project_id);


--
-- Name: idx_tokens_standard; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_tokens_standard ON public.tokens USING btree (standard);


--
-- Name: idx_tokens_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_tokens_status ON public.tokens USING btree (status);


--
-- Name: idx_transaction_events_actor; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_transaction_events_actor ON public.transaction_events USING btree (actor);


--
-- Name: idx_transaction_events_event_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_transaction_events_event_type ON public.transaction_events USING btree (event_type);


--
-- Name: idx_transaction_events_request_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_transaction_events_request_id ON public.transaction_events USING btree (request_id);


--
-- Name: idx_transaction_events_timestamp; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_transaction_events_timestamp ON public.transaction_events USING btree ("timestamp");


--
-- Name: idx_transaction_notifications_read; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_transaction_notifications_read ON public.transaction_notifications USING btree (read);


--
-- Name: idx_transaction_notifications_transaction; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_transaction_notifications_transaction ON public.transaction_notifications USING btree (transaction_id);


--
-- Name: idx_transaction_notifications_wallet; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_transaction_notifications_wallet ON public.transaction_notifications USING btree (wallet_address);


--
-- Name: idx_transactions_blockchain; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_transactions_blockchain ON public.transactions USING btree (blockchain);


--
-- Name: idx_transactions_composite; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_transactions_composite ON public.transactions USING btree (from_address, status, created_at);


--
-- Name: idx_transactions_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_transactions_created_at ON public.transactions USING btree (created_at);


--
-- Name: idx_transactions_from_address; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_transactions_from_address ON public.transactions USING btree (from_address);


--
-- Name: idx_transactions_hash; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_transactions_hash ON public.transactions USING btree (transaction_hash);


--
-- Name: idx_transactions_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_transactions_status ON public.transactions USING btree (status);


--
-- Name: idx_transactions_to_address; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_transactions_to_address ON public.transactions USING btree (to_address);


--
-- Name: idx_user_mfa_settings_user_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_user_mfa_settings_user_id ON public.user_mfa_settings USING btree (user_id);


--
-- Name: idx_user_operations_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_user_operations_created_at ON public.user_operations USING btree (created_at);


--
-- Name: idx_user_operations_hash; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_user_operations_hash ON public.user_operations USING btree (user_op_hash);


--
-- Name: idx_user_operations_sender; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_user_operations_sender ON public.user_operations USING btree (sender_address);


--
-- Name: idx_user_operations_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_user_operations_status ON public.user_operations USING btree (status);


--
-- Name: idx_user_operations_status_created; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_user_operations_status_created ON public.user_operations USING btree (status, created_at);


--
-- Name: idx_user_operations_transaction_hash; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_user_operations_transaction_hash ON public.user_operations USING btree (transaction_hash);


--
-- Name: idx_user_operations_wallet_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_user_operations_wallet_id ON public.user_operations USING btree (wallet_id);


--
-- Name: idx_user_operations_wallet_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_user_operations_wallet_status ON public.user_operations USING btree (wallet_id, status);


--
-- Name: idx_user_organization_roles_org_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_user_organization_roles_org_id ON public.user_organization_roles USING btree (organization_id);


--
-- Name: idx_user_organization_roles_role_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_user_organization_roles_role_id ON public.user_organization_roles USING btree (role_id);


--
-- Name: idx_user_organization_roles_user_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_user_organization_roles_user_id ON public.user_organization_roles USING btree (user_id);


--
-- Name: idx_user_sidebar_prefs_org; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_user_sidebar_prefs_org ON public.user_sidebar_preferences USING btree (organization_id);


--
-- Name: idx_user_sidebar_prefs_user; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_user_sidebar_prefs_user ON public.user_sidebar_preferences USING btree (user_id);


--
-- Name: idx_wallet_facets_address; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_wallet_facets_address ON public.wallet_facets USING btree (facet_address);


--
-- Name: idx_wallet_facets_selectors; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_wallet_facets_selectors ON public.wallet_facets USING gin (function_selectors);


--
-- Name: idx_wallet_facets_wallet_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_wallet_facets_wallet_id ON public.wallet_facets USING btree (wallet_id);


--
-- Name: idx_wallet_guardians_address; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_wallet_guardians_address ON public.wallet_guardians USING btree (guardian_address);


--
-- Name: idx_wallet_guardians_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_wallet_guardians_status ON public.wallet_guardians USING btree (status);


--
-- Name: idx_wallet_guardians_wallet_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_wallet_guardians_wallet_id ON public.wallet_guardians USING btree (wallet_id);


--
-- Name: idx_wallet_locks_active; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_wallet_locks_active ON public.wallet_locks USING btree (wallet_id, is_locked) WHERE (is_locked = true);


--
-- Name: idx_wallet_locks_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_wallet_locks_created_at ON public.wallet_locks USING btree (created_at DESC);


--
-- Name: idx_wallet_locks_unlock_time; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_wallet_locks_unlock_time ON public.wallet_locks USING btree (unlock_time) WHERE ((unlock_time IS NOT NULL) AND (is_locked = true));


--
-- Name: idx_wallet_locks_wallet_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_wallet_locks_wallet_id ON public.wallet_locks USING btree (wallet_id);


--
-- Name: idx_wallet_restriction_rules_active; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_wallet_restriction_rules_active ON public.wallet_restriction_rules USING btree (wallet_id, is_active) WHERE (is_active = true);


--
-- Name: idx_wallet_restriction_rules_priority; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_wallet_restriction_rules_priority ON public.wallet_restriction_rules USING btree (wallet_id, priority);


--
-- Name: idx_wallet_restriction_rules_wallet_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_wallet_restriction_rules_wallet_id ON public.wallet_restriction_rules USING btree (wallet_id);


--
-- Name: idx_wallet_signatories_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_wallet_signatories_status ON public.wallet_signatories USING btree (status);


--
-- Name: idx_wallet_signatories_wallet_address; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_wallet_signatories_wallet_address ON public.wallet_signatories USING btree (wallet_address);


--
-- Name: idx_wallet_transaction_drafts_expires_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_wallet_transaction_drafts_expires_at ON public.wallet_transaction_drafts USING btree (expires_at);


--
-- Name: idx_wallet_transaction_drafts_transaction_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_wallet_transaction_drafts_transaction_id ON public.wallet_transaction_drafts USING btree (transaction_id);


--
-- Name: idx_wallet_transaction_drafts_wallet_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_wallet_transaction_drafts_wallet_id ON public.wallet_transaction_drafts USING btree (wallet_id);


--
-- Name: idx_wallet_transactions_from_address; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_wallet_transactions_from_address ON public.wallet_transactions USING btree (from_address);


--
-- Name: idx_wallet_transactions_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_wallet_transactions_status ON public.wallet_transactions USING btree (status);


--
-- Name: idx_wallet_transactions_tx_hash; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_wallet_transactions_tx_hash ON public.wallet_transactions USING btree (tx_hash);


--
-- Name: idx_wallets_investor_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_wallets_investor_id ON public.wallets USING btree (investor_id);


--
-- Name: idx_wallets_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_wallets_status ON public.wallets USING btree (status);


--
-- Name: idx_wallets_wallet_address; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_wallets_wallet_address ON public.wallets USING btree (wallet_address);


--
-- Name: idx_wallets_wallet_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_wallets_wallet_type ON public.wallets USING btree (wallet_type);


--
-- Name: idx_weather_cache_expires; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_weather_cache_expires ON public.weather_cache USING btree (expires_at);


--
-- Name: idx_weather_cache_key; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_weather_cache_key ON public.weather_cache USING btree (cache_key);


--
-- Name: idx_weather_cache_location; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_weather_cache_location ON public.weather_cache USING btree (location_lat, location_lon);


--
-- Name: idx_webauthn_challenges_challenge; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_webauthn_challenges_challenge ON public.webauthn_challenges USING btree (challenge);


--
-- Name: idx_webauthn_challenges_expires; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_webauthn_challenges_expires ON public.webauthn_challenges USING btree (expires_at);


--
-- Name: idx_webauthn_challenges_wallet_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_webauthn_challenges_wallet_id ON public.webauthn_challenges USING btree (wallet_id);


--
-- Name: idx_webauthn_credentials_credential_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_webauthn_credentials_credential_id ON public.webauthn_credentials USING btree (credential_id);


--
-- Name: idx_webauthn_credentials_unique; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX idx_webauthn_credentials_unique ON public.webauthn_credentials USING btree (wallet_id, credential_id);


--
-- Name: idx_webauthn_credentials_wallet_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_webauthn_credentials_wallet_id ON public.webauthn_credentials USING btree (wallet_id);


--
-- Name: idx_whitelist_entries_address; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_whitelist_entries_address ON public.whitelist_entries USING btree (address);


--
-- Name: idx_whitelist_entries_organization_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_whitelist_entries_organization_id ON public.whitelist_entries USING btree (organization_id);


--
-- Name: multi_sig_transactions_blockchain_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX multi_sig_transactions_blockchain_idx ON public.multi_sig_transactions USING btree (blockchain);


--
-- Name: multi_sig_wallets_blockchain_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX multi_sig_wallets_blockchain_idx ON public.multi_sig_wallets USING btree (blockchain);


--
-- Name: profiles_profile_type_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX profiles_profile_type_idx ON public.profiles USING btree (profile_type);


--
-- Name: profiles_user_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX profiles_user_id_idx ON public.profiles USING btree (user_id);


--
-- Name: redemption_rules_standard_unique; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX redemption_rules_standard_unique ON public.redemption_rules USING btree (project_id) WHERE (redemption_type = 'standard'::text);


--
-- Name: users_auth_id_idx; Type: INDEX; Schema: public; Owner: -
--

CREATE UNIQUE INDEX users_auth_id_idx ON public.users USING btree (auth_id);


--
-- Name: distribution_redemptions after_distribution_redemption_insert; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER after_distribution_redemption_insert AFTER INSERT ON public.distribution_redemptions FOR EACH ROW EXECUTE FUNCTION public.update_distribution_remaining_amount();


--
-- Name: token_allocations after_token_allocation_distributed; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER after_token_allocation_distributed AFTER UPDATE ON public.token_allocations FOR EACH ROW WHEN (((old.distributed = false) AND (new.distributed = true))) EXECUTE FUNCTION public.handle_token_distribution();


--
-- Name: token_allocations before_token_allocation_delete; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER before_token_allocation_delete BEFORE DELETE ON public.token_allocations FOR EACH ROW EXECUTE FUNCTION public.handle_token_allocation_deletion();


--
-- Name: tokens create_token_version_on_insert; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER create_token_version_on_insert AFTER INSERT ON public.tokens FOR EACH ROW EXECUTE FUNCTION public.create_token_version();


--
-- Name: tokens create_token_version_on_update; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER create_token_version_on_update AFTER UPDATE ON public.tokens FOR EACH ROW WHEN ((old.* IS DISTINCT FROM new.*)) EXECUTE FUNCTION public.create_token_version();


--
-- Name: documents document_expiry_trigger; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER document_expiry_trigger AFTER INSERT OR UPDATE OF expiry_date ON public.documents FOR EACH ROW EXECUTE FUNCTION public.check_document_expiry();


--
-- Name: documents document_version_trigger; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER document_version_trigger BEFORE UPDATE ON public.documents FOR EACH ROW EXECUTE FUNCTION public.create_document_version();


--
-- Name: audit_logs extract_metadata_values_trigger; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER extract_metadata_values_trigger BEFORE INSERT OR UPDATE ON public.audit_logs FOR EACH ROW EXECUTE FUNCTION public.extract_severity_from_metadata();


--
-- Name: users on_public_user_upsert; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER on_public_user_upsert AFTER INSERT OR UPDATE OF auth_id ON public.users FOR EACH ROW WHEN ((new.auth_id IS NOT NULL)) EXECUTE FUNCTION public.sync_user_to_profile();


--
-- Name: issuer_documents prevent_issuer_document_duplicates; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER prevent_issuer_document_duplicates BEFORE INSERT OR UPDATE ON public.issuer_documents FOR EACH ROW EXECUTE FUNCTION public.check_issuer_document_duplicates();


--
-- Name: redemption_approvers redemption_approvers_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER redemption_approvers_updated_at BEFORE UPDATE ON public.redemption_approvers FOR EACH ROW EXECUTE FUNCTION public.update_redemption_approvers_updated_at();


--
-- Name: rules rule_approval_trigger; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER rule_approval_trigger BEFORE INSERT OR UPDATE ON public.rules FOR EACH ROW EXECUTE FUNCTION public.add_rule_to_approval_queue();


--
-- Name: rules rules_update_timestamp; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER rules_update_timestamp BEFORE UPDATE ON public.rules FOR EACH ROW EXECUTE FUNCTION public.update_rules_updated_at();


--
-- Name: climate_incentives set_climate_incentives_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_climate_incentives_updated_at BEFORE UPDATE ON public.climate_incentives FOR EACH ROW EXECUTE FUNCTION public.trigger_set_updated_at();


--
-- Name: investor_documents set_investor_documents_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_investor_documents_updated_at BEFORE UPDATE ON public.investor_documents FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: renewable_energy_credits set_renewable_energy_credits_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_renewable_energy_credits_updated_at BEFORE UPDATE ON public.renewable_energy_credits FOR EACH ROW EXECUTE FUNCTION public.trigger_set_updated_at();


--
-- Name: distributions set_standard_on_distribution_insert; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_standard_on_distribution_insert BEFORE INSERT ON public.distributions FOR EACH ROW EXECUTE FUNCTION public.set_distribution_standard();


--
-- Name: distributions set_standard_on_distribution_update; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_standard_on_distribution_update BEFORE UPDATE ON public.distributions FOR EACH ROW WHEN (((old.standard IS DISTINCT FROM new.standard) AND (new.standard IS NULL))) EXECUTE FUNCTION public.set_distribution_standard();


--
-- Name: token_allocations set_standard_on_token_allocation_insert; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_standard_on_token_allocation_insert BEFORE INSERT ON public.token_allocations FOR EACH ROW EXECUTE FUNCTION public.set_token_allocation_standard();


--
-- Name: token_allocations set_standard_on_token_allocation_update; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_standard_on_token_allocation_update BEFORE UPDATE ON public.token_allocations FOR EACH ROW WHEN (((old.token_id IS DISTINCT FROM new.token_id) OR (new.standard IS NULL))) EXECUTE FUNCTION public.set_token_allocation_standard();


--
-- Name: token_whitelists set_token_whitelists_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_token_whitelists_updated_at BEFORE UPDATE ON public.token_whitelists FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: alerts set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.alerts FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: approval_config_approvers set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.approval_config_approvers FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: approval_configs set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.approval_configs FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: compliance_reports set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.compliance_reports FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: dfns_activity_logs set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.dfns_activity_logs FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: dfns_api_requests set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.dfns_api_requests FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: dfns_applications set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.dfns_applications FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: dfns_broadcast_transactions set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.dfns_broadcast_transactions FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: dfns_credentials set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.dfns_credentials FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: dfns_exchange_accounts set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.dfns_exchange_accounts FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: dfns_exchange_balances set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.dfns_exchange_balances FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: dfns_exchange_integrations set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.dfns_exchange_integrations FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: dfns_fee_sponsors set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.dfns_fee_sponsors FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: dfns_fiat_provider_configs set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.dfns_fiat_provider_configs FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: dfns_fiat_transactions set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.dfns_fiat_transactions FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: dfns_permission_assignments set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.dfns_permission_assignments FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: dfns_permissions set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.dfns_permissions FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: dfns_personal_access_tokens set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.dfns_personal_access_tokens FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: dfns_policies set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.dfns_policies FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: dfns_policy_approvals set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.dfns_policy_approvals FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: dfns_service_accounts set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.dfns_service_accounts FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: dfns_signatures set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.dfns_signatures FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: dfns_signing_keys set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.dfns_signing_keys FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: dfns_sponsored_fees set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.dfns_sponsored_fees FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: dfns_staking_integrations set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.dfns_staking_integrations FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: dfns_sync_status set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.dfns_sync_status FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: dfns_transaction_history set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.dfns_transaction_history FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: dfns_transfers set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.dfns_transfers FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: dfns_users set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.dfns_users FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: dfns_validators set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.dfns_validators FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: dfns_wallet_balances set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.dfns_wallet_balances FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: dfns_wallet_nfts set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.dfns_wallet_nfts FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: dfns_wallets set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.dfns_wallets FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: dfns_webhook_deliveries set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.dfns_webhook_deliveries FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: dfns_webhooks set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.dfns_webhooks FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: document_workflows set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.document_workflows FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: fiat_transactions set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.fiat_transactions FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: health_checks set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.health_checks FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: investor_groups set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.investor_groups FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: investors set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.investors FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: issuer_access_roles set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.issuer_access_roles FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: issuer_documents set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.issuer_documents FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: moonpay_compliance_alerts set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.moonpay_compliance_alerts FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: moonpay_customers set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.moonpay_customers FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: moonpay_passes set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.moonpay_passes FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: moonpay_policies set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.moonpay_policies FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: moonpay_policy_logs set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.moonpay_policy_logs FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: moonpay_projects set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.moonpay_projects FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: moonpay_swap_transactions set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.moonpay_swap_transactions FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: moonpay_transactions set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.moonpay_transactions FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: moonpay_webhook_config set_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at BEFORE UPDATE ON public.moonpay_webhook_config FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();


--
-- Name: security_events set_updated_at_timestamp; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER set_updated_at_timestamp BEFORE UPDATE ON public.security_events FOR EACH ROW EXECUTE FUNCTION public.update_security_events_updated_at();


--
-- Name: policy_templates template_approval_trigger; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER template_approval_trigger BEFORE INSERT OR UPDATE ON public.policy_templates FOR EACH ROW EXECUTE FUNCTION public.add_template_to_approval_queue();


--
-- Name: tokens token_insert_trigger; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER token_insert_trigger AFTER INSERT ON public.tokens FOR EACH ROW EXECUTE FUNCTION public.insert_token_properties();


--
-- Name: product_lifecycle_events tr_prevent_duplicate_lifecycle_events; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER tr_prevent_duplicate_lifecycle_events BEFORE INSERT ON public.product_lifecycle_events FOR EACH ROW EXECUTE FUNCTION public.prevent_duplicate_lifecycle_events();


--
-- Name: redemption_requests tr_redemption_requests_update_statistics; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER tr_redemption_requests_update_statistics AFTER INSERT OR DELETE OR UPDATE ON public.redemption_requests FOR EACH ROW EXECUTE FUNCTION public.trigger_update_redemption_statistics();


--
-- Name: redemption_windows tr_redemption_windows_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER tr_redemption_windows_updated_at BEFORE UPDATE ON public.redemption_windows FOR EACH ROW EXECUTE FUNCTION public.update_redemption_window_timestamp();


--
-- Name: asset_nav_data trigger_calculate_asset_nav_change; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_calculate_asset_nav_change BEFORE INSERT OR UPDATE ON public.asset_nav_data FOR EACH ROW EXECUTE FUNCTION public.calculate_nav_change();


--
-- Name: fund_nav_data trigger_calculate_nav_change; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_calculate_nav_change BEFORE INSERT OR UPDATE ON public.fund_nav_data FOR EACH ROW EXECUTE FUNCTION public.calculate_nav_change();


--
-- Name: consensus_settings trigger_consensus_settings_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_consensus_settings_updated_at BEFORE UPDATE ON public.consensus_settings FOR EACH ROW EXECUTE FUNCTION public.update_consensus_settings_updated_at();


--
-- Name: facet_registry trigger_facet_registry_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_facet_registry_updated_at BEFORE UPDATE ON public.facet_registry FOR EACH ROW EXECUTE FUNCTION public.update_smart_contract_wallet_updated_at();


--
-- Name: redemption_rules trigger_set_redemption_product_type_on_insert; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_set_redemption_product_type_on_insert BEFORE INSERT ON public.redemption_rules FOR EACH ROW EXECUTE FUNCTION public.set_redemption_product_type_on_insert();


--
-- Name: smart_contract_wallets trigger_smart_contract_wallets_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_smart_contract_wallets_updated_at BEFORE UPDATE ON public.smart_contract_wallets FOR EACH ROW EXECUTE FUNCTION public.update_smart_contract_wallet_updated_at();


--
-- Name: asset_backed_products trigger_sync_redemption_on_asset_backed_products_change; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_sync_redemption_on_asset_backed_products_change AFTER INSERT OR DELETE ON public.asset_backed_products FOR EACH ROW EXECUTE FUNCTION public.sync_redemption_rules_on_product_change();


--
-- Name: bond_products trigger_sync_redemption_on_bond_products_change; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_sync_redemption_on_bond_products_change AFTER INSERT OR DELETE ON public.bond_products FOR EACH ROW EXECUTE FUNCTION public.sync_redemption_rules_on_product_change();


--
-- Name: collectibles_products trigger_sync_redemption_on_collectibles_products_change; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_sync_redemption_on_collectibles_products_change AFTER INSERT OR DELETE ON public.collectibles_products FOR EACH ROW EXECUTE FUNCTION public.sync_redemption_rules_on_product_change();


--
-- Name: commodities_products trigger_sync_redemption_on_commodities_products_change; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_sync_redemption_on_commodities_products_change AFTER INSERT OR DELETE ON public.commodities_products FOR EACH ROW EXECUTE FUNCTION public.sync_redemption_rules_on_product_change();


--
-- Name: digital_tokenized_fund_products trigger_sync_redemption_on_digital_tokenized_fund_products_chan; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_sync_redemption_on_digital_tokenized_fund_products_chan AFTER INSERT OR DELETE ON public.digital_tokenized_fund_products FOR EACH ROW EXECUTE FUNCTION public.sync_redemption_rules_on_product_change();


--
-- Name: energy_products trigger_sync_redemption_on_energy_products_change; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_sync_redemption_on_energy_products_change AFTER INSERT OR DELETE ON public.energy_products FOR EACH ROW EXECUTE FUNCTION public.sync_redemption_rules_on_product_change();


--
-- Name: equity_products trigger_sync_redemption_on_equity_products_change; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_sync_redemption_on_equity_products_change AFTER INSERT OR DELETE ON public.equity_products FOR EACH ROW EXECUTE FUNCTION public.sync_redemption_rules_on_product_change();


--
-- Name: fund_products trigger_sync_redemption_on_fund_products_change; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_sync_redemption_on_fund_products_change AFTER INSERT OR DELETE ON public.fund_products FOR EACH ROW EXECUTE FUNCTION public.sync_redemption_rules_on_product_change();


--
-- Name: infrastructure_products trigger_sync_redemption_on_infrastructure_products_change; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_sync_redemption_on_infrastructure_products_change AFTER INSERT OR DELETE ON public.infrastructure_products FOR EACH ROW EXECUTE FUNCTION public.sync_redemption_rules_on_product_change();


--
-- Name: private_debt_products trigger_sync_redemption_on_private_debt_products_change; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_sync_redemption_on_private_debt_products_change AFTER INSERT OR DELETE ON public.private_debt_products FOR EACH ROW EXECUTE FUNCTION public.sync_redemption_rules_on_product_change();


--
-- Name: private_equity_products trigger_sync_redemption_on_private_equity_products_change; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_sync_redemption_on_private_equity_products_change AFTER INSERT OR DELETE ON public.private_equity_products FOR EACH ROW EXECUTE FUNCTION public.sync_redemption_rules_on_product_change();


--
-- Name: quantitative_investment_strategies_products trigger_sync_redemption_on_quantitative_investment_strategies_p; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_sync_redemption_on_quantitative_investment_strategies_p AFTER INSERT OR DELETE ON public.quantitative_investment_strategies_products FOR EACH ROW EXECUTE FUNCTION public.sync_redemption_rules_on_product_change();


--
-- Name: real_estate_products trigger_sync_redemption_on_real_estate_products_change; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_sync_redemption_on_real_estate_products_change AFTER INSERT OR DELETE ON public.real_estate_products FOR EACH ROW EXECUTE FUNCTION public.sync_redemption_rules_on_product_change();


--
-- Name: stablecoin_products trigger_sync_redemption_on_stablecoin_products_change; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_sync_redemption_on_stablecoin_products_change AFTER INSERT OR DELETE ON public.stablecoin_products FOR EACH ROW EXECUTE FUNCTION public.sync_redemption_rules_on_product_change();


--
-- Name: structured_products trigger_sync_redemption_on_structured_products_change; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_sync_redemption_on_structured_products_change AFTER INSERT OR DELETE ON public.structured_products FOR EACH ROW EXECUTE FUNCTION public.sync_redemption_rules_on_product_change();


--
-- Name: projects trigger_sync_redemption_product_type; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_sync_redemption_product_type AFTER UPDATE OF project_type, organization_id ON public.projects FOR EACH ROW EXECUTE FUNCTION public.sync_redemption_product_type();


--
-- Name: asset_backed_products trigger_sync_target_raise_on_asset_backed_products_change; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_sync_target_raise_on_asset_backed_products_change AFTER UPDATE ON public.asset_backed_products FOR EACH ROW EXECUTE FUNCTION public.sync_redemption_target_raise_on_product_change();


--
-- Name: bond_products trigger_sync_target_raise_on_bond_products_change; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_sync_target_raise_on_bond_products_change AFTER UPDATE ON public.bond_products FOR EACH ROW EXECUTE FUNCTION public.sync_redemption_target_raise_on_product_change();


--
-- Name: collectibles_products trigger_sync_target_raise_on_collectibles_products_change; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_sync_target_raise_on_collectibles_products_change AFTER UPDATE ON public.collectibles_products FOR EACH ROW EXECUTE FUNCTION public.sync_redemption_target_raise_on_product_change();


--
-- Name: commodities_products trigger_sync_target_raise_on_commodities_products_change; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_sync_target_raise_on_commodities_products_change AFTER UPDATE ON public.commodities_products FOR EACH ROW EXECUTE FUNCTION public.sync_redemption_target_raise_on_product_change();


--
-- Name: digital_tokenized_fund_products trigger_sync_target_raise_on_digital_tokenized_fund_products_ch; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_sync_target_raise_on_digital_tokenized_fund_products_ch AFTER UPDATE ON public.digital_tokenized_fund_products FOR EACH ROW EXECUTE FUNCTION public.sync_redemption_target_raise_on_product_change();


--
-- Name: energy_products trigger_sync_target_raise_on_energy_products_change; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_sync_target_raise_on_energy_products_change AFTER UPDATE ON public.energy_products FOR EACH ROW EXECUTE FUNCTION public.sync_redemption_target_raise_on_product_change();


--
-- Name: equity_products trigger_sync_target_raise_on_equity_products_change; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_sync_target_raise_on_equity_products_change AFTER UPDATE ON public.equity_products FOR EACH ROW EXECUTE FUNCTION public.sync_redemption_target_raise_on_product_change();


--
-- Name: fund_products trigger_sync_target_raise_on_fund_products_change; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_sync_target_raise_on_fund_products_change AFTER UPDATE ON public.fund_products FOR EACH ROW EXECUTE FUNCTION public.sync_redemption_target_raise_on_product_change();


--
-- Name: infrastructure_products trigger_sync_target_raise_on_infrastructure_products_change; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_sync_target_raise_on_infrastructure_products_change AFTER UPDATE ON public.infrastructure_products FOR EACH ROW EXECUTE FUNCTION public.sync_redemption_target_raise_on_product_change();


--
-- Name: private_debt_products trigger_sync_target_raise_on_private_debt_products_change; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_sync_target_raise_on_private_debt_products_change AFTER UPDATE ON public.private_debt_products FOR EACH ROW EXECUTE FUNCTION public.sync_redemption_target_raise_on_product_change();


--
-- Name: private_equity_products trigger_sync_target_raise_on_private_equity_products_change; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_sync_target_raise_on_private_equity_products_change AFTER UPDATE ON public.private_equity_products FOR EACH ROW EXECUTE FUNCTION public.sync_redemption_target_raise_on_product_change();


--
-- Name: quantitative_investment_strategies_products trigger_sync_target_raise_on_quantitative_investment_strategies; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_sync_target_raise_on_quantitative_investment_strategies AFTER UPDATE ON public.quantitative_investment_strategies_products FOR EACH ROW EXECUTE FUNCTION public.sync_redemption_target_raise_on_product_change();


--
-- Name: real_estate_products trigger_sync_target_raise_on_real_estate_products_change; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_sync_target_raise_on_real_estate_products_change AFTER UPDATE ON public.real_estate_products FOR EACH ROW EXECUTE FUNCTION public.sync_redemption_target_raise_on_product_change();


--
-- Name: stablecoin_products trigger_sync_target_raise_on_stablecoin_products_change; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_sync_target_raise_on_stablecoin_products_change AFTER UPDATE ON public.stablecoin_products FOR EACH ROW EXECUTE FUNCTION public.sync_redemption_target_raise_on_product_change();


--
-- Name: structured_products trigger_sync_target_raise_on_structured_products_change; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_sync_target_raise_on_structured_products_change AFTER UPDATE ON public.structured_products FOR EACH ROW EXECUTE FUNCTION public.sync_redemption_target_raise_on_product_change();


--
-- Name: climate_market_data_cache trigger_update_cache_access; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_update_cache_access BEFORE UPDATE ON public.climate_market_data_cache FOR EACH ROW EXECUTE FUNCTION public.update_cache_access();


--
-- Name: climate_risk_calculations trigger_update_climate_risk_calculations_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_update_climate_risk_calculations_updated_at BEFORE UPDATE ON public.climate_risk_calculations FOR EACH ROW EXECUTE FUNCTION public.update_climate_risk_calculations_updated_at();


--
-- Name: investor_groups_investors trigger_update_group_member_count_delete_new; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_update_group_member_count_delete_new AFTER DELETE ON public.investor_groups_investors FOR EACH ROW EXECUTE FUNCTION public.update_group_member_count();


--
-- Name: investor_groups_investors trigger_update_group_member_count_insert; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_update_group_member_count_insert AFTER INSERT ON public.investor_groups_investors FOR EACH ROW EXECUTE FUNCTION public.update_group_member_count();


--
-- Name: investor_groups_investors trigger_update_group_member_count_insert_new; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_update_group_member_count_insert_new AFTER INSERT ON public.investor_groups_investors FOR EACH ROW EXECUTE FUNCTION public.update_group_member_count();


--
-- Name: asset_holdings trigger_update_oracle_prices; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_update_oracle_prices BEFORE INSERT OR UPDATE ON public.asset_holdings FOR EACH ROW EXECUTE FUNCTION public.update_oracle_prices();


--
-- Name: redemption_settlements trigger_update_settlement_status; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_update_settlement_status BEFORE UPDATE ON public.redemption_settlements FOR EACH ROW EXECUTE FUNCTION public.update_settlement_status();


--
-- Name: asset_holdings trigger_update_total_assets; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_update_total_assets AFTER INSERT OR DELETE OR UPDATE ON public.asset_holdings FOR EACH ROW EXECUTE FUNCTION public.update_total_assets();


--
-- Name: user_operations trigger_user_operations_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_user_operations_updated_at BEFORE UPDATE ON public.user_operations FOR EACH ROW EXECUTE FUNCTION public.update_smart_contract_wallet_updated_at();


--
-- Name: wallet_facets trigger_wallet_facets_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_wallet_facets_updated_at BEFORE UPDATE ON public.wallet_facets FOR EACH ROW EXECUTE FUNCTION public.update_smart_contract_wallet_updated_at();


--
-- Name: wallet_guardians trigger_wallet_guardians_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_wallet_guardians_updated_at BEFORE UPDATE ON public.wallet_guardians FOR EACH ROW EXECUTE FUNCTION public.update_smart_contract_wallet_updated_at();


--
-- Name: wallet_transaction_drafts trigger_wallet_transaction_drafts_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_wallet_transaction_drafts_updated_at BEFORE UPDATE ON public.wallet_transaction_drafts FOR EACH ROW EXECUTE FUNCTION public.update_wallet_transaction_drafts_updated_at();


--
-- Name: webauthn_credentials trigger_webauthn_credentials_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trigger_webauthn_credentials_updated_at BEFORE UPDATE ON public.webauthn_credentials FOR EACH ROW EXECUTE FUNCTION public.update_smart_contract_wallet_updated_at();


--
-- Name: asset_backed_products update_asset_backed_products_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_asset_backed_products_updated_at BEFORE UPDATE ON public.asset_backed_products FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: bond_products update_bond_products_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_bond_products_updated_at BEFORE UPDATE ON public.bond_products FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: climate_pool_energy_assets update_climate_pool_energy_assets_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_climate_pool_energy_assets_updated_at BEFORE UPDATE ON public.climate_pool_energy_assets FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: climate_pool_incentives update_climate_pool_incentives_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_climate_pool_incentives_updated_at BEFORE UPDATE ON public.climate_pool_incentives FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: climate_pool_recs update_climate_pool_recs_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_climate_pool_recs_updated_at BEFORE UPDATE ON public.climate_pool_recs FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: climate_user_data_sources update_climate_user_data_sources_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_climate_user_data_sources_updated_at BEFORE UPDATE ON public.climate_user_data_sources FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: collectibles_products update_collectibles_products_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_collectibles_products_updated_at BEFORE UPDATE ON public.collectibles_products FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: commodities_products update_commodities_products_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_commodities_products_updated_at BEFORE UPDATE ON public.commodities_products FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: dfns_policies update_dfns_policies_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_dfns_policies_updated_at BEFORE UPDATE ON public.dfns_policies FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: dfns_policy_approval_groups update_dfns_policy_approval_groups_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_dfns_policy_approval_groups_updated_at BEFORE UPDATE ON public.dfns_policy_approval_groups FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: dfns_policy_approvals update_dfns_policy_approvals_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_dfns_policy_approvals_updated_at BEFORE UPDATE ON public.dfns_policy_approvals FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: dfns_policy_change_requests update_dfns_policy_change_requests_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_dfns_policy_change_requests_updated_at BEFORE UPDATE ON public.dfns_policy_change_requests FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: digital_tokenised_funds update_digital_tokenised_funds_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_digital_tokenised_funds_updated_at BEFORE UPDATE ON public.digital_tokenised_funds FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: energy_assets update_energy_assets_updated_at_trigger; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_energy_assets_updated_at_trigger BEFORE UPDATE ON public.energy_assets FOR EACH ROW EXECUTE FUNCTION public.update_energy_assets_updated_at();


--
-- Name: energy_products update_energy_products_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_energy_products_updated_at BEFORE UPDATE ON public.energy_products FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: equity_products update_equity_products_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_equity_products_updated_at BEFORE UPDATE ON public.equity_products FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: fund_products update_fund_products_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_fund_products_updated_at BEFORE UPDATE ON public.fund_products FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: individual_documents update_individual_documents_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_individual_documents_updated_at BEFORE UPDATE ON public.individual_documents FOR EACH ROW EXECUTE FUNCTION public.update_individual_documents_updated_at();


--
-- Name: infrastructure_products update_infrastructure_products_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_infrastructure_products_updated_at BEFORE UPDATE ON public.infrastructure_products FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: investor_approvals update_investor_approvals_timestamp; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_investor_approvals_timestamp BEFORE UPDATE ON public.investor_approvals FOR EACH ROW EXECUTE FUNCTION public.update_timestamp();


--
-- Name: investors update_investors_timestamp; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_investors_timestamp BEFORE UPDATE ON public.investors FOR EACH ROW EXECUTE FUNCTION public.update_timestamp();


--
-- Name: onboarding_restrictions update_onboarding_restrictions_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_onboarding_restrictions_updated_at BEFORE UPDATE ON public.onboarding_restrictions FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: onchain_identities update_onchain_identities_timestamp; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_onchain_identities_timestamp BEFORE UPDATE ON public.onchain_identities FOR EACH ROW EXECUTE FUNCTION public.update_timestamp();


--
-- Name: onchain_issuers update_onchain_issuers_timestamp; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_onchain_issuers_timestamp BEFORE UPDATE ON public.onchain_issuers FOR EACH ROW EXECUTE FUNCTION public.update_timestamp();


--
-- Name: organizations update_organizations_timestamp; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_organizations_timestamp BEFORE UPDATE ON public.organizations FOR EACH ROW EXECUTE FUNCTION public.update_timestamp();


--
-- Name: private_debt_products update_private_debt_products_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_private_debt_products_updated_at BEFORE UPDATE ON public.private_debt_products FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: private_equity_products update_private_equity_products_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_private_equity_products_updated_at BEFORE UPDATE ON public.private_equity_products FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: product_lifecycle_events update_product_lifecycle_events_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_product_lifecycle_events_updated_at BEFORE UPDATE ON public.product_lifecycle_events FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: profiles update_profiles_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_profiles_updated_at BEFORE UPDATE ON public.profiles FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: project_organization_assignments update_project_organization_assignments_timestamp; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_project_organization_assignments_timestamp BEFORE UPDATE ON public.project_organization_assignments FOR EACH ROW EXECUTE FUNCTION public.update_project_organization_assignments_timestamp();


--
-- Name: project_wallets update_project_wallets_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_project_wallets_updated_at BEFORE UPDATE ON public.project_wallets FOR EACH ROW EXECUTE FUNCTION public.update_modified_column();


--
-- Name: quantitative_strategies update_quantitative_strategies_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_quantitative_strategies_updated_at BEFORE UPDATE ON public.quantitative_strategies FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: ramp_network_config update_ramp_network_config_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_ramp_network_config_updated_at BEFORE UPDATE ON public.ramp_network_config FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: ramp_webhook_events update_ramp_webhook_events_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_ramp_webhook_events_updated_at BEFORE UPDATE ON public.ramp_webhook_events FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: real_estate_products update_real_estate_products_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_real_estate_products_updated_at BEFORE UPDATE ON public.real_estate_products FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: regulatory_exemptions update_regulatory_exemptions_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_regulatory_exemptions_updated_at BEFORE UPDATE ON public.regulatory_exemptions FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: wallet_restriction_rules update_restriction_rules_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_restriction_rules_updated_at BEFORE UPDATE ON public.wallet_restriction_rules FOR EACH ROW EXECUTE FUNCTION public.update_restriction_rules_updated_at();


--
-- Name: ripple_payments update_ripple_payments_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_ripple_payments_updated_at BEFORE UPDATE ON public.ripple_payments FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: risk_assessments update_risk_assessments_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_risk_assessments_updated_at BEFORE UPDATE ON public.risk_assessments FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: sidebar_configurations update_sidebar_configurations_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_sidebar_configurations_updated_at BEFORE UPDATE ON public.sidebar_configurations FOR EACH ROW EXECUTE FUNCTION public.update_sidebar_configurations_updated_at();


--
-- Name: sidebar_items update_sidebar_items_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_sidebar_items_updated_at BEFORE UPDATE ON public.sidebar_items FOR EACH ROW EXECUTE FUNCTION public.update_sidebar_items_updated_at();


--
-- Name: sidebar_sections update_sidebar_sections_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_sidebar_sections_updated_at BEFORE UPDATE ON public.sidebar_sections FOR EACH ROW EXECUTE FUNCTION public.update_sidebar_sections_updated_at();


--
-- Name: signature_migrations update_signature_migrations_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_signature_migrations_updated_at BEFORE UPDATE ON public.signature_migrations FOR EACH ROW EXECUTE FUNCTION public.update_signature_migrations_updated_at();


--
-- Name: stablecoin_collateral update_stablecoin_collateral_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_stablecoin_collateral_updated_at BEFORE UPDATE ON public.stablecoin_collateral FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: stablecoin_products update_stablecoin_products_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_stablecoin_products_updated_at BEFORE UPDATE ON public.stablecoin_products FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: stripe_conversion_transactions update_stripe_conversion_transactions_updated_at_trigger; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_stripe_conversion_transactions_updated_at_trigger BEFORE UPDATE ON public.stripe_conversion_transactions FOR EACH ROW EXECUTE FUNCTION public.update_stripe_conversion_transactions_updated_at();


--
-- Name: stripe_stablecoin_accounts update_stripe_stablecoin_accounts_updated_at_trigger; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_stripe_stablecoin_accounts_updated_at_trigger BEFORE UPDATE ON public.stripe_stablecoin_accounts FOR EACH ROW EXECUTE FUNCTION public.update_stripe_stablecoin_accounts_updated_at();


--
-- Name: structured_products update_structured_products_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_structured_products_updated_at BEFORE UPDATE ON public.structured_products FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: token_erc1155_properties update_token_erc1155_properties_timestamp; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_token_erc1155_properties_timestamp BEFORE UPDATE ON public.token_erc1155_properties FOR EACH ROW EXECUTE FUNCTION public.update_timestamp_column();


--
-- Name: token_erc1400_properties update_token_erc1400_properties_timestamp; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_token_erc1400_properties_timestamp BEFORE UPDATE ON public.token_erc1400_properties FOR EACH ROW EXECUTE FUNCTION public.update_timestamp_column();


--
-- Name: token_erc20_properties update_token_erc20_properties_timestamp; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_token_erc20_properties_timestamp BEFORE UPDATE ON public.token_erc20_properties FOR EACH ROW EXECUTE FUNCTION public.update_timestamp_column();


--
-- Name: token_erc3525_properties update_token_erc3525_properties_timestamp; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_token_erc3525_properties_timestamp BEFORE UPDATE ON public.token_erc3525_properties FOR EACH ROW EXECUTE FUNCTION public.update_timestamp_column();


--
-- Name: token_erc4626_properties update_token_erc4626_properties_timestamp; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_token_erc4626_properties_timestamp BEFORE UPDATE ON public.token_erc4626_properties FOR EACH ROW EXECUTE FUNCTION public.update_timestamp_column();


--
-- Name: token_erc721_properties update_token_erc721_properties_timestamp; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_token_erc721_properties_timestamp BEFORE UPDATE ON public.token_erc721_properties FOR EACH ROW EXECUTE FUNCTION public.update_timestamp_column();


--
-- Name: token_templates update_token_templates_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_token_templates_updated_at BEFORE UPDATE ON public.token_templates FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: tokens update_tokens_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_tokens_updated_at BEFORE UPDATE ON public.tokens FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: transactions update_transactions_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_transactions_updated_at BEFORE UPDATE ON public.transactions FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: user_sidebar_preferences update_user_sidebar_preferences_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_user_sidebar_preferences_updated_at BEFORE UPDATE ON public.user_sidebar_preferences FOR EACH ROW EXECUTE FUNCTION public.update_user_sidebar_preferences_updated_at();


--
-- Name: wallet_locks update_wallet_locks_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_wallet_locks_updated_at BEFORE UPDATE ON public.wallet_locks FOR EACH ROW EXECUTE FUNCTION public.update_wallet_locks_updated_at();


--
-- Name: wallet_transactions update_wallet_transactions_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_wallet_transactions_updated_at BEFORE UPDATE ON public.wallet_transactions FOR EACH ROW EXECUTE FUNCTION public.update_modified_column();


--
-- Name: tokens validate_token_data_trigger; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER validate_token_data_trigger BEFORE INSERT OR UPDATE ON public.tokens FOR EACH ROW EXECUTE FUNCTION public.validate_token_data();


--
-- Name: multi_sig_wallets validate_wallet_address_trigger; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER validate_wallet_address_trigger BEFORE INSERT OR UPDATE ON public.multi_sig_wallets FOR EACH ROW EXECUTE FUNCTION public.validate_wallet_address();


--
-- Name: wallet_signatories wallet_signatories_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER wallet_signatories_updated_at BEFORE UPDATE ON public.wallet_signatories FOR EACH ROW EXECUTE FUNCTION public.update_wallet_signatories_updated_at();


--
-- Name: whitelist_entries whitelist_entries_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER whitelist_entries_updated_at BEFORE UPDATE ON public.whitelist_entries FOR EACH ROW EXECUTE FUNCTION public.update_whitelist_entries_updated_at();


--
-- Name: approval_config_approvers approval_config_approvers_approval_config_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.approval_config_approvers
    ADD CONSTRAINT approval_config_approvers_approval_config_id_fkey FOREIGN KEY (approval_config_id) REFERENCES public.approval_configs(id) ON DELETE CASCADE;


--
-- Name: approval_config_approvers approval_config_approvers_approver_role_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.approval_config_approvers
    ADD CONSTRAINT approval_config_approvers_approver_role_id_fkey FOREIGN KEY (approver_role_id) REFERENCES public.roles(id) ON DELETE CASCADE;


--
-- Name: approval_config_approvers approval_config_approvers_approver_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.approval_config_approvers
    ADD CONSTRAINT approval_config_approvers_approver_user_id_fkey FOREIGN KEY (approver_user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: approval_config_approvers approval_config_approvers_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.approval_config_approvers
    ADD CONSTRAINT approval_config_approvers_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.users(id);


--
-- Name: approval_config_history approval_config_history_approval_config_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.approval_config_history
    ADD CONSTRAINT approval_config_history_approval_config_id_fkey FOREIGN KEY (approval_config_id) REFERENCES public.approval_configs(id) ON DELETE CASCADE;


--
-- Name: approval_config_history approval_config_history_changed_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.approval_config_history
    ADD CONSTRAINT approval_config_history_changed_by_fkey FOREIGN KEY (changed_by) REFERENCES public.users(id);


--
-- Name: approval_configs approval_configs_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.approval_configs
    ADD CONSTRAINT approval_configs_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.users(id);


--
-- Name: approval_configs approval_configs_last_modified_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.approval_configs
    ADD CONSTRAINT approval_configs_last_modified_by_fkey FOREIGN KEY (last_modified_by) REFERENCES public.users(id);


--
-- Name: approval_requests approval_requests_requested_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.approval_requests
    ADD CONSTRAINT approval_requests_requested_by_fkey FOREIGN KEY (requested_by) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: asset_nav_data asset_nav_data_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.asset_nav_data
    ADD CONSTRAINT asset_nav_data_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id);


--
-- Name: asset_nav_data asset_nav_data_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.asset_nav_data
    ADD CONSTRAINT asset_nav_data_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE;


--
-- Name: asset_nav_data asset_nav_data_validated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.asset_nav_data
    ADD CONSTRAINT asset_nav_data_validated_by_fkey FOREIGN KEY (validated_by) REFERENCES auth.users(id);


--
-- Name: audit_logs audit_logs_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.audit_logs
    ADD CONSTRAINT audit_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE SET NULL;


--
-- Name: batch_operations batch_operations_user_operation_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.batch_operations
    ADD CONSTRAINT batch_operations_user_operation_id_fkey FOREIGN KEY (user_operation_id) REFERENCES public.user_operations(id) ON DELETE CASCADE;


--
-- Name: cap_tables cap_tables_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.cap_tables
    ADD CONSTRAINT cap_tables_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(id);


--
-- Name: climate_incentives climate_incentives_asset_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_incentives
    ADD CONSTRAINT climate_incentives_asset_id_fkey FOREIGN KEY (asset_id) REFERENCES public.energy_assets(asset_id);


--
-- Name: climate_incentives climate_incentives_receivable_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_incentives
    ADD CONSTRAINT climate_incentives_receivable_id_fkey FOREIGN KEY (receivable_id) REFERENCES public.climate_receivables(receivable_id);


--
-- Name: climate_investor_pools climate_investor_pools_investor_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_investor_pools
    ADD CONSTRAINT climate_investor_pools_investor_id_fkey FOREIGN KEY (investor_id) REFERENCES public.investors(investor_id);


--
-- Name: climate_investor_pools climate_investor_pools_pool_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_investor_pools
    ADD CONSTRAINT climate_investor_pools_pool_id_fkey FOREIGN KEY (pool_id) REFERENCES public.climate_tokenization_pools(pool_id);


--
-- Name: climate_nav_calculations climate_nav_calculations_asset_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_nav_calculations
    ADD CONSTRAINT climate_nav_calculations_asset_id_fkey FOREIGN KEY (asset_id) REFERENCES public.energy_assets(asset_id);


--
-- Name: climate_nav_calculations climate_nav_calculations_receivable_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_nav_calculations
    ADD CONSTRAINT climate_nav_calculations_receivable_id_fkey FOREIGN KEY (receivable_id) REFERENCES public.climate_receivables(receivable_id);


--
-- Name: climate_policy_impacts climate_policy_impacts_asset_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_policy_impacts
    ADD CONSTRAINT climate_policy_impacts_asset_id_fkey FOREIGN KEY (asset_id) REFERENCES public.energy_assets(asset_id);


--
-- Name: climate_policy_impacts climate_policy_impacts_policy_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_policy_impacts
    ADD CONSTRAINT climate_policy_impacts_policy_id_fkey FOREIGN KEY (policy_id) REFERENCES public.climate_policies(policy_id);


--
-- Name: climate_policy_impacts climate_policy_impacts_receivable_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_policy_impacts
    ADD CONSTRAINT climate_policy_impacts_receivable_id_fkey FOREIGN KEY (receivable_id) REFERENCES public.climate_receivables(receivable_id);


--
-- Name: climate_pool_energy_assets climate_pool_energy_assets_asset_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_pool_energy_assets
    ADD CONSTRAINT climate_pool_energy_assets_asset_id_fkey FOREIGN KEY (asset_id) REFERENCES public.energy_assets(asset_id) ON DELETE CASCADE;


--
-- Name: climate_pool_energy_assets climate_pool_energy_assets_pool_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_pool_energy_assets
    ADD CONSTRAINT climate_pool_energy_assets_pool_id_fkey FOREIGN KEY (pool_id) REFERENCES public.climate_tokenization_pools(pool_id) ON DELETE CASCADE;


--
-- Name: climate_pool_energy_assets climate_pool_energy_assets_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_pool_energy_assets
    ADD CONSTRAINT climate_pool_energy_assets_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(id);


--
-- Name: climate_pool_incentives climate_pool_incentives_incentive_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_pool_incentives
    ADD CONSTRAINT climate_pool_incentives_incentive_id_fkey FOREIGN KEY (incentive_id) REFERENCES public.climate_incentives(incentive_id) ON DELETE CASCADE;


--
-- Name: climate_pool_incentives climate_pool_incentives_pool_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_pool_incentives
    ADD CONSTRAINT climate_pool_incentives_pool_id_fkey FOREIGN KEY (pool_id) REFERENCES public.climate_tokenization_pools(pool_id) ON DELETE CASCADE;


--
-- Name: climate_pool_incentives climate_pool_incentives_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_pool_incentives
    ADD CONSTRAINT climate_pool_incentives_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(id);


--
-- Name: climate_pool_receivables climate_pool_receivables_pool_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_pool_receivables
    ADD CONSTRAINT climate_pool_receivables_pool_id_fkey FOREIGN KEY (pool_id) REFERENCES public.climate_tokenization_pools(pool_id);


--
-- Name: climate_pool_receivables climate_pool_receivables_receivable_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_pool_receivables
    ADD CONSTRAINT climate_pool_receivables_receivable_id_fkey FOREIGN KEY (receivable_id) REFERENCES public.climate_receivables(receivable_id);


--
-- Name: climate_pool_recs climate_pool_recs_pool_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_pool_recs
    ADD CONSTRAINT climate_pool_recs_pool_id_fkey FOREIGN KEY (pool_id) REFERENCES public.climate_tokenization_pools(pool_id) ON DELETE CASCADE;


--
-- Name: climate_pool_recs climate_pool_recs_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_pool_recs
    ADD CONSTRAINT climate_pool_recs_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(id);


--
-- Name: climate_pool_recs climate_pool_recs_rec_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_pool_recs
    ADD CONSTRAINT climate_pool_recs_rec_id_fkey FOREIGN KEY (rec_id) REFERENCES public.renewable_energy_credits(rec_id) ON DELETE CASCADE;


--
-- Name: climate_receivables climate_receivables_asset_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_receivables
    ADD CONSTRAINT climate_receivables_asset_id_fkey FOREIGN KEY (asset_id) REFERENCES public.energy_assets(asset_id);


--
-- Name: climate_receivables climate_receivables_payer_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_receivables
    ADD CONSTRAINT climate_receivables_payer_id_fkey FOREIGN KEY (payer_id) REFERENCES public.climate_payers(payer_id);


--
-- Name: climate_reports climate_reports_generated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_reports
    ADD CONSTRAINT climate_reports_generated_by_fkey FOREIGN KEY (generated_by) REFERENCES auth.users(id);


--
-- Name: climate_risk_calculations climate_risk_calculations_receivable_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_risk_calculations
    ADD CONSTRAINT climate_risk_calculations_receivable_id_fkey FOREIGN KEY (receivable_id) REFERENCES public.climate_receivables(receivable_id) ON DELETE CASCADE;


--
-- Name: climate_risk_factors climate_risk_factors_receivable_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_risk_factors
    ADD CONSTRAINT climate_risk_factors_receivable_id_fkey FOREIGN KEY (receivable_id) REFERENCES public.climate_receivables(receivable_id);


--
-- Name: climate_user_data_cache climate_user_data_cache_source_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_user_data_cache
    ADD CONSTRAINT climate_user_data_cache_source_id_fkey FOREIGN KEY (source_id) REFERENCES public.climate_user_data_sources(source_id) ON DELETE CASCADE;


--
-- Name: climate_user_data_sources climate_user_data_sources_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_user_data_sources
    ADD CONSTRAINT climate_user_data_sources_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: compliance_checks compliance_checks_investor_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.compliance_checks
    ADD CONSTRAINT compliance_checks_investor_id_fkey FOREIGN KEY (investor_id) REFERENCES public.investors(investor_id) ON DELETE CASCADE;


--
-- Name: compliance_checks compliance_checks_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.compliance_checks
    ADD CONSTRAINT compliance_checks_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE;


--
-- Name: compliance_reports compliance_reports_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.compliance_reports
    ADD CONSTRAINT compliance_reports_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id);


--
-- Name: compliance_reports compliance_reports_updated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.compliance_reports
    ADD CONSTRAINT compliance_reports_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES auth.users(id);


--
-- Name: credential_usage_logs credential_usage_logs_performed_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.credential_usage_logs
    ADD CONSTRAINT credential_usage_logs_performed_by_fkey FOREIGN KEY (performed_by) REFERENCES auth.users(id);


--
-- Name: data_source_mappings data_source_mappings_source_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.data_source_mappings
    ADD CONSTRAINT data_source_mappings_source_id_fkey FOREIGN KEY (source_id) REFERENCES public.climate_user_data_sources(source_id) ON DELETE CASCADE;


--
-- Name: dfns_broadcast_transactions dfns_broadcast_transactions_wallet_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_broadcast_transactions
    ADD CONSTRAINT dfns_broadcast_transactions_wallet_id_fkey FOREIGN KEY (wallet_id) REFERENCES public.dfns_wallets(wallet_id) ON DELETE CASCADE;


--
-- Name: dfns_credentials dfns_credentials_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_credentials
    ADD CONSTRAINT dfns_credentials_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.dfns_users(id) ON DELETE CASCADE;


--
-- Name: dfns_exchange_accounts dfns_exchange_accounts_exchange_integration_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_exchange_accounts
    ADD CONSTRAINT dfns_exchange_accounts_exchange_integration_id_fkey FOREIGN KEY (exchange_integration_id) REFERENCES public.dfns_exchange_integrations(integration_id) ON DELETE CASCADE;


--
-- Name: dfns_exchange_balances dfns_exchange_balances_account_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_exchange_balances
    ADD CONSTRAINT dfns_exchange_balances_account_id_fkey FOREIGN KEY (account_id) REFERENCES public.dfns_exchange_accounts(account_id) ON DELETE CASCADE;


--
-- Name: dfns_fiat_activity_logs dfns_fiat_activity_logs_transaction_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_fiat_activity_logs
    ADD CONSTRAINT dfns_fiat_activity_logs_transaction_id_fkey FOREIGN KEY (transaction_id) REFERENCES public.dfns_fiat_transactions(id) ON DELETE CASCADE;


--
-- Name: dfns_fiat_transactions dfns_fiat_transactions_wallet_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_fiat_transactions
    ADD CONSTRAINT dfns_fiat_transactions_wallet_id_fkey FOREIGN KEY (wallet_id) REFERENCES public.dfns_wallets(id);


--
-- Name: dfns_permission_assignments dfns_permission_assignments_permission_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_permission_assignments
    ADD CONSTRAINT dfns_permission_assignments_permission_id_fkey FOREIGN KEY (permission_id) REFERENCES public.dfns_permissions(permission_id) ON DELETE CASCADE;


--
-- Name: dfns_personal_access_tokens dfns_personal_access_tokens_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_personal_access_tokens
    ADD CONSTRAINT dfns_personal_access_tokens_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.dfns_users(id) ON DELETE CASCADE;


--
-- Name: dfns_policy_approval_decisions dfns_policy_approval_decisions_approval_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_policy_approval_decisions
    ADD CONSTRAINT dfns_policy_approval_decisions_approval_id_fkey FOREIGN KEY (approval_id) REFERENCES public.dfns_policy_approvals(id) ON DELETE CASCADE;


--
-- Name: dfns_policy_approval_groups dfns_policy_approval_groups_policy_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_policy_approval_groups
    ADD CONSTRAINT dfns_policy_approval_groups_policy_id_fkey FOREIGN KEY (policy_id) REFERENCES public.dfns_policies(id) ON DELETE CASCADE;


--
-- Name: dfns_policy_approvals dfns_policy_approvals_policy_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_policy_approvals
    ADD CONSTRAINT dfns_policy_approvals_policy_id_fkey FOREIGN KEY (policy_id) REFERENCES public.dfns_policies(policy_id) ON DELETE CASCADE;


--
-- Name: dfns_signatures dfns_signatures_key_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_signatures
    ADD CONSTRAINT dfns_signatures_key_id_fkey FOREIGN KEY (key_id) REFERENCES public.dfns_signing_keys(key_id) ON DELETE CASCADE;


--
-- Name: dfns_sponsored_fees dfns_sponsored_fees_fee_sponsor_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_sponsored_fees
    ADD CONSTRAINT dfns_sponsored_fees_fee_sponsor_id_fkey FOREIGN KEY (fee_sponsor_id) REFERENCES public.dfns_fee_sponsors(sponsor_id) ON DELETE CASCADE;


--
-- Name: dfns_sponsored_fees dfns_sponsored_fees_wallet_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_sponsored_fees
    ADD CONSTRAINT dfns_sponsored_fees_wallet_id_fkey FOREIGN KEY (wallet_id) REFERENCES public.dfns_wallets(wallet_id) ON DELETE CASCADE;


--
-- Name: dfns_staking_integrations dfns_staking_integrations_wallet_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_staking_integrations
    ADD CONSTRAINT dfns_staking_integrations_wallet_id_fkey FOREIGN KEY (wallet_id) REFERENCES public.dfns_wallets(wallet_id) ON DELETE CASCADE;


--
-- Name: dfns_transaction_history dfns_transaction_history_wallet_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_transaction_history
    ADD CONSTRAINT dfns_transaction_history_wallet_id_fkey FOREIGN KEY (wallet_id) REFERENCES public.dfns_wallets(wallet_id) ON DELETE CASCADE;


--
-- Name: dfns_transfers dfns_transfers_wallet_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_transfers
    ADD CONSTRAINT dfns_transfers_wallet_id_fkey FOREIGN KEY (wallet_id) REFERENCES public.dfns_wallets(wallet_id) ON DELETE CASCADE;


--
-- Name: dfns_wallet_balances dfns_wallet_balances_wallet_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_wallet_balances
    ADD CONSTRAINT dfns_wallet_balances_wallet_id_fkey FOREIGN KEY (wallet_id) REFERENCES public.dfns_wallets(wallet_id) ON DELETE CASCADE;


--
-- Name: dfns_wallet_nfts dfns_wallet_nfts_wallet_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_wallet_nfts
    ADD CONSTRAINT dfns_wallet_nfts_wallet_id_fkey FOREIGN KEY (wallet_id) REFERENCES public.dfns_wallets(wallet_id) ON DELETE CASCADE;


--
-- Name: dfns_wallets dfns_wallets_signing_key_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_wallets
    ADD CONSTRAINT dfns_wallets_signing_key_id_fkey FOREIGN KEY (signing_key_id) REFERENCES public.dfns_signing_keys(key_id) ON DELETE RESTRICT;


--
-- Name: dfns_webhook_deliveries dfns_webhook_deliveries_webhook_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.dfns_webhook_deliveries
    ADD CONSTRAINT dfns_webhook_deliveries_webhook_id_fkey FOREIGN KEY (webhook_id) REFERENCES public.dfns_webhooks(webhook_id) ON DELETE CASCADE;


--
-- Name: digital_tokenized_fund_products digital_tokenized_fund_products_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.digital_tokenized_fund_products
    ADD CONSTRAINT digital_tokenized_fund_products_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(id);


--
-- Name: distribution_redemptions distribution_redemptions_distribution_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.distribution_redemptions
    ADD CONSTRAINT distribution_redemptions_distribution_fkey FOREIGN KEY (distribution_id) REFERENCES public.distributions(id) ON DELETE CASCADE;


--
-- Name: distribution_redemptions distribution_redemptions_redemption_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.distribution_redemptions
    ADD CONSTRAINT distribution_redemptions_redemption_fkey FOREIGN KEY (redemption_request_id) REFERENCES public.redemption_requests(id) ON DELETE CASCADE;


--
-- Name: distributions distributions_investor_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.distributions
    ADD CONSTRAINT distributions_investor_fkey FOREIGN KEY (investor_id) REFERENCES public.investors(investor_id) ON DELETE CASCADE;


--
-- Name: distributions distributions_project_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.distributions
    ADD CONSTRAINT distributions_project_fkey FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE SET NULL;


--
-- Name: distributions distributions_subscription_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.distributions
    ADD CONSTRAINT distributions_subscription_fkey FOREIGN KEY (subscription_id) REFERENCES public.subscriptions(id) ON DELETE CASCADE;


--
-- Name: distributions distributions_wallet_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.distributions
    ADD CONSTRAINT distributions_wallet_fkey FOREIGN KEY (wallet_id) REFERENCES public.multi_sig_wallets(id) ON DELETE SET NULL;


--
-- Name: document_approvals document_approvals_approver_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.document_approvals
    ADD CONSTRAINT document_approvals_approver_id_fkey FOREIGN KEY (approver_id) REFERENCES public.users(id);


--
-- Name: document_approvals document_approvals_document_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.document_approvals
    ADD CONSTRAINT document_approvals_document_id_fkey FOREIGN KEY (document_id) REFERENCES public.documents(id) ON DELETE CASCADE;


--
-- Name: document_versions document_versions_document_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.document_versions
    ADD CONSTRAINT document_versions_document_id_fkey FOREIGN KEY (document_id) REFERENCES public.documents(id) ON DELETE CASCADE;


--
-- Name: document_versions document_versions_uploaded_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.document_versions
    ADD CONSTRAINT document_versions_uploaded_by_fkey FOREIGN KEY (uploaded_by) REFERENCES public.users(id);


--
-- Name: document_workflows document_workflows_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.document_workflows
    ADD CONSTRAINT document_workflows_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id);


--
-- Name: document_workflows document_workflows_document_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.document_workflows
    ADD CONSTRAINT document_workflows_document_id_fkey FOREIGN KEY (document_id) REFERENCES public.issuer_documents(id) ON DELETE CASCADE;


--
-- Name: document_workflows document_workflows_updated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.document_workflows
    ADD CONSTRAINT document_workflows_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES auth.users(id);


--
-- Name: documents documents_workflow_stage_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.documents
    ADD CONSTRAINT documents_workflow_stage_id_fkey FOREIGN KEY (workflow_stage_id) REFERENCES public.workflow_stages(id);


--
-- Name: energy_assets energy_assets_owner_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.energy_assets
    ADD CONSTRAINT energy_assets_owner_id_fkey FOREIGN KEY (owner_id) REFERENCES public.users(id);


--
-- Name: fiat_quotes fiat_quotes_converted_to_transaction_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.fiat_quotes
    ADD CONSTRAINT fiat_quotes_converted_to_transaction_id_fkey FOREIGN KEY (converted_to_transaction_id) REFERENCES public.fiat_transactions(id);


--
-- Name: redemption_analytics fk_analytics_window; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.redemption_analytics
    ADD CONSTRAINT fk_analytics_window FOREIGN KEY (redemption_window_id) REFERENCES public.redemption_windows(id) ON DELETE CASCADE;


--
-- Name: asset_backed_products fk_asset_backed_products_project; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.asset_backed_products
    ADD CONSTRAINT fk_asset_backed_products_project FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE;


--
-- Name: bond_products fk_bond_products_project; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.bond_products
    ADD CONSTRAINT fk_bond_products_project FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE;


--
-- Name: climate_incentives fk_climate_incentives_project_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.climate_incentives
    ADD CONSTRAINT fk_climate_incentives_project_id FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE SET NULL;


--
-- Name: collectibles_products fk_collectibles_products_project; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.collectibles_products
    ADD CONSTRAINT fk_collectibles_products_project FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE;


--
-- Name: commodities_products fk_commodities_products_project; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.commodities_products
    ADD CONSTRAINT fk_commodities_products_project FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE;


--
-- Name: digital_tokenised_funds fk_digital_tokenised_funds_project; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.digital_tokenised_funds
    ADD CONSTRAINT fk_digital_tokenised_funds_project FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE;


--
-- Name: energy_products fk_energy_products_project; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.energy_products
    ADD CONSTRAINT fk_energy_products_project FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE;


--
-- Name: equity_products fk_equity_products_project; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.equity_products
    ADD CONSTRAINT fk_equity_products_project FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE;


--
-- Name: fund_products fk_fund_products_project; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.fund_products
    ADD CONSTRAINT fk_fund_products_project FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE;


--
-- Name: infrastructure_products fk_infrastructure_products_project; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.infrastructure_products
    ADD CONSTRAINT fk_infrastructure_products_project FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE;


--
-- Name: investor_documents fk_investor_documents_created_by; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.investor_documents
    ADD CONSTRAINT fk_investor_documents_created_by FOREIGN KEY (created_by) REFERENCES auth.users(id);


--
-- Name: investor_documents fk_investor_documents_investor_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.investor_documents
    ADD CONSTRAINT fk_investor_documents_investor_id FOREIGN KEY (investor_id) REFERENCES public.investors(investor_id) ON DELETE CASCADE;


--
-- Name: investor_documents fk_investor_documents_reviewed_by; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.investor_documents
    ADD CONSTRAINT fk_investor_documents_reviewed_by FOREIGN KEY (reviewed_by) REFERENCES auth.users(id);


--
-- Name: investor_documents fk_investor_documents_updated_by; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.investor_documents
    ADD CONSTRAINT fk_investor_documents_updated_by FOREIGN KEY (updated_by) REFERENCES auth.users(id);


--
-- Name: investors fk_investors_user_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.investors
    ADD CONSTRAINT fk_investors_user_id FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE SET NULL;


--
-- Name: redemption_notifications fk_notifications_user; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.redemption_notifications
    ADD CONSTRAINT fk_notifications_user FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: redemption_notifications fk_notifications_window; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.redemption_notifications
    ADD CONSTRAINT fk_notifications_window FOREIGN KEY (redemption_window_id) REFERENCES public.redemption_windows(id) ON DELETE CASCADE;


--
-- Name: private_debt_products fk_private_debt_products_project; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.private_debt_products
    ADD CONSTRAINT fk_private_debt_products_project FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE;


--
-- Name: private_equity_products fk_private_equity_products_project; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.private_equity_products
    ADD CONSTRAINT fk_private_equity_products_project FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE;


--
-- Name: token_deployment_history fk_project_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_deployment_history
    ADD CONSTRAINT fk_project_id FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE;


--
-- Name: projects fk_projects_organization; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.projects
    ADD CONSTRAINT fk_projects_organization FOREIGN KEY (organization_id) REFERENCES public.organizations(id);


--
-- Name: quantitative_strategies fk_quantitative_strategies_project; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.quantitative_strategies
    ADD CONSTRAINT fk_quantitative_strategies_project FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE;


--
-- Name: real_estate_products fk_real_estate_products_project; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.real_estate_products
    ADD CONSTRAINT fk_real_estate_products_project FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE;


--
-- Name: redemption_approvers fk_redemption_approvers_redemption_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.redemption_approvers
    ADD CONSTRAINT fk_redemption_approvers_redemption_id FOREIGN KEY (redemption_id) REFERENCES public.redemption_requests(id) ON DELETE CASCADE;


--
-- Name: redemption_requests fk_redemption_requests_approved_by; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.redemption_requests
    ADD CONSTRAINT fk_redemption_requests_approved_by FOREIGN KEY (approved_by) REFERENCES auth.users(id);


--
-- Name: redemption_requests fk_redemption_requests_processed_by; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.redemption_requests
    ADD CONSTRAINT fk_redemption_requests_processed_by FOREIGN KEY (processed_by) REFERENCES auth.users(id);


--
-- Name: redemption_requests fk_redemption_requests_requested_by; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.redemption_requests
    ADD CONSTRAINT fk_redemption_requests_requested_by FOREIGN KEY (requested_by) REFERENCES auth.users(id);


--
-- Name: redemption_requests fk_redemption_requests_window; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.redemption_requests
    ADD CONSTRAINT fk_redemption_requests_window FOREIGN KEY (redemption_window_id) REFERENCES public.redemption_windows(id) ON DELETE CASCADE;


--
-- Name: redemption_rules fk_redemption_rules_project; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.redemption_rules
    ADD CONSTRAINT fk_redemption_rules_project FOREIGN KEY (project_id) REFERENCES public.projects(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: redemption_windows fk_redemption_windows_approved_by; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.redemption_windows
    ADD CONSTRAINT fk_redemption_windows_approved_by FOREIGN KEY (approved_by) REFERENCES auth.users(id);


--
-- Name: redemption_windows fk_redemption_windows_last_modified_by; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.redemption_windows
    ADD CONSTRAINT fk_redemption_windows_last_modified_by FOREIGN KEY (last_modified_by) REFERENCES auth.users(id);


--
-- Name: redemption_windows fk_redemption_windows_project; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.redemption_windows
    ADD CONSTRAINT fk_redemption_windows_project FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE;


--
-- Name: renewable_energy_credits fk_renewable_energy_credits_incentive_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.renewable_energy_credits
    ADD CONSTRAINT fk_renewable_energy_credits_incentive_id FOREIGN KEY (incentive_id) REFERENCES public.climate_incentives(incentive_id) ON DELETE SET NULL;


--
-- Name: renewable_energy_credits fk_renewable_energy_credits_project_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.renewable_energy_credits
    ADD CONSTRAINT fk_renewable_energy_credits_project_id FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE SET NULL;


--
-- Name: stablecoin_collateral fk_stablecoin_collateral_stablecoin; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.stablecoin_collateral
    ADD CONSTRAINT fk_stablecoin_collateral_stablecoin FOREIGN KEY (stablecoin_id) REFERENCES public.stablecoin_products(id) ON DELETE CASCADE;


--
-- Name: stablecoin_products fk_stablecoin_products_project; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.stablecoin_products
    ADD CONSTRAINT fk_stablecoin_products_project FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE;


--
-- Name: structured_products fk_structured_products_project; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.structured_products
    ADD CONSTRAINT fk_structured_products_project FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE;


--
-- Name: redemption_window_templates fk_templates_created_by; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.redemption_window_templates
    ADD CONSTRAINT fk_templates_created_by FOREIGN KEY (created_by) REFERENCES auth.users(id);


--
-- Name: redemption_window_templates fk_templates_project; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.redemption_window_templates
    ADD CONSTRAINT fk_templates_project FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE;


--
-- Name: deployment_rate_limits fk_token; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.deployment_rate_limits
    ADD CONSTRAINT fk_token FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_events fk_token; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_events
    ADD CONSTRAINT fk_token FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_deployment_history fk_token_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_deployment_history
    ADD CONSTRAINT fk_token_id FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_whitelists fk_token_whitelists_token_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_whitelists
    ADD CONSTRAINT fk_token_whitelists_token_id FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: wallet_transaction_drafts fk_wallet_transaction_drafts_wallet_id; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.wallet_transaction_drafts
    ADD CONSTRAINT fk_wallet_transaction_drafts_wallet_id FOREIGN KEY (wallet_id) REFERENCES public.wallets(id) ON DELETE CASCADE;


--
-- Name: fund_nav_data fund_nav_data_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.fund_nav_data
    ADD CONSTRAINT fund_nav_data_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id);


--
-- Name: fund_nav_data fund_nav_data_validated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.fund_nav_data
    ADD CONSTRAINT fund_nav_data_validated_by_fkey FOREIGN KEY (validated_by) REFERENCES auth.users(id);


--
-- Name: guardian_operations guardian_operations_related_test_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.guardian_operations
    ADD CONSTRAINT guardian_operations_related_test_id_fkey FOREIGN KEY (related_test_id) REFERENCES public.guardian_api_tests(id);


--
-- Name: guardian_wallets guardian_wallets_creation_request_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.guardian_wallets
    ADD CONSTRAINT guardian_wallets_creation_request_id_fkey FOREIGN KEY (creation_request_id) REFERENCES public.guardian_api_tests(id);


--
-- Name: guardian_wallets guardian_wallets_operation_check_request_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.guardian_wallets
    ADD CONSTRAINT guardian_wallets_operation_check_request_id_fkey FOREIGN KEY (operation_check_request_id) REFERENCES public.guardian_api_tests(id);


--
-- Name: guardian_wallets guardian_wallets_wallet_details_request_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.guardian_wallets
    ADD CONSTRAINT guardian_wallets_wallet_details_request_id_fkey FOREIGN KEY (wallet_details_request_id) REFERENCES public.guardian_api_tests(id);


--
-- Name: individual_documents individual_documents_reviewed_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.individual_documents
    ADD CONSTRAINT individual_documents_reviewed_by_fkey FOREIGN KEY (reviewed_by) REFERENCES auth.users(id);


--
-- Name: individual_documents individual_documents_uploaded_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.individual_documents
    ADD CONSTRAINT individual_documents_uploaded_by_fkey FOREIGN KEY (uploaded_by) REFERENCES auth.users(id);


--
-- Name: investor_approvals investor_approvals_investor_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.investor_approvals
    ADD CONSTRAINT investor_approvals_investor_id_fkey FOREIGN KEY (investor_id) REFERENCES public.investors(investor_id);


--
-- Name: investor_approvals investor_approvals_reviewer_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.investor_approvals
    ADD CONSTRAINT investor_approvals_reviewer_id_fkey FOREIGN KEY (reviewer_id) REFERENCES auth.users(id);


--
-- Name: investor_group_members investor_group_members_group_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.investor_group_members
    ADD CONSTRAINT investor_group_members_group_fkey FOREIGN KEY (group_id) REFERENCES public.investor_groups(id) ON DELETE CASCADE;


--
-- Name: investor_group_members investor_group_members_investor_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.investor_group_members
    ADD CONSTRAINT investor_group_members_investor_fkey FOREIGN KEY (investor_id) REFERENCES public.investors(investor_id) ON DELETE CASCADE;


--
-- Name: investor_groups_investors investor_groups_investors_group_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.investor_groups_investors
    ADD CONSTRAINT investor_groups_investors_group_id_fkey FOREIGN KEY (group_id) REFERENCES public.investor_groups(id) ON DELETE CASCADE;


--
-- Name: investor_groups_investors investor_groups_investors_investor_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.investor_groups_investors
    ADD CONSTRAINT investor_groups_investors_investor_id_fkey FOREIGN KEY (investor_id) REFERENCES public.investors(investor_id) ON DELETE CASCADE;


--
-- Name: investor_groups investor_groups_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.investor_groups
    ADD CONSTRAINT investor_groups_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(id);


--
-- Name: investors investors_compliance_checked_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.investors
    ADD CONSTRAINT investors_compliance_checked_by_fkey FOREIGN KEY (compliance_checked_by) REFERENCES auth.users(id);


--
-- Name: invoice invoice_payer_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.invoice
    ADD CONSTRAINT invoice_payer_id_fkey FOREIGN KEY (payer_id) REFERENCES public.payer(payer_id);


--
-- Name: invoice invoice_pool_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.invoice
    ADD CONSTRAINT invoice_pool_id_fkey FOREIGN KEY (pool_id) REFERENCES public.pool(pool_id);


--
-- Name: invoice invoice_provider_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.invoice
    ADD CONSTRAINT invoice_provider_id_fkey FOREIGN KEY (provider_id) REFERENCES public.provider(provider_id);


--
-- Name: issuer_access_roles issuer_access_roles_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.issuer_access_roles
    ADD CONSTRAINT issuer_access_roles_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id);


--
-- Name: issuer_access_roles issuer_access_roles_updated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.issuer_access_roles
    ADD CONSTRAINT issuer_access_roles_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES auth.users(id);


--
-- Name: issuer_access_roles issuer_access_roles_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.issuer_access_roles
    ADD CONSTRAINT issuer_access_roles_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id);


--
-- Name: issuer_detail_documents issuer_detail_documents_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.issuer_detail_documents
    ADD CONSTRAINT issuer_detail_documents_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE;


--
-- Name: issuer_documents issuer_documents_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.issuer_documents
    ADD CONSTRAINT issuer_documents_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id);


--
-- Name: issuer_documents issuer_documents_reviewed_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.issuer_documents
    ADD CONSTRAINT issuer_documents_reviewed_by_fkey FOREIGN KEY (reviewed_by) REFERENCES auth.users(id);


--
-- Name: issuer_documents issuer_documents_updated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.issuer_documents
    ADD CONSTRAINT issuer_documents_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES auth.users(id);


--
-- Name: kyc_screening_logs kyc_screening_logs_investor_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.kyc_screening_logs
    ADD CONSTRAINT kyc_screening_logs_investor_id_fkey FOREIGN KEY (investor_id) REFERENCES public.investors(investor_id) ON DELETE CASCADE;


--
-- Name: multi_sig_confirmations multi_sig_confirmations_transaction_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.multi_sig_confirmations
    ADD CONSTRAINT multi_sig_confirmations_transaction_id_fkey FOREIGN KEY (transaction_id) REFERENCES public.multi_sig_transactions(id) ON DELETE CASCADE;


--
-- Name: multi_sig_transactions multi_sig_transactions_wallet_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.multi_sig_transactions
    ADD CONSTRAINT multi_sig_transactions_wallet_id_fkey FOREIGN KEY (wallet_id) REFERENCES public.multi_sig_wallets(id) ON DELETE CASCADE;


--
-- Name: multi_sig_wallets multi_sig_wallets_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.multi_sig_wallets
    ADD CONSTRAINT multi_sig_wallets_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id);


--
-- Name: nav_approvals nav_approvals_run_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nav_approvals
    ADD CONSTRAINT nav_approvals_run_id_fkey FOREIGN KEY (run_id) REFERENCES public.nav_calculation_runs(id) ON DELETE CASCADE;


--
-- Name: nav_calculation_runs nav_calculation_runs_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nav_calculation_runs
    ADD CONSTRAINT nav_calculation_runs_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE;


--
-- Name: nav_oracle_configs nav_oracle_configs_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nav_oracle_configs
    ADD CONSTRAINT nav_oracle_configs_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id);


--
-- Name: nav_validation_results nav_validation_results_run_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.nav_validation_results
    ADD CONSTRAINT nav_validation_results_run_id_fkey FOREIGN KEY (run_id) REFERENCES public.nav_calculation_runs(id) ON DELETE CASCADE;


--
-- Name: notification_settings notification_settings_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.notification_settings
    ADD CONSTRAINT notification_settings_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(id);


--
-- Name: notification_settings notification_settings_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.notification_settings
    ADD CONSTRAINT notification_settings_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id);


--
-- Name: onchain_claims onchain_claims_identity_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.onchain_claims
    ADD CONSTRAINT onchain_claims_identity_id_fkey FOREIGN KEY (identity_id) REFERENCES public.onchain_identities(id) ON DELETE CASCADE;


--
-- Name: onchain_claims onchain_claims_issuer_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.onchain_claims
    ADD CONSTRAINT onchain_claims_issuer_id_fkey FOREIGN KEY (issuer_id) REFERENCES public.onchain_issuers(id) ON DELETE CASCADE;


--
-- Name: onchain_identities onchain_identities_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.onchain_identities
    ADD CONSTRAINT onchain_identities_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: onchain_verification_history onchain_verification_history_identity_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.onchain_verification_history
    ADD CONSTRAINT onchain_verification_history_identity_id_fkey FOREIGN KEY (identity_id) REFERENCES public.onchain_identities(id) ON DELETE CASCADE;


--
-- Name: paymaster_operations paymaster_operations_user_operation_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.paymaster_operations
    ADD CONSTRAINT paymaster_operations_user_operation_id_fkey FOREIGN KEY (user_operation_id) REFERENCES public.user_operations(id) ON DELETE CASCADE;


--
-- Name: policy_rule_approvers policy_rule_approvers_policy_rule_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.policy_rule_approvers
    ADD CONSTRAINT policy_rule_approvers_policy_rule_id_fkey FOREIGN KEY (policy_rule_id) REFERENCES public.rules(rule_id) ON DELETE CASCADE;


--
-- Name: policy_template_approvers policy_template_approvers_template_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.policy_template_approvers
    ADD CONSTRAINT policy_template_approvers_template_id_fkey FOREIGN KEY (template_id) REFERENCES public.policy_templates(template_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: CONSTRAINT policy_template_approvers_template_id_fkey ON policy_template_approvers; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON CONSTRAINT policy_template_approvers_template_id_fkey ON public.policy_template_approvers IS 'Foreign key to policy_templates with deferred checking to allow templates and approvers to be created in the same transaction. CASCADE DELETE ensures automatic cleanup.';


--
-- Name: policy_template_approvers policy_template_approvers_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.policy_template_approvers
    ADD CONSTRAINT policy_template_approvers_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: production_data production_data_asset_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.production_data
    ADD CONSTRAINT production_data_asset_id_fkey FOREIGN KEY (asset_id) REFERENCES public.energy_assets(asset_id);


--
-- Name: production_data production_data_weather_condition_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.production_data
    ADD CONSTRAINT production_data_weather_condition_id_fkey FOREIGN KEY (weather_condition_id) REFERENCES public.weather_data(weather_id);


--
-- Name: profiles profiles_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.profiles
    ADD CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: profiles profiles_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.profiles
    ADD CONSTRAINT profiles_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: project_organization_assignments project_organization_assignments_assigned_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.project_organization_assignments
    ADD CONSTRAINT project_organization_assignments_assigned_by_fkey FOREIGN KEY (assigned_by) REFERENCES auth.users(id);


--
-- Name: project_organization_assignments project_organization_assignments_organization_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.project_organization_assignments
    ADD CONSTRAINT project_organization_assignments_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id) ON DELETE CASCADE;


--
-- Name: project_organization_assignments project_organization_assignments_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.project_organization_assignments
    ADD CONSTRAINT project_organization_assignments_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE;


--
-- Name: project_wallets project_wallets_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.project_wallets
    ADD CONSTRAINT project_wallets_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE;


--
-- Name: quantitative_investment_strategies_products quantitative_investment_strategies_products_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.quantitative_investment_strategies_products
    ADD CONSTRAINT quantitative_investment_strategies_products_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(id);


--
-- Name: ramp_transaction_events ramp_transaction_events_transaction_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.ramp_transaction_events
    ADD CONSTRAINT ramp_transaction_events_transaction_id_fkey FOREIGN KEY (transaction_id) REFERENCES public.fiat_transactions(id) ON DELETE CASCADE;


--
-- Name: redemption_approvers redemption_approvers_redemption_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.redemption_approvers
    ADD CONSTRAINT redemption_approvers_redemption_id_fkey FOREIGN KEY (redemption_id) REFERENCES public.redemption_requests(id) ON DELETE CASCADE;


--
-- Name: redemption_rules redemption_rules_rule_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.redemption_rules
    ADD CONSTRAINT redemption_rules_rule_id_fkey FOREIGN KEY (rule_id) REFERENCES public.rules(rule_id);


--
-- Name: redemption_settlements redemption_settlements_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.redemption_settlements
    ADD CONSTRAINT redemption_settlements_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id);


--
-- Name: redemption_settlements redemption_settlements_redemption_request_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.redemption_settlements
    ADD CONSTRAINT redemption_settlements_redemption_request_id_fkey FOREIGN KEY (redemption_request_id) REFERENCES public.redemption_requests(id) ON DELETE CASCADE;


--
-- Name: redemption_windows redemption_windows_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.redemption_windows
    ADD CONSTRAINT redemption_windows_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id);


--
-- Name: redemption_windows redemption_windows_processed_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.redemption_windows
    ADD CONSTRAINT redemption_windows_processed_by_fkey FOREIGN KEY (processed_by) REFERENCES auth.users(id);


--
-- Name: regulatory_equivalence_mapping regulatory_equivalence_mapping_equivalent_jurisdiction_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.regulatory_equivalence_mapping
    ADD CONSTRAINT regulatory_equivalence_mapping_equivalent_jurisdiction_fkey FOREIGN KEY (equivalent_jurisdiction) REFERENCES public.geographic_jurisdictions(country_code);


--
-- Name: regulatory_equivalence_mapping regulatory_equivalence_mapping_home_jurisdiction_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.regulatory_equivalence_mapping
    ADD CONSTRAINT regulatory_equivalence_mapping_home_jurisdiction_fkey FOREIGN KEY (home_jurisdiction) REFERENCES public.geographic_jurisdictions(country_code);


--
-- Name: renewable_energy_credits renewable_energy_credits_asset_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.renewable_energy_credits
    ADD CONSTRAINT renewable_energy_credits_asset_id_fkey FOREIGN KEY (asset_id) REFERENCES public.energy_assets(asset_id);


--
-- Name: renewable_energy_credits renewable_energy_credits_receivable_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.renewable_energy_credits
    ADD CONSTRAINT renewable_energy_credits_receivable_id_fkey FOREIGN KEY (receivable_id) REFERENCES public.climate_receivables(receivable_id);


--
-- Name: restriction_validation_logs restriction_validation_logs_wallet_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.restriction_validation_logs
    ADD CONSTRAINT restriction_validation_logs_wallet_id_fkey FOREIGN KEY (wallet_id) REFERENCES public.wallets(id) ON DELETE CASCADE;


--
-- Name: role_permissions role_permissions_permission_name_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.role_permissions
    ADD CONSTRAINT role_permissions_permission_name_fkey FOREIGN KEY (permission_name) REFERENCES public.permissions(name) ON DELETE CASCADE;


--
-- Name: role_permissions role_permissions_role_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.role_permissions
    ADD CONSTRAINT role_permissions_role_id_fkey FOREIGN KEY (role_id) REFERENCES public.roles(id) ON DELETE CASCADE;


--
-- Name: security_events security_events_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.security_events
    ADD CONSTRAINT security_events_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE SET NULL;


--
-- Name: sidebar_configurations sidebar_configurations_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.sidebar_configurations
    ADD CONSTRAINT sidebar_configurations_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id) ON DELETE SET NULL;


--
-- Name: sidebar_configurations sidebar_configurations_organization_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.sidebar_configurations
    ADD CONSTRAINT sidebar_configurations_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id) ON DELETE CASCADE;


--
-- Name: sidebar_configurations sidebar_configurations_updated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.sidebar_configurations
    ADD CONSTRAINT sidebar_configurations_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES auth.users(id) ON DELETE SET NULL;


--
-- Name: sidebar_items sidebar_items_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.sidebar_items
    ADD CONSTRAINT sidebar_items_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id) ON DELETE SET NULL;


--
-- Name: sidebar_items sidebar_items_organization_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.sidebar_items
    ADD CONSTRAINT sidebar_items_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id) ON DELETE CASCADE;


--
-- Name: sidebar_items sidebar_items_section_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.sidebar_items
    ADD CONSTRAINT sidebar_items_section_id_fkey FOREIGN KEY (section_id) REFERENCES public.sidebar_sections(id) ON DELETE CASCADE;


--
-- Name: sidebar_items sidebar_items_updated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.sidebar_items
    ADD CONSTRAINT sidebar_items_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES auth.users(id) ON DELETE SET NULL;


--
-- Name: sidebar_sections sidebar_sections_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.sidebar_sections
    ADD CONSTRAINT sidebar_sections_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id) ON DELETE SET NULL;


--
-- Name: sidebar_sections sidebar_sections_organization_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.sidebar_sections
    ADD CONSTRAINT sidebar_sections_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id) ON DELETE CASCADE;


--
-- Name: sidebar_sections sidebar_sections_updated_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.sidebar_sections
    ADD CONSTRAINT sidebar_sections_updated_by_fkey FOREIGN KEY (updated_by) REFERENCES auth.users(id) ON DELETE SET NULL;


--
-- Name: signature_migration_approvals signature_migration_approvals_migration_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.signature_migration_approvals
    ADD CONSTRAINT signature_migration_approvals_migration_id_fkey FOREIGN KEY (migration_id) REFERENCES public.signature_migrations(id) ON DELETE CASCADE;


--
-- Name: signature_migrations signature_migrations_wallet_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.signature_migrations
    ADD CONSTRAINT signature_migrations_wallet_id_fkey FOREIGN KEY (wallet_id) REFERENCES public.wallets(id) ON DELETE CASCADE;


--
-- Name: signatures signatures_proposal_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.signatures
    ADD CONSTRAINT signatures_proposal_id_fkey FOREIGN KEY (proposal_id) REFERENCES public.transaction_proposals(id) ON DELETE CASCADE;


--
-- Name: smart_contract_wallets smart_contract_wallets_wallet_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.smart_contract_wallets
    ADD CONSTRAINT smart_contract_wallets_wallet_id_fkey FOREIGN KEY (wallet_id) REFERENCES public.wallets(id) ON DELETE CASCADE;


--
-- Name: stage_requirements stage_requirements_stage_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.stage_requirements
    ADD CONSTRAINT stage_requirements_stage_id_fkey FOREIGN KEY (stage_id) REFERENCES public.workflow_stages(id) ON DELETE CASCADE;


--
-- Name: stripe_conversion_transactions stripe_conversion_transactions_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.stripe_conversion_transactions
    ADD CONSTRAINT stripe_conversion_transactions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: stripe_stablecoin_accounts stripe_stablecoin_accounts_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.stripe_stablecoin_accounts
    ADD CONSTRAINT stripe_stablecoin_accounts_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: subscriptions subscriptions_investor_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.subscriptions
    ADD CONSTRAINT subscriptions_investor_id_fkey FOREIGN KEY (investor_id) REFERENCES public.investors(investor_id) ON DELETE CASCADE;


--
-- Name: subscriptions subscriptions_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.subscriptions
    ADD CONSTRAINT subscriptions_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE;


--
-- Name: token_allocations token_allocations_investor_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_allocations
    ADD CONSTRAINT token_allocations_investor_fkey FOREIGN KEY (investor_id) REFERENCES public.investors(investor_id) ON DELETE CASCADE;


--
-- Name: token_allocations token_allocations_project_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_allocations
    ADD CONSTRAINT token_allocations_project_fkey FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE SET NULL;


--
-- Name: token_allocations token_allocations_subscription_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_allocations
    ADD CONSTRAINT token_allocations_subscription_fkey FOREIGN KEY (subscription_id) REFERENCES public.subscriptions(id) ON DELETE CASCADE;


--
-- Name: token_allocations token_allocations_token_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_allocations
    ADD CONSTRAINT token_allocations_token_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id);


--
-- Name: token_climate_properties token_climate_properties_pool_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_climate_properties
    ADD CONSTRAINT token_climate_properties_pool_id_fkey FOREIGN KEY (pool_id) REFERENCES public.climate_tokenization_pools(pool_id);


--
-- Name: token_climate_properties token_climate_properties_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_climate_properties
    ADD CONSTRAINT token_climate_properties_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id);


--
-- Name: token_deployments token_deployments_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_deployments
    ADD CONSTRAINT token_deployments_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_erc1155_balances token_erc1155_balances_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1155_balances
    ADD CONSTRAINT token_erc1155_balances_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_erc1155_crafting_recipes token_erc1155_crafting_recipes_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1155_crafting_recipes
    ADD CONSTRAINT token_erc1155_crafting_recipes_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_erc1155_discount_tiers token_erc1155_discount_tiers_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1155_discount_tiers
    ADD CONSTRAINT token_erc1155_discount_tiers_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_erc1155_properties token_erc1155_properties_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1155_properties
    ADD CONSTRAINT token_erc1155_properties_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_erc1155_type_configs token_erc1155_type_configs_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1155_type_configs
    ADD CONSTRAINT token_erc1155_type_configs_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_erc1155_types token_erc1155_types_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1155_types
    ADD CONSTRAINT token_erc1155_types_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_erc1155_uri_mappings token_erc1155_uri_mappings_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1155_uri_mappings
    ADD CONSTRAINT token_erc1155_uri_mappings_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_erc1400_controllers token_erc1400_controllers_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1400_controllers
    ADD CONSTRAINT token_erc1400_controllers_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_erc1400_corporate_actions token_erc1400_corporate_actions_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1400_corporate_actions
    ADD CONSTRAINT token_erc1400_corporate_actions_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_erc1400_custody_providers token_erc1400_custody_providers_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1400_custody_providers
    ADD CONSTRAINT token_erc1400_custody_providers_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_erc1400_documents token_erc1400_documents_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1400_documents
    ADD CONSTRAINT token_erc1400_documents_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id);


--
-- Name: token_erc1400_partition_balances token_erc1400_partition_balances_partition_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1400_partition_balances
    ADD CONSTRAINT token_erc1400_partition_balances_partition_id_fkey FOREIGN KEY (partition_id) REFERENCES public.token_erc1400_partitions(id) ON DELETE CASCADE;


--
-- Name: token_erc1400_partition_operators token_erc1400_partition_operators_partition_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1400_partition_operators
    ADD CONSTRAINT token_erc1400_partition_operators_partition_id_fkey FOREIGN KEY (partition_id) REFERENCES public.token_erc1400_partitions(id) ON DELETE CASCADE;


--
-- Name: token_erc1400_partition_transfers token_erc1400_partition_transfers_partition_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1400_partition_transfers
    ADD CONSTRAINT token_erc1400_partition_transfers_partition_id_fkey FOREIGN KEY (partition_id) REFERENCES public.token_erc1400_partitions(id) ON DELETE CASCADE;


--
-- Name: token_erc1400_partitions token_erc1400_partitions_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1400_partitions
    ADD CONSTRAINT token_erc1400_partitions_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_erc1400_properties token_erc1400_properties_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1400_properties
    ADD CONSTRAINT token_erc1400_properties_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_erc1400_regulatory_filings token_erc1400_regulatory_filings_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc1400_regulatory_filings
    ADD CONSTRAINT token_erc1400_regulatory_filings_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_erc20_properties token_erc20_properties_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc20_properties
    ADD CONSTRAINT token_erc20_properties_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_erc3525_allocations token_erc3525_allocations_linked_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc3525_allocations
    ADD CONSTRAINT token_erc3525_allocations_linked_token_id_fkey FOREIGN KEY (linked_token_id) REFERENCES public.tokens(id);


--
-- Name: token_erc3525_allocations token_erc3525_allocations_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc3525_allocations
    ADD CONSTRAINT token_erc3525_allocations_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_erc3525_payment_schedules token_erc3525_payment_schedules_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc3525_payment_schedules
    ADD CONSTRAINT token_erc3525_payment_schedules_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_erc3525_properties token_erc3525_properties_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc3525_properties
    ADD CONSTRAINT token_erc3525_properties_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_erc3525_slot_configs token_erc3525_slot_configs_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc3525_slot_configs
    ADD CONSTRAINT token_erc3525_slot_configs_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_erc3525_slots token_erc3525_slots_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc3525_slots
    ADD CONSTRAINT token_erc3525_slots_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_erc3525_value_adjustments token_erc3525_value_adjustments_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc3525_value_adjustments
    ADD CONSTRAINT token_erc3525_value_adjustments_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_erc4626_asset_allocations token_erc4626_asset_allocations_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc4626_asset_allocations
    ADD CONSTRAINT token_erc4626_asset_allocations_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_erc4626_fee_tiers token_erc4626_fee_tiers_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc4626_fee_tiers
    ADD CONSTRAINT token_erc4626_fee_tiers_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_erc4626_performance_metrics token_erc4626_performance_metrics_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc4626_performance_metrics
    ADD CONSTRAINT token_erc4626_performance_metrics_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_erc4626_properties token_erc4626_properties_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc4626_properties
    ADD CONSTRAINT token_erc4626_properties_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_erc4626_strategy_params token_erc4626_strategy_params_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc4626_strategy_params
    ADD CONSTRAINT token_erc4626_strategy_params_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_erc4626_vault_strategies token_erc4626_vault_strategies_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc4626_vault_strategies
    ADD CONSTRAINT token_erc4626_vault_strategies_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_erc721_attributes token_erc721_attributes_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc721_attributes
    ADD CONSTRAINT token_erc721_attributes_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_erc721_mint_phases token_erc721_mint_phases_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc721_mint_phases
    ADD CONSTRAINT token_erc721_mint_phases_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_erc721_properties token_erc721_properties_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc721_properties
    ADD CONSTRAINT token_erc721_properties_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_erc721_trait_definitions token_erc721_trait_definitions_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_erc721_trait_definitions
    ADD CONSTRAINT token_erc721_trait_definitions_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_geographic_restrictions token_geographic_restrictions_country_code_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_geographic_restrictions
    ADD CONSTRAINT token_geographic_restrictions_country_code_fkey FOREIGN KEY (country_code) REFERENCES public.geographic_jurisdictions(country_code);


--
-- Name: token_geographic_restrictions token_geographic_restrictions_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_geographic_restrictions
    ADD CONSTRAINT token_geographic_restrictions_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_operations token_operations_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_operations
    ADD CONSTRAINT token_operations_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_sanctions_rules token_sanctions_rules_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_sanctions_rules
    ADD CONSTRAINT token_sanctions_rules_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_templates token_templates_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_templates
    ADD CONSTRAINT token_templates_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE;


--
-- Name: token_versions token_versions_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_versions
    ADD CONSTRAINT token_versions_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: token_whitelists token_whitelists_token_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.token_whitelists
    ADD CONSTRAINT token_whitelists_token_id_fkey FOREIGN KEY (token_id) REFERENCES public.tokens(id) ON DELETE CASCADE;


--
-- Name: tokens tokens_deployed_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.tokens
    ADD CONSTRAINT tokens_deployed_by_fkey FOREIGN KEY (deployed_by) REFERENCES auth.users(id);


--
-- Name: tokens tokens_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.tokens
    ADD CONSTRAINT tokens_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE;


--
-- Name: transaction_proposals transaction_proposals_created_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.transaction_proposals
    ADD CONSTRAINT transaction_proposals_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id);


--
-- Name: transaction_proposals transaction_proposals_wallet_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.transaction_proposals
    ADD CONSTRAINT transaction_proposals_wallet_id_fkey FOREIGN KEY (wallet_id) REFERENCES public.multi_sig_wallets(id) ON DELETE CASCADE;


--
-- Name: transaction_signatures transaction_signatures_proposal_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.transaction_signatures
    ADD CONSTRAINT transaction_signatures_proposal_fkey FOREIGN KEY (proposal_id) REFERENCES public.transaction_proposals(id) ON DELETE CASCADE;


--
-- Name: transaction_signatures transaction_signatures_signer_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.transaction_signatures
    ADD CONSTRAINT transaction_signatures_signer_fkey FOREIGN KEY (signer) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: user_mfa_settings user_mfa_settings_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.user_mfa_settings
    ADD CONSTRAINT user_mfa_settings_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: user_operations user_operations_wallet_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.user_operations
    ADD CONSTRAINT user_operations_wallet_id_fkey FOREIGN KEY (wallet_id) REFERENCES public.wallets(id) ON DELETE CASCADE;


--
-- Name: user_organization_roles user_organization_roles_organization_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.user_organization_roles
    ADD CONSTRAINT user_organization_roles_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id) ON DELETE CASCADE;


--
-- Name: user_organization_roles user_organization_roles_role_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.user_organization_roles
    ADD CONSTRAINT user_organization_roles_role_id_fkey FOREIGN KEY (role_id) REFERENCES public.roles(id) ON DELETE CASCADE;


--
-- Name: user_organization_roles user_organization_roles_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.user_organization_roles
    ADD CONSTRAINT user_organization_roles_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: user_roles user_roles_role_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.user_roles
    ADD CONSTRAINT user_roles_role_id_fkey FOREIGN KEY (role_id) REFERENCES public.roles(id) ON DELETE CASCADE;


--
-- Name: user_roles user_roles_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.user_roles
    ADD CONSTRAINT user_roles_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;


--
-- Name: user_sidebar_preferences user_sidebar_preferences_organization_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.user_sidebar_preferences
    ADD CONSTRAINT user_sidebar_preferences_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id) ON DELETE CASCADE;


--
-- Name: user_sidebar_preferences user_sidebar_preferences_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.user_sidebar_preferences
    ADD CONSTRAINT user_sidebar_preferences_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: users users_auth_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_auth_id_fkey FOREIGN KEY (auth_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: users users_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: wallet_details wallet_details_wallet_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.wallet_details
    ADD CONSTRAINT wallet_details_wallet_id_fkey FOREIGN KEY (wallet_id) REFERENCES public.multi_sig_wallets(id) ON DELETE CASCADE;


--
-- Name: wallet_facets wallet_facets_wallet_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.wallet_facets
    ADD CONSTRAINT wallet_facets_wallet_id_fkey FOREIGN KEY (wallet_id) REFERENCES public.wallets(id) ON DELETE CASCADE;


--
-- Name: wallet_guardians wallet_guardians_wallet_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.wallet_guardians
    ADD CONSTRAINT wallet_guardians_wallet_id_fkey FOREIGN KEY (wallet_id) REFERENCES public.wallets(id) ON DELETE CASCADE;


--
-- Name: wallet_locks wallet_locks_wallet_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.wallet_locks
    ADD CONSTRAINT wallet_locks_wallet_id_fkey FOREIGN KEY (wallet_id) REFERENCES public.wallets(id) ON DELETE CASCADE;


--
-- Name: wallet_restriction_rules wallet_restriction_rules_wallet_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.wallet_restriction_rules
    ADD CONSTRAINT wallet_restriction_rules_wallet_id_fkey FOREIGN KEY (wallet_id) REFERENCES public.wallets(id) ON DELETE CASCADE;


--
-- Name: wallets wallets_investor_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.wallets
    ADD CONSTRAINT wallets_investor_id_fkey FOREIGN KEY (investor_id) REFERENCES public.investors(investor_id) ON DELETE CASCADE;


--
-- Name: webauthn_challenges webauthn_challenges_wallet_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.webauthn_challenges
    ADD CONSTRAINT webauthn_challenges_wallet_id_fkey FOREIGN KEY (wallet_id) REFERENCES public.wallets(id) ON DELETE CASCADE;


--
-- Name: webauthn_credentials webauthn_credentials_wallet_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.webauthn_credentials
    ADD CONSTRAINT webauthn_credentials_wallet_id_fkey FOREIGN KEY (wallet_id) REFERENCES public.wallets(id) ON DELETE CASCADE;


--
-- Name: whitelist_settings whitelist_settings_organization_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.whitelist_settings
    ADD CONSTRAINT whitelist_settings_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id) ON DELETE CASCADE;


--
-- Name: whitelist_settings whitelist_settings_rule_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.whitelist_settings
    ADD CONSTRAINT whitelist_settings_rule_id_fkey FOREIGN KEY (rule_id) REFERENCES public.rules(rule_id);


--
-- Name: whitelist_signatories whitelist_signatories_whitelist_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.whitelist_signatories
    ADD CONSTRAINT whitelist_signatories_whitelist_id_fkey FOREIGN KEY (whitelist_id) REFERENCES public.whitelist_settings(id) ON DELETE CASCADE;


--
-- Name: regulatory_exemptions Allow read access to regulatory exemptions; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Allow read access to regulatory exemptions" ON public.regulatory_exemptions FOR SELECT USING ((auth.role() = 'authenticated'::text));


--
-- Name: regulatory_exemptions Allow write access to regulatory exemptions for authorized user; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Allow write access to regulatory exemptions for authorized user" ON public.regulatory_exemptions USING ((EXISTS ( SELECT 1
   FROM (public.user_organization_roles uor
     JOIN public.role_permissions rp ON ((uor.role_id = rp.role_id)))
  WHERE ((uor.user_id = auth.uid()) AND (rp.permission_name = ANY (ARRAY['manage_regulatory_data'::text, 'admin_access'::text]))))));


--
-- Name: climate_risk_calculations Authenticated users can create risk calculations; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Authenticated users can create risk calculations" ON public.climate_risk_calculations FOR INSERT WITH CHECK ((auth.uid() IS NOT NULL));


--
-- Name: climate_risk_calculations Authenticated users can delete risk calculations; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Authenticated users can delete risk calculations" ON public.climate_risk_calculations FOR DELETE USING ((auth.uid() IS NOT NULL));


--
-- Name: climate_risk_calculations Authenticated users can update risk calculations; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Authenticated users can update risk calculations" ON public.climate_risk_calculations FOR UPDATE USING ((auth.uid() IS NOT NULL));


--
-- Name: climate_risk_calculations Authenticated users can view risk calculations; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Authenticated users can view risk calculations" ON public.climate_risk_calculations FOR SELECT USING ((auth.uid() IS NOT NULL));


--
-- Name: sidebar_configurations Super Admins can manage all sidebar configurations; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Super Admins can manage all sidebar configurations" ON public.sidebar_configurations USING ((EXISTS ( SELECT 1
   FROM (public.user_roles ur
     JOIN public.roles r ON ((ur.role_id = r.id)))
  WHERE ((ur.user_id = auth.uid()) AND (r.name = 'Super Admin'::text) AND (r.priority >= 100)))));


--
-- Name: sidebar_configurations Super Admins can manage all sidebar configurations v2; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Super Admins can manage all sidebar configurations v2" ON public.sidebar_configurations USING ((EXISTS ( SELECT 1
   FROM (public.user_roles ur
     JOIN public.roles r ON ((ur.role_id = r.id)))
  WHERE ((ur.user_id = auth.uid()) AND (r.name = 'Super Admin'::text) AND (r.priority >= 100)))));


--
-- Name: sidebar_items Super Admins can manage all sidebar items; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Super Admins can manage all sidebar items" ON public.sidebar_items USING ((EXISTS ( SELECT 1
   FROM (public.user_roles ur
     JOIN public.roles r ON ((ur.role_id = r.id)))
  WHERE ((ur.user_id = auth.uid()) AND (r.name = 'Super Admin'::text) AND (r.priority >= 100)))));


--
-- Name: sidebar_sections Super Admins can manage all sidebar sections; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Super Admins can manage all sidebar sections" ON public.sidebar_sections USING ((EXISTS ( SELECT 1
   FROM (public.user_roles ur
     JOIN public.roles r ON ((ur.role_id = r.id)))
  WHERE ((ur.user_id = auth.uid()) AND (r.name = 'Super Admin'::text) AND (r.priority >= 100)))));


--
-- Name: project_organization_assignments Users can create project organization assignments; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can create project organization assignments" ON public.project_organization_assignments FOR INSERT WITH CHECK (((auth.uid() IS NOT NULL) AND ((EXISTS ( SELECT 1
   FROM (public.user_organization_roles uor
     JOIN public.projects p ON ((p.organization_id = uor.organization_id)))
  WHERE ((p.id = project_organization_assignments.project_id) AND (uor.user_id = auth.uid())))) OR (EXISTS ( SELECT 1
   FROM public.user_organization_roles uor
  WHERE ((uor.organization_id = project_organization_assignments.organization_id) AND (uor.user_id = auth.uid())))))));


--
-- Name: project_organization_assignments Users can delete project organization assignments; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can delete project organization assignments" ON public.project_organization_assignments FOR DELETE USING (((auth.uid() IS NOT NULL) AND ((assigned_by = auth.uid()) OR (EXISTS ( SELECT 1
   FROM (public.user_organization_roles uor
     JOIN public.projects p ON ((p.organization_id = uor.organization_id)))
  WHERE ((p.id = project_organization_assignments.project_id) AND (uor.user_id = auth.uid())))) OR (EXISTS ( SELECT 1
   FROM public.user_organization_roles uor
  WHERE ((uor.organization_id = project_organization_assignments.organization_id) AND (uor.user_id = auth.uid())))))));


--
-- Name: user_sidebar_preferences Users can manage their own sidebar preferences; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can manage their own sidebar preferences" ON public.user_sidebar_preferences USING ((user_id = auth.uid()));


--
-- Name: project_organization_assignments Users can update project organization assignments; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can update project organization assignments" ON public.project_organization_assignments FOR UPDATE USING (((auth.uid() IS NOT NULL) AND ((assigned_by = auth.uid()) OR (EXISTS ( SELECT 1
   FROM (public.user_organization_roles uor
     JOIN public.projects p ON ((p.organization_id = uor.organization_id)))
  WHERE ((p.id = project_organization_assignments.project_id) AND (uor.user_id = auth.uid())))) OR (EXISTS ( SELECT 1
   FROM public.user_organization_roles uor
  WHERE ((uor.organization_id = project_organization_assignments.organization_id) AND (uor.user_id = auth.uid())))))));


--
-- Name: project_organization_assignments Users can view project organization assignments; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can view project organization assignments" ON public.project_organization_assignments FOR SELECT USING (((auth.uid() IS NOT NULL) AND ((EXISTS ( SELECT 1
   FROM (public.user_organization_roles uor
     JOIN public.projects p ON ((p.organization_id = uor.organization_id)))
  WHERE ((p.id = project_organization_assignments.project_id) AND (uor.user_id = auth.uid())))) OR (EXISTS ( SELECT 1
   FROM public.user_organization_roles uor
  WHERE ((uor.organization_id = project_organization_assignments.organization_id) AND (uor.user_id = auth.uid())))))));


--
-- Name: sidebar_configurations Users can view their organization's sidebar configurations; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can view their organization's sidebar configurations" ON public.sidebar_configurations FOR SELECT USING ((organization_id IN ( SELECT user_organization_roles.organization_id
   FROM public.user_organization_roles
  WHERE (user_organization_roles.user_id = auth.uid()))));


--
-- Name: sidebar_items Users can view their organization's sidebar items; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can view their organization's sidebar items" ON public.sidebar_items FOR SELECT USING ((organization_id IN ( SELECT user_organization_roles.organization_id
   FROM public.user_organization_roles
  WHERE (user_organization_roles.user_id = auth.uid()))));


--
-- Name: sidebar_sections Users can view their organization's sidebar sections; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY "Users can view their organization's sidebar sections" ON public.sidebar_sections FOR SELECT USING ((organization_id IN ( SELECT user_organization_roles.organization_id
   FROM public.user_organization_roles
  WHERE (user_organization_roles.user_id = auth.uid()))));


--
-- Name: climate_risk_calculations; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.climate_risk_calculations ENABLE ROW LEVEL SECURITY;

--
-- Name: climate_user_data_cache; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.climate_user_data_cache ENABLE ROW LEVEL SECURITY;

--
-- Name: climate_user_data_cache climate_user_data_cache_user_policy; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY climate_user_data_cache_user_policy ON public.climate_user_data_cache USING ((source_id IN ( SELECT climate_user_data_sources.source_id
   FROM public.climate_user_data_sources
  WHERE (climate_user_data_sources.user_id = auth.uid()))));


--
-- Name: climate_user_data_sources; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.climate_user_data_sources ENABLE ROW LEVEL SECURITY;

--
-- Name: climate_user_data_sources climate_user_data_sources_user_policy; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY climate_user_data_sources_user_policy ON public.climate_user_data_sources USING ((auth.uid() = user_id));


--
-- Name: data_source_mappings; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.data_source_mappings ENABLE ROW LEVEL SECURITY;

--
-- Name: data_source_mappings data_source_mappings_user_policy; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY data_source_mappings_user_policy ON public.data_source_mappings USING ((source_id IN ( SELECT climate_user_data_sources.source_id
   FROM public.climate_user_data_sources
  WHERE (climate_user_data_sources.user_id = auth.uid()))));


--
-- Name: project_organization_assignments; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.project_organization_assignments ENABLE ROW LEVEL SECURITY;

--
-- Name: regulatory_exemptions; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.regulatory_exemptions ENABLE ROW LEVEL SECURITY;

--
-- Name: sidebar_configurations; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.sidebar_configurations ENABLE ROW LEVEL SECURITY;

--
-- Name: sidebar_items; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.sidebar_items ENABLE ROW LEVEL SECURITY;

--
-- Name: sidebar_sections; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.sidebar_sections ENABLE ROW LEVEL SECURITY;

--
-- Name: user_sidebar_preferences; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.user_sidebar_preferences ENABLE ROW LEVEL SECURITY;

--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: -
--

GRANT USAGE ON SCHEMA public TO postgres;
GRANT USAGE ON SCHEMA public TO anon;
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO service_role;
GRANT ALL ON SCHEMA public TO prisma;


--
-- Name: TYPE individual_document_type; Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON TYPE public.individual_document_type TO authenticated;


--
-- Name: FUNCTION add_investors_to_group(p_group_id text, p_investor_ids text[]); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.add_investors_to_group(p_group_id text, p_investor_ids text[]) TO anon;
GRANT ALL ON FUNCTION public.add_investors_to_group(p_group_id text, p_investor_ids text[]) TO authenticated;
GRANT ALL ON FUNCTION public.add_investors_to_group(p_group_id text, p_investor_ids text[]) TO service_role;
GRANT ALL ON FUNCTION public.add_investors_to_group(p_group_id text, p_investor_ids text[]) TO prisma;


--
-- Name: FUNCTION add_policy_approver(p_policy_id uuid, p_user_id text, p_created_by text); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.add_policy_approver(p_policy_id uuid, p_user_id text, p_created_by text) TO anon;
GRANT ALL ON FUNCTION public.add_policy_approver(p_policy_id uuid, p_user_id text, p_created_by text) TO authenticated;
GRANT ALL ON FUNCTION public.add_policy_approver(p_policy_id uuid, p_user_id text, p_created_by text) TO service_role;
GRANT ALL ON FUNCTION public.add_policy_approver(p_policy_id uuid, p_user_id text, p_created_by text) TO prisma;


--
-- Name: FUNCTION add_policy_approver(policy_id text, user_id text, created_by text, status_val text); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.add_policy_approver(policy_id text, user_id text, created_by text, status_val text) TO anon;
GRANT ALL ON FUNCTION public.add_policy_approver(policy_id text, user_id text, created_by text, status_val text) TO authenticated;
GRANT ALL ON FUNCTION public.add_policy_approver(policy_id text, user_id text, created_by text, status_val text) TO service_role;
GRANT ALL ON FUNCTION public.add_policy_approver(policy_id text, user_id text, created_by text, status_val text) TO prisma;


--
-- Name: FUNCTION add_policy_approver_with_cast(policy_id text, user_id text, created_by_id text); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.add_policy_approver_with_cast(policy_id text, user_id text, created_by_id text) TO anon;
GRANT ALL ON FUNCTION public.add_policy_approver_with_cast(policy_id text, user_id text, created_by_id text) TO authenticated;
GRANT ALL ON FUNCTION public.add_policy_approver_with_cast(policy_id text, user_id text, created_by_id text) TO service_role;
GRANT ALL ON FUNCTION public.add_policy_approver_with_cast(policy_id text, user_id text, created_by_id text) TO prisma;


--
-- Name: FUNCTION add_rule_to_approval_queue(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.add_rule_to_approval_queue() TO anon;
GRANT ALL ON FUNCTION public.add_rule_to_approval_queue() TO authenticated;
GRANT ALL ON FUNCTION public.add_rule_to_approval_queue() TO service_role;
GRANT ALL ON FUNCTION public.add_rule_to_approval_queue() TO prisma;


--
-- Name: FUNCTION add_table_to_realtime(table_name text); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.add_table_to_realtime(table_name text) TO anon;
GRANT ALL ON FUNCTION public.add_table_to_realtime(table_name text) TO authenticated;
GRANT ALL ON FUNCTION public.add_table_to_realtime(table_name text) TO service_role;
GRANT ALL ON FUNCTION public.add_table_to_realtime(table_name text) TO prisma;


--
-- Name: FUNCTION add_template_to_approval_queue(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.add_template_to_approval_queue() TO anon;
GRANT ALL ON FUNCTION public.add_template_to_approval_queue() TO authenticated;
GRANT ALL ON FUNCTION public.add_template_to_approval_queue() TO service_role;
GRANT ALL ON FUNCTION public.add_template_to_approval_queue() TO prisma;


--
-- Name: FUNCTION admin_set_profile_type(user_auth_id uuid, new_profile_type public.profile_type); Type: ACL; Schema: public; Owner: -
--

REVOKE ALL ON FUNCTION public.admin_set_profile_type(user_auth_id uuid, new_profile_type public.profile_type) FROM PUBLIC;
GRANT ALL ON FUNCTION public.admin_set_profile_type(user_auth_id uuid, new_profile_type public.profile_type) TO service_role;
GRANT ALL ON FUNCTION public.admin_set_profile_type(user_auth_id uuid, new_profile_type public.profile_type) TO prisma;


--
-- Name: FUNCTION analyze_activity_indexes(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.analyze_activity_indexes() TO anon;
GRANT ALL ON FUNCTION public.analyze_activity_indexes() TO authenticated;
GRANT ALL ON FUNCTION public.analyze_activity_indexes() TO service_role;
GRANT ALL ON FUNCTION public.analyze_activity_indexes() TO prisma;


--
-- Name: FUNCTION analyze_table_for_audit(table_name_param text); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.analyze_table_for_audit(table_name_param text) TO anon;
GRANT ALL ON FUNCTION public.analyze_table_for_audit(table_name_param text) TO authenticated;
GRANT ALL ON FUNCTION public.analyze_table_for_audit(table_name_param text) TO service_role;
GRANT ALL ON FUNCTION public.analyze_table_for_audit(table_name_param text) TO prisma;


--
-- Name: PROCEDURE apply_audit_trigger_to_table(IN table_name text); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON PROCEDURE public.apply_audit_trigger_to_table(IN table_name text) TO anon;
GRANT ALL ON PROCEDURE public.apply_audit_trigger_to_table(IN table_name text) TO authenticated;
GRANT ALL ON PROCEDURE public.apply_audit_trigger_to_table(IN table_name text) TO service_role;
GRANT ALL ON PROCEDURE public.apply_audit_trigger_to_table(IN table_name text) TO prisma;


--
-- Name: FUNCTION archive_old_moonpay_compliance_alerts(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.archive_old_moonpay_compliance_alerts() TO anon;
GRANT ALL ON FUNCTION public.archive_old_moonpay_compliance_alerts() TO authenticated;
GRANT ALL ON FUNCTION public.archive_old_moonpay_compliance_alerts() TO service_role;
GRANT ALL ON FUNCTION public.archive_old_moonpay_compliance_alerts() TO prisma;


--
-- Name: FUNCTION assign_redemption_approvers(p_redemption_request_id uuid, p_approval_config_id uuid); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.assign_redemption_approvers(p_redemption_request_id uuid, p_approval_config_id uuid) TO anon;
GRANT ALL ON FUNCTION public.assign_redemption_approvers(p_redemption_request_id uuid, p_approval_config_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.assign_redemption_approvers(p_redemption_request_id uuid, p_approval_config_id uuid) TO service_role;
GRANT ALL ON FUNCTION public.assign_redemption_approvers(p_redemption_request_id uuid, p_approval_config_id uuid) TO prisma;


--
-- Name: FUNCTION audit_investor_approval_changes(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.audit_investor_approval_changes() TO anon;
GRANT ALL ON FUNCTION public.audit_investor_approval_changes() TO authenticated;
GRANT ALL ON FUNCTION public.audit_investor_approval_changes() TO service_role;
GRANT ALL ON FUNCTION public.audit_investor_approval_changes() TO prisma;


--
-- Name: FUNCTION backup_trigger_definitions(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.backup_trigger_definitions() TO anon;
GRANT ALL ON FUNCTION public.backup_trigger_definitions() TO authenticated;
GRANT ALL ON FUNCTION public.backup_trigger_definitions() TO service_role;
GRANT ALL ON FUNCTION public.backup_trigger_definitions() TO prisma;


--
-- Name: FUNCTION begin_transaction(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.begin_transaction() TO anon;
GRANT ALL ON FUNCTION public.begin_transaction() TO authenticated;
GRANT ALL ON FUNCTION public.begin_transaction() TO service_role;
GRANT ALL ON FUNCTION public.begin_transaction() TO prisma;


--
-- Name: FUNCTION calculate_batch_climate_risk(p_receivable_ids uuid[], p_calculation_metadata jsonb); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.calculate_batch_climate_risk(p_receivable_ids uuid[], p_calculation_metadata jsonb) TO anon;
GRANT ALL ON FUNCTION public.calculate_batch_climate_risk(p_receivable_ids uuid[], p_calculation_metadata jsonb) TO authenticated;
GRANT ALL ON FUNCTION public.calculate_batch_climate_risk(p_receivable_ids uuid[], p_calculation_metadata jsonb) TO service_role;
GRANT ALL ON FUNCTION public.calculate_batch_climate_risk(p_receivable_ids uuid[], p_calculation_metadata jsonb) TO prisma;


--
-- Name: PROCEDURE calculate_daily_nav(IN p_project_id uuid, IN p_date date); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON PROCEDURE public.calculate_daily_nav(IN p_project_id uuid, IN p_date date) TO anon;
GRANT ALL ON PROCEDURE public.calculate_daily_nav(IN p_project_id uuid, IN p_date date) TO authenticated;
GRANT ALL ON PROCEDURE public.calculate_daily_nav(IN p_project_id uuid, IN p_date date) TO service_role;
GRANT ALL ON PROCEDURE public.calculate_daily_nav(IN p_project_id uuid, IN p_date date) TO prisma;


--
-- Name: FUNCTION calculate_nav_change(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.calculate_nav_change() TO anon;
GRANT ALL ON FUNCTION public.calculate_nav_change() TO authenticated;
GRANT ALL ON FUNCTION public.calculate_nav_change() TO service_role;
GRANT ALL ON FUNCTION public.calculate_nav_change() TO prisma;


--
-- Name: FUNCTION calculate_portfolio_climate_valuation(p_receivable_ids uuid[], p_calculation_mode text); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.calculate_portfolio_climate_valuation(p_receivable_ids uuid[], p_calculation_mode text) TO anon;
GRANT ALL ON FUNCTION public.calculate_portfolio_climate_valuation(p_receivable_ids uuid[], p_calculation_mode text) TO authenticated;
GRANT ALL ON FUNCTION public.calculate_portfolio_climate_valuation(p_receivable_ids uuid[], p_calculation_mode text) TO service_role;
GRANT ALL ON FUNCTION public.calculate_portfolio_climate_valuation(p_receivable_ids uuid[], p_calculation_mode text) TO prisma;


--
-- Name: FUNCTION calculate_project_weighted_nav(p_project_id uuid, p_date date); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.calculate_project_weighted_nav(p_project_id uuid, p_date date) TO anon;
GRANT ALL ON FUNCTION public.calculate_project_weighted_nav(p_project_id uuid, p_date date) TO authenticated;
GRANT ALL ON FUNCTION public.calculate_project_weighted_nav(p_project_id uuid, p_date date) TO service_role;
GRANT ALL ON FUNCTION public.calculate_project_weighted_nav(p_project_id uuid, p_date date) TO prisma;


--
-- Name: FUNCTION check_all_approvals(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.check_all_approvals() TO anon;
GRANT ALL ON FUNCTION public.check_all_approvals() TO authenticated;
GRANT ALL ON FUNCTION public.check_all_approvals() TO service_role;
GRANT ALL ON FUNCTION public.check_all_approvals() TO prisma;


--
-- Name: FUNCTION check_document_expiry(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.check_document_expiry() TO anon;
GRANT ALL ON FUNCTION public.check_document_expiry() TO authenticated;
GRANT ALL ON FUNCTION public.check_document_expiry() TO service_role;
GRANT ALL ON FUNCTION public.check_document_expiry() TO prisma;


--
-- Name: FUNCTION check_duplicate_wallet(p_project_id uuid, p_network character varying, p_credential_type character varying); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.check_duplicate_wallet(p_project_id uuid, p_network character varying, p_credential_type character varying) TO anon;
GRANT ALL ON FUNCTION public.check_duplicate_wallet(p_project_id uuid, p_network character varying, p_credential_type character varying) TO authenticated;
GRANT ALL ON FUNCTION public.check_duplicate_wallet(p_project_id uuid, p_network character varying, p_credential_type character varying) TO service_role;
GRANT ALL ON FUNCTION public.check_duplicate_wallet(p_project_id uuid, p_network character varying, p_credential_type character varying) TO prisma;


--
-- Name: FUNCTION check_issuer_document_duplicates(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.check_issuer_document_duplicates() TO anon;
GRANT ALL ON FUNCTION public.check_issuer_document_duplicates() TO authenticated;
GRANT ALL ON FUNCTION public.check_issuer_document_duplicates() TO service_role;
GRANT ALL ON FUNCTION public.check_issuer_document_duplicates() TO prisma;


--
-- Name: FUNCTION check_permission(p_role_name text, p_resource text, p_action text); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.check_permission(p_role_name text, p_resource text, p_action text) TO anon;
GRANT ALL ON FUNCTION public.check_permission(p_role_name text, p_resource text, p_action text) TO authenticated;
GRANT ALL ON FUNCTION public.check_permission(p_role_name text, p_resource text, p_action text) TO service_role;
GRANT ALL ON FUNCTION public.check_permission(p_role_name text, p_resource text, p_action text) TO prisma;


--
-- Name: FUNCTION check_redemption_eligibility(p_investor_id uuid, p_project_id uuid, p_requested_amount numeric, p_product_type text, p_product_id uuid); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.check_redemption_eligibility(p_investor_id uuid, p_project_id uuid, p_requested_amount numeric, p_product_type text, p_product_id uuid) TO anon;
GRANT ALL ON FUNCTION public.check_redemption_eligibility(p_investor_id uuid, p_project_id uuid, p_requested_amount numeric, p_product_type text, p_product_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.check_redemption_eligibility(p_investor_id uuid, p_project_id uuid, p_requested_amount numeric, p_product_type text, p_product_id uuid) TO service_role;
GRANT ALL ON FUNCTION public.check_redemption_eligibility(p_investor_id uuid, p_project_id uuid, p_requested_amount numeric, p_product_type text, p_product_id uuid) TO prisma;


--
-- Name: FUNCTION check_role_exists(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.check_role_exists() TO anon;
GRANT ALL ON FUNCTION public.check_role_exists() TO authenticated;
GRANT ALL ON FUNCTION public.check_role_exists() TO service_role;
GRANT ALL ON FUNCTION public.check_role_exists() TO prisma;


--
-- Name: FUNCTION check_user_permission(user_id uuid, permission text); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.check_user_permission(user_id uuid, permission text) TO anon;
GRANT ALL ON FUNCTION public.check_user_permission(user_id uuid, permission text) TO authenticated;
GRANT ALL ON FUNCTION public.check_user_permission(user_id uuid, permission text) TO service_role;
GRANT ALL ON FUNCTION public.check_user_permission(user_id uuid, permission text) TO prisma;


--
-- Name: FUNCTION cleanup_expired_asset_cache(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.cleanup_expired_asset_cache() TO anon;
GRANT ALL ON FUNCTION public.cleanup_expired_asset_cache() TO authenticated;
GRANT ALL ON FUNCTION public.cleanup_expired_asset_cache() TO service_role;
GRANT ALL ON FUNCTION public.cleanup_expired_asset_cache() TO prisma;


--
-- Name: FUNCTION cleanup_expired_cache(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.cleanup_expired_cache() TO anon;
GRANT ALL ON FUNCTION public.cleanup_expired_cache() TO authenticated;
GRANT ALL ON FUNCTION public.cleanup_expired_cache() TO service_role;
GRANT ALL ON FUNCTION public.cleanup_expired_cache() TO prisma;


--
-- Name: FUNCTION cleanup_expired_cache_data(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.cleanup_expired_cache_data() TO anon;
GRANT ALL ON FUNCTION public.cleanup_expired_cache_data() TO authenticated;
GRANT ALL ON FUNCTION public.cleanup_expired_cache_data() TO service_role;
GRANT ALL ON FUNCTION public.cleanup_expired_cache_data() TO prisma;


--
-- Name: FUNCTION cleanup_expired_transaction_drafts(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.cleanup_expired_transaction_drafts() TO anon;
GRANT ALL ON FUNCTION public.cleanup_expired_transaction_drafts() TO authenticated;
GRANT ALL ON FUNCTION public.cleanup_expired_transaction_drafts() TO service_role;
GRANT ALL ON FUNCTION public.cleanup_expired_transaction_drafts() TO prisma;


--
-- Name: FUNCTION cleanup_old_moonpay_policy_logs(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.cleanup_old_moonpay_policy_logs() TO anon;
GRANT ALL ON FUNCTION public.cleanup_old_moonpay_policy_logs() TO authenticated;
GRANT ALL ON FUNCTION public.cleanup_old_moonpay_policy_logs() TO service_role;
GRANT ALL ON FUNCTION public.cleanup_old_moonpay_policy_logs() TO prisma;


--
-- Name: FUNCTION cleanup_old_validation_logs(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.cleanup_old_validation_logs() TO anon;
GRANT ALL ON FUNCTION public.cleanup_old_validation_logs() TO authenticated;
GRANT ALL ON FUNCTION public.cleanup_old_validation_logs() TO service_role;
GRANT ALL ON FUNCTION public.cleanup_old_validation_logs() TO prisma;


--
-- Name: FUNCTION cleanup_old_webhook_events(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.cleanup_old_webhook_events() TO anon;
GRANT ALL ON FUNCTION public.cleanup_old_webhook_events() TO authenticated;
GRANT ALL ON FUNCTION public.cleanup_old_webhook_events() TO service_role;
GRANT ALL ON FUNCTION public.cleanup_old_webhook_events() TO prisma;


--
-- Name: FUNCTION cleanup_orphaned_policy_approvers(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.cleanup_orphaned_policy_approvers() TO anon;
GRANT ALL ON FUNCTION public.cleanup_orphaned_policy_approvers() TO authenticated;
GRANT ALL ON FUNCTION public.cleanup_orphaned_policy_approvers() TO service_role;
GRANT ALL ON FUNCTION public.cleanup_orphaned_policy_approvers() TO prisma;


--
-- Name: FUNCTION climate_receivables_health_check(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.climate_receivables_health_check() TO anon;
GRANT ALL ON FUNCTION public.climate_receivables_health_check() TO authenticated;
GRANT ALL ON FUNCTION public.climate_receivables_health_check() TO service_role;
GRANT ALL ON FUNCTION public.climate_receivables_health_check() TO prisma;


--
-- Name: FUNCTION column_exists(p_schema_name text, p_table_name text, p_column_name text); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.column_exists(p_schema_name text, p_table_name text, p_column_name text) TO anon;
GRANT ALL ON FUNCTION public.column_exists(p_schema_name text, p_table_name text, p_column_name text) TO authenticated;
GRANT ALL ON FUNCTION public.column_exists(p_schema_name text, p_table_name text, p_column_name text) TO service_role;
GRANT ALL ON FUNCTION public.column_exists(p_schema_name text, p_table_name text, p_column_name text) TO prisma;


--
-- Name: FUNCTION commit_transaction(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.commit_transaction() TO anon;
GRANT ALL ON FUNCTION public.commit_transaction() TO authenticated;
GRANT ALL ON FUNCTION public.commit_transaction() TO service_role;
GRANT ALL ON FUNCTION public.commit_transaction() TO prisma;


--
-- Name: FUNCTION create_audit_trigger(table_name text, is_high_volume boolean); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.create_audit_trigger(table_name text, is_high_volume boolean) TO anon;
GRANT ALL ON FUNCTION public.create_audit_trigger(table_name text, is_high_volume boolean) TO authenticated;
GRANT ALL ON FUNCTION public.create_audit_trigger(table_name text, is_high_volume boolean) TO service_role;
GRANT ALL ON FUNCTION public.create_audit_trigger(table_name text, is_high_volume boolean) TO prisma;


--
-- Name: FUNCTION create_document_version(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.create_document_version() TO anon;
GRANT ALL ON FUNCTION public.create_document_version() TO authenticated;
GRANT ALL ON FUNCTION public.create_document_version() TO service_role;
GRANT ALL ON FUNCTION public.create_document_version() TO prisma;


--
-- Name: FUNCTION create_project_with_cap_table(project_data jsonb, cap_table_name text); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.create_project_with_cap_table(project_data jsonb, cap_table_name text) TO anon;
GRANT ALL ON FUNCTION public.create_project_with_cap_table(project_data jsonb, cap_table_name text) TO authenticated;
GRANT ALL ON FUNCTION public.create_project_with_cap_table(project_data jsonb, cap_table_name text) TO service_role;
GRANT ALL ON FUNCTION public.create_project_with_cap_table(project_data jsonb, cap_table_name text) TO prisma;


--
-- Name: FUNCTION create_selective_audit_trigger(p_table text, p_condition text); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.create_selective_audit_trigger(p_table text, p_condition text) TO anon;
GRANT ALL ON FUNCTION public.create_selective_audit_trigger(p_table text, p_condition text) TO authenticated;
GRANT ALL ON FUNCTION public.create_selective_audit_trigger(p_table text, p_condition text) TO service_role;
GRANT ALL ON FUNCTION public.create_selective_audit_trigger(p_table text, p_condition text) TO prisma;


--
-- Name: FUNCTION create_token_version(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.create_token_version() TO anon;
GRANT ALL ON FUNCTION public.create_token_version() TO authenticated;
GRANT ALL ON FUNCTION public.create_token_version() TO service_role;
GRANT ALL ON FUNCTION public.create_token_version() TO prisma;


--
-- Name: FUNCTION create_transaction_events_table(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.create_transaction_events_table() TO anon;
GRANT ALL ON FUNCTION public.create_transaction_events_table() TO authenticated;
GRANT ALL ON FUNCTION public.create_transaction_events_table() TO service_role;
GRANT ALL ON FUNCTION public.create_transaction_events_table() TO prisma;


--
-- Name: FUNCTION delete_project_cascade(project_id uuid); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.delete_project_cascade(project_id uuid) TO anon;
GRANT ALL ON FUNCTION public.delete_project_cascade(project_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.delete_project_cascade(project_id uuid) TO service_role;
GRANT ALL ON FUNCTION public.delete_project_cascade(project_id uuid) TO prisma;


--
-- Name: FUNCTION delete_user_with_privileges(p_user_id uuid); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.delete_user_with_privileges(p_user_id uuid) TO anon;
GRANT ALL ON FUNCTION public.delete_user_with_privileges(p_user_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.delete_user_with_privileges(p_user_id uuid) TO service_role;
GRANT ALL ON FUNCTION public.delete_user_with_privileges(p_user_id uuid) TO prisma;


--
-- Name: FUNCTION disable_rls_for_deletion(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.disable_rls_for_deletion() TO anon;
GRANT ALL ON FUNCTION public.disable_rls_for_deletion() TO authenticated;
GRANT ALL ON FUNCTION public.disable_rls_for_deletion() TO service_role;
GRANT ALL ON FUNCTION public.disable_rls_for_deletion() TO prisma;


--
-- Name: FUNCTION enable_rls_after_deletion(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.enable_rls_after_deletion() TO anon;
GRANT ALL ON FUNCTION public.enable_rls_after_deletion() TO authenticated;
GRANT ALL ON FUNCTION public.enable_rls_after_deletion() TO service_role;
GRANT ALL ON FUNCTION public.enable_rls_after_deletion() TO prisma;


--
-- Name: FUNCTION exec(query text); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.exec(query text) TO anon;
GRANT ALL ON FUNCTION public.exec(query text) TO authenticated;
GRANT ALL ON FUNCTION public.exec(query text) TO service_role;
GRANT ALL ON FUNCTION public.exec(query text) TO prisma;


--
-- Name: FUNCTION execute_safely(p_statement text); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.execute_safely(p_statement text) TO anon;
GRANT ALL ON FUNCTION public.execute_safely(p_statement text) TO authenticated;
GRANT ALL ON FUNCTION public.execute_safely(p_statement text) TO service_role;
GRANT ALL ON FUNCTION public.execute_safely(p_statement text) TO prisma;


--
-- Name: FUNCTION extract_severity_from_metadata(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.extract_severity_from_metadata() TO anon;
GRANT ALL ON FUNCTION public.extract_severity_from_metadata() TO authenticated;
GRANT ALL ON FUNCTION public.extract_severity_from_metadata() TO service_role;
GRANT ALL ON FUNCTION public.extract_severity_from_metadata() TO prisma;


--
-- Name: FUNCTION get_activity_counts_by_timeframe(p_start_time timestamp without time zone, p_end_time timestamp without time zone, p_interval text); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.get_activity_counts_by_timeframe(p_start_time timestamp without time zone, p_end_time timestamp without time zone, p_interval text) TO anon;
GRANT ALL ON FUNCTION public.get_activity_counts_by_timeframe(p_start_time timestamp without time zone, p_end_time timestamp without time zone, p_interval text) TO authenticated;
GRANT ALL ON FUNCTION public.get_activity_counts_by_timeframe(p_start_time timestamp without time zone, p_end_time timestamp without time zone, p_interval text) TO service_role;
GRANT ALL ON FUNCTION public.get_activity_counts_by_timeframe(p_start_time timestamp without time zone, p_end_time timestamp without time zone, p_interval text) TO prisma;


--
-- Name: FUNCTION get_activity_distribution_by_category(p_start_time timestamp without time zone, p_end_time timestamp without time zone); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.get_activity_distribution_by_category(p_start_time timestamp without time zone, p_end_time timestamp without time zone) TO anon;
GRANT ALL ON FUNCTION public.get_activity_distribution_by_category(p_start_time timestamp without time zone, p_end_time timestamp without time zone) TO authenticated;
GRANT ALL ON FUNCTION public.get_activity_distribution_by_category(p_start_time timestamp without time zone, p_end_time timestamp without time zone) TO service_role;
GRANT ALL ON FUNCTION public.get_activity_distribution_by_category(p_start_time timestamp without time zone, p_end_time timestamp without time zone) TO prisma;


--
-- Name: FUNCTION get_activity_hierarchy(root_id uuid); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.get_activity_hierarchy(root_id uuid) TO anon;
GRANT ALL ON FUNCTION public.get_activity_hierarchy(root_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.get_activity_hierarchy(root_id uuid) TO service_role;
GRANT ALL ON FUNCTION public.get_activity_hierarchy(root_id uuid) TO prisma;


--
-- Name: FUNCTION get_all_table_schemas(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.get_all_table_schemas() TO anon;
GRANT ALL ON FUNCTION public.get_all_table_schemas() TO authenticated;
GRANT ALL ON FUNCTION public.get_all_table_schemas() TO service_role;
GRANT ALL ON FUNCTION public.get_all_table_schemas() TO prisma;


--
-- Name: FUNCTION get_audit_repopulation_summary(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.get_audit_repopulation_summary() TO anon;
GRANT ALL ON FUNCTION public.get_audit_repopulation_summary() TO authenticated;
GRANT ALL ON FUNCTION public.get_audit_repopulation_summary() TO service_role;
GRANT ALL ON FUNCTION public.get_audit_repopulation_summary() TO prisma;


--
-- Name: FUNCTION get_audit_statistics(p_hours_back integer); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.get_audit_statistics(p_hours_back integer) TO anon;
GRANT ALL ON FUNCTION public.get_audit_statistics(p_hours_back integer) TO authenticated;
GRANT ALL ON FUNCTION public.get_audit_statistics(p_hours_back integer) TO service_role;
GRANT ALL ON FUNCTION public.get_audit_statistics(p_hours_back integer) TO prisma;


--
-- Name: FUNCTION get_enhanced_risk_assessment(p_receivable_id uuid); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.get_enhanced_risk_assessment(p_receivable_id uuid) TO anon;
GRANT ALL ON FUNCTION public.get_enhanced_risk_assessment(p_receivable_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.get_enhanced_risk_assessment(p_receivable_id uuid) TO service_role;
GRANT ALL ON FUNCTION public.get_enhanced_risk_assessment(p_receivable_id uuid) TO prisma;


--
-- Name: FUNCTION get_moonpay_webhook_stats(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.get_moonpay_webhook_stats() TO anon;
GRANT ALL ON FUNCTION public.get_moonpay_webhook_stats() TO authenticated;
GRANT ALL ON FUNCTION public.get_moonpay_webhook_stats() TO service_role;
GRANT ALL ON FUNCTION public.get_moonpay_webhook_stats() TO prisma;


--
-- Name: FUNCTION get_payer_risk_assessment(p_payer_id uuid); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.get_payer_risk_assessment(p_payer_id uuid) TO anon;
GRANT ALL ON FUNCTION public.get_payer_risk_assessment(p_payer_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.get_payer_risk_assessment(p_payer_id uuid) TO service_role;
GRANT ALL ON FUNCTION public.get_payer_risk_assessment(p_payer_id uuid) TO prisma;


--
-- Name: FUNCTION get_payer_risk_assessment_with_user_data(p_payer_id uuid); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.get_payer_risk_assessment_with_user_data(p_payer_id uuid) TO anon;
GRANT ALL ON FUNCTION public.get_payer_risk_assessment_with_user_data(p_payer_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.get_payer_risk_assessment_with_user_data(p_payer_id uuid) TO service_role;
GRANT ALL ON FUNCTION public.get_payer_risk_assessment_with_user_data(p_payer_id uuid) TO prisma;


--
-- Name: FUNCTION get_product_id_for_project(p_project_id uuid); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.get_product_id_for_project(p_project_id uuid) TO anon;
GRANT ALL ON FUNCTION public.get_product_id_for_project(p_project_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.get_product_id_for_project(p_project_id uuid) TO service_role;
GRANT ALL ON FUNCTION public.get_product_id_for_project(p_project_id uuid) TO prisma;


--
-- Name: FUNCTION get_product_table_name(p_product_type text); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.get_product_table_name(p_product_type text) TO anon;
GRANT ALL ON FUNCTION public.get_product_table_name(p_product_type text) TO authenticated;
GRANT ALL ON FUNCTION public.get_product_table_name(p_product_type text) TO service_role;
GRANT ALL ON FUNCTION public.get_product_table_name(p_product_type text) TO prisma;


--
-- Name: FUNCTION get_project_target_raise(p_project_id uuid); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.get_project_target_raise(p_project_id uuid) TO anon;
GRANT ALL ON FUNCTION public.get_project_target_raise(p_project_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.get_project_target_raise(p_project_id uuid) TO service_role;
GRANT ALL ON FUNCTION public.get_project_target_raise(p_project_id uuid) TO prisma;


--
-- Name: FUNCTION get_recent_activities(days_back integer); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.get_recent_activities(days_back integer) TO anon;
GRANT ALL ON FUNCTION public.get_recent_activities(days_back integer) TO authenticated;
GRANT ALL ON FUNCTION public.get_recent_activities(days_back integer) TO service_role;
GRANT ALL ON FUNCTION public.get_recent_activities(days_back integer) TO prisma;


--
-- Name: FUNCTION get_redemption_capacity(p_redemption_rule_id uuid); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.get_redemption_capacity(p_redemption_rule_id uuid) TO anon;
GRANT ALL ON FUNCTION public.get_redemption_capacity(p_redemption_rule_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.get_redemption_capacity(p_redemption_rule_id uuid) TO service_role;
GRANT ALL ON FUNCTION public.get_redemption_capacity(p_redemption_rule_id uuid) TO prisma;


--
-- Name: FUNCTION get_redemption_rule_product_details(p_redemption_rule_id uuid); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.get_redemption_rule_product_details(p_redemption_rule_id uuid) TO anon;
GRANT ALL ON FUNCTION public.get_redemption_rule_product_details(p_redemption_rule_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.get_redemption_rule_product_details(p_redemption_rule_id uuid) TO service_role;
GRANT ALL ON FUNCTION public.get_redemption_rule_product_details(p_redemption_rule_id uuid) TO prisma;


--
-- Name: FUNCTION get_redemption_rules_by_product_type(p_product_type text); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.get_redemption_rules_by_product_type(p_product_type text) TO anon;
GRANT ALL ON FUNCTION public.get_redemption_rules_by_product_type(p_product_type text) TO authenticated;
GRANT ALL ON FUNCTION public.get_redemption_rules_by_product_type(p_product_type text) TO service_role;
GRANT ALL ON FUNCTION public.get_redemption_rules_by_product_type(p_product_type text) TO prisma;


--
-- Name: FUNCTION get_redemption_rules_near_capacity(p_threshold_percentage numeric); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.get_redemption_rules_near_capacity(p_threshold_percentage numeric) TO anon;
GRANT ALL ON FUNCTION public.get_redemption_rules_near_capacity(p_threshold_percentage numeric) TO authenticated;
GRANT ALL ON FUNCTION public.get_redemption_rules_near_capacity(p_threshold_percentage numeric) TO service_role;
GRANT ALL ON FUNCTION public.get_redemption_rules_near_capacity(p_threshold_percentage numeric) TO prisma;


--
-- Name: FUNCTION get_table_row_counts(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.get_table_row_counts() TO anon;
GRANT ALL ON FUNCTION public.get_table_row_counts() TO authenticated;
GRANT ALL ON FUNCTION public.get_table_row_counts() TO service_role;
GRANT ALL ON FUNCTION public.get_table_row_counts() TO prisma;


--
-- Name: FUNCTION get_token_whitelist_addresses(p_token_id uuid); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.get_token_whitelist_addresses(p_token_id uuid) TO anon;
GRANT ALL ON FUNCTION public.get_token_whitelist_addresses(p_token_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.get_token_whitelist_addresses(p_token_id uuid) TO service_role;
GRANT ALL ON FUNCTION public.get_token_whitelist_addresses(p_token_id uuid) TO prisma;


--
-- Name: FUNCTION get_total_redemption_capacity(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.get_total_redemption_capacity() TO anon;
GRANT ALL ON FUNCTION public.get_total_redemption_capacity() TO authenticated;
GRANT ALL ON FUNCTION public.get_total_redemption_capacity() TO service_role;
GRANT ALL ON FUNCTION public.get_total_redemption_capacity() TO prisma;


--
-- Name: FUNCTION get_unique_group_memberships(investor_ids text[]); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.get_unique_group_memberships(investor_ids text[]) TO anon;
GRANT ALL ON FUNCTION public.get_unique_group_memberships(investor_ids text[]) TO authenticated;
GRANT ALL ON FUNCTION public.get_unique_group_memberships(investor_ids text[]) TO service_role;
GRANT ALL ON FUNCTION public.get_unique_group_memberships(investor_ids text[]) TO prisma;


--
-- Name: FUNCTION get_unique_member_count(group_id_param text); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.get_unique_member_count(group_id_param text) TO anon;
GRANT ALL ON FUNCTION public.get_unique_member_count(group_id_param text) TO authenticated;
GRANT ALL ON FUNCTION public.get_unique_member_count(group_id_param text) TO service_role;
GRANT ALL ON FUNCTION public.get_unique_member_count(group_id_param text) TO prisma;


--
-- Name: FUNCTION get_user_profile(user_auth_id uuid); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.get_user_profile(user_auth_id uuid) TO anon;
GRANT ALL ON FUNCTION public.get_user_profile(user_auth_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.get_user_profile(user_auth_id uuid) TO service_role;
GRANT ALL ON FUNCTION public.get_user_profile(user_auth_id uuid) TO prisma;


--
-- Name: FUNCTION get_users_by_role_for_approval(role_names text[]); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.get_users_by_role_for_approval(role_names text[]) TO anon;
GRANT ALL ON FUNCTION public.get_users_by_role_for_approval(role_names text[]) TO authenticated;
GRANT ALL ON FUNCTION public.get_users_by_role_for_approval(role_names text[]) TO service_role;
GRANT ALL ON FUNCTION public.get_users_by_role_for_approval(role_names text[]) TO prisma;


--
-- Name: FUNCTION get_users_with_any_permission(permission_names text[]); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.get_users_with_any_permission(permission_names text[]) TO anon;
GRANT ALL ON FUNCTION public.get_users_with_any_permission(permission_names text[]) TO authenticated;
GRANT ALL ON FUNCTION public.get_users_with_any_permission(permission_names text[]) TO service_role;
GRANT ALL ON FUNCTION public.get_users_with_any_permission(permission_names text[]) TO prisma;


--
-- Name: FUNCTION get_users_with_permission(permission_name text); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.get_users_with_permission(permission_name text) TO anon;
GRANT ALL ON FUNCTION public.get_users_with_permission(permission_name text) TO authenticated;
GRANT ALL ON FUNCTION public.get_users_with_permission(permission_name text) TO service_role;
GRANT ALL ON FUNCTION public.get_users_with_permission(permission_name text) TO prisma;


--
-- Name: FUNCTION get_users_with_permission_simple(p_permission_id text); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.get_users_with_permission_simple(p_permission_id text) TO anon;
GRANT ALL ON FUNCTION public.get_users_with_permission_simple(p_permission_id text) TO authenticated;
GRANT ALL ON FUNCTION public.get_users_with_permission_simple(p_permission_id text) TO service_role;
GRANT ALL ON FUNCTION public.get_users_with_permission_simple(p_permission_id text) TO prisma;


--
-- Name: FUNCTION handle_auth_user_created(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.handle_auth_user_created() TO anon;
GRANT ALL ON FUNCTION public.handle_auth_user_created() TO authenticated;
GRANT ALL ON FUNCTION public.handle_auth_user_created() TO service_role;
GRANT ALL ON FUNCTION public.handle_auth_user_created() TO prisma;


--
-- Name: FUNCTION handle_new_auth_user(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.handle_new_auth_user() TO anon;
GRANT ALL ON FUNCTION public.handle_new_auth_user() TO authenticated;
GRANT ALL ON FUNCTION public.handle_new_auth_user() TO service_role;
GRANT ALL ON FUNCTION public.handle_new_auth_user() TO prisma;


--
-- Name: FUNCTION handle_rule_rejection(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.handle_rule_rejection() TO anon;
GRANT ALL ON FUNCTION public.handle_rule_rejection() TO authenticated;
GRANT ALL ON FUNCTION public.handle_rule_rejection() TO service_role;
GRANT ALL ON FUNCTION public.handle_rule_rejection() TO prisma;


--
-- Name: FUNCTION handle_token_allocation_deletion(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.handle_token_allocation_deletion() TO anon;
GRANT ALL ON FUNCTION public.handle_token_allocation_deletion() TO authenticated;
GRANT ALL ON FUNCTION public.handle_token_allocation_deletion() TO service_role;
GRANT ALL ON FUNCTION public.handle_token_allocation_deletion() TO prisma;


--
-- Name: FUNCTION handle_token_distribution(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.handle_token_distribution() TO anon;
GRANT ALL ON FUNCTION public.handle_token_distribution() TO authenticated;
GRANT ALL ON FUNCTION public.handle_token_distribution() TO service_role;
GRANT ALL ON FUNCTION public.handle_token_distribution() TO prisma;


--
-- Name: FUNCTION handle_user_deletion(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.handle_user_deletion() TO anon;
GRANT ALL ON FUNCTION public.handle_user_deletion() TO authenticated;
GRANT ALL ON FUNCTION public.handle_user_deletion() TO service_role;
GRANT ALL ON FUNCTION public.handle_user_deletion() TO prisma;


--
-- Name: FUNCTION insert_energy_asset_safe(p_name character varying, p_type character varying, p_location character varying, p_capacity numeric, p_owner_id uuid); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.insert_energy_asset_safe(p_name character varying, p_type character varying, p_location character varying, p_capacity numeric, p_owner_id uuid) TO anon;
GRANT ALL ON FUNCTION public.insert_energy_asset_safe(p_name character varying, p_type character varying, p_location character varying, p_capacity numeric, p_owner_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.insert_energy_asset_safe(p_name character varying, p_type character varying, p_location character varying, p_capacity numeric, p_owner_id uuid) TO service_role;
GRANT ALL ON FUNCTION public.insert_energy_asset_safe(p_name character varying, p_type character varying, p_location character varying, p_capacity numeric, p_owner_id uuid) TO prisma;


--
-- Name: FUNCTION insert_policy_approver(p_policy_id uuid, p_user_id text, p_created_by text); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.insert_policy_approver(p_policy_id uuid, p_user_id text, p_created_by text) TO anon;
GRANT ALL ON FUNCTION public.insert_policy_approver(p_policy_id uuid, p_user_id text, p_created_by text) TO authenticated;
GRANT ALL ON FUNCTION public.insert_policy_approver(p_policy_id uuid, p_user_id text, p_created_by text) TO service_role;
GRANT ALL ON FUNCTION public.insert_policy_approver(p_policy_id uuid, p_user_id text, p_created_by text) TO prisma;


--
-- Name: FUNCTION insert_token_properties(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.insert_token_properties() TO anon;
GRANT ALL ON FUNCTION public.insert_token_properties() TO authenticated;
GRANT ALL ON FUNCTION public.insert_token_properties() TO service_role;
GRANT ALL ON FUNCTION public.insert_token_properties() TO prisma;


--
-- Name: FUNCTION is_address_whitelisted(p_token_id uuid, p_address text); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.is_address_whitelisted(p_token_id uuid, p_address text) TO anon;
GRANT ALL ON FUNCTION public.is_address_whitelisted(p_token_id uuid, p_address text) TO authenticated;
GRANT ALL ON FUNCTION public.is_address_whitelisted(p_token_id uuid, p_address text) TO service_role;
GRANT ALL ON FUNCTION public.is_address_whitelisted(p_token_id uuid, p_address text) TO prisma;


--
-- Name: FUNCTION link_redemption_request_to_window(request_id uuid, window_id uuid); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.link_redemption_request_to_window(request_id uuid, window_id uuid) TO anon;
GRANT ALL ON FUNCTION public.link_redemption_request_to_window(request_id uuid, window_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.link_redemption_request_to_window(request_id uuid, window_id uuid) TO service_role;
GRANT ALL ON FUNCTION public.link_redemption_request_to_window(request_id uuid, window_id uuid) TO prisma;


--
-- Name: FUNCTION list_tables(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.list_tables() TO anon;
GRANT ALL ON FUNCTION public.list_tables() TO authenticated;
GRANT ALL ON FUNCTION public.list_tables() TO service_role;
GRANT ALL ON FUNCTION public.list_tables() TO prisma;


--
-- Name: FUNCTION log_approval_config_changes(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.log_approval_config_changes() TO anon;
GRANT ALL ON FUNCTION public.log_approval_config_changes() TO authenticated;
GRANT ALL ON FUNCTION public.log_approval_config_changes() TO service_role;
GRANT ALL ON FUNCTION public.log_approval_config_changes() TO prisma;


--
-- Name: FUNCTION log_approver_assignment_changes(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.log_approver_assignment_changes() TO anon;
GRANT ALL ON FUNCTION public.log_approver_assignment_changes() TO authenticated;
GRANT ALL ON FUNCTION public.log_approver_assignment_changes() TO service_role;
GRANT ALL ON FUNCTION public.log_approver_assignment_changes() TO prisma;


--
-- Name: FUNCTION log_audit(p_action text, p_user_id uuid, p_entity_type text, p_entity_id text, p_details text, p_status text, p_metadata jsonb, p_old_data jsonb, p_new_data jsonb); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.log_audit(p_action text, p_user_id uuid, p_entity_type text, p_entity_id text, p_details text, p_status text, p_metadata jsonb, p_old_data jsonb, p_new_data jsonb) TO anon;
GRANT ALL ON FUNCTION public.log_audit(p_action text, p_user_id uuid, p_entity_type text, p_entity_id text, p_details text, p_status text, p_metadata jsonb, p_old_data jsonb, p_new_data jsonb) TO authenticated;
GRANT ALL ON FUNCTION public.log_audit(p_action text, p_user_id uuid, p_entity_type text, p_entity_id text, p_details text, p_status text, p_metadata jsonb, p_old_data jsonb, p_new_data jsonb) TO service_role;
GRANT ALL ON FUNCTION public.log_audit(p_action text, p_user_id uuid, p_entity_type text, p_entity_id text, p_details text, p_status text, p_metadata jsonb, p_old_data jsonb, p_new_data jsonb) TO prisma;


--
-- Name: FUNCTION log_auth_event(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.log_auth_event() TO anon;
GRANT ALL ON FUNCTION public.log_auth_event() TO authenticated;
GRANT ALL ON FUNCTION public.log_auth_event() TO service_role;
GRANT ALL ON FUNCTION public.log_auth_event() TO prisma;


--
-- Name: FUNCTION log_database_changes(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.log_database_changes() TO anon;
GRANT ALL ON FUNCTION public.log_database_changes() TO authenticated;
GRANT ALL ON FUNCTION public.log_database_changes() TO service_role;
GRANT ALL ON FUNCTION public.log_database_changes() TO prisma;


--
-- Name: FUNCTION log_database_operation(p_table_name text, p_operation text, p_record_id text, p_user_id uuid, p_old_data jsonb, p_new_data jsonb, p_metadata jsonb); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.log_database_operation(p_table_name text, p_operation text, p_record_id text, p_user_id uuid, p_old_data jsonb, p_new_data jsonb, p_metadata jsonb) TO anon;
GRANT ALL ON FUNCTION public.log_database_operation(p_table_name text, p_operation text, p_record_id text, p_user_id uuid, p_old_data jsonb, p_new_data jsonb, p_metadata jsonb) TO authenticated;
GRANT ALL ON FUNCTION public.log_database_operation(p_table_name text, p_operation text, p_record_id text, p_user_id uuid, p_old_data jsonb, p_new_data jsonb, p_metadata jsonb) TO service_role;
GRANT ALL ON FUNCTION public.log_database_operation(p_table_name text, p_operation text, p_record_id text, p_user_id uuid, p_old_data jsonb, p_new_data jsonb, p_metadata jsonb) TO prisma;


--
-- Name: FUNCTION log_table_change(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.log_table_change() TO anon;
GRANT ALL ON FUNCTION public.log_table_change() TO authenticated;
GRANT ALL ON FUNCTION public.log_table_change() TO service_role;
GRANT ALL ON FUNCTION public.log_table_change() TO prisma;


--
-- Name: FUNCTION log_user_action(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.log_user_action() TO anon;
GRANT ALL ON FUNCTION public.log_user_action() TO authenticated;
GRANT ALL ON FUNCTION public.log_user_action() TO service_role;
GRANT ALL ON FUNCTION public.log_user_action() TO prisma;


--
-- Name: FUNCTION migrate_token_json_to_tables(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.migrate_token_json_to_tables() TO anon;
GRANT ALL ON FUNCTION public.migrate_token_json_to_tables() TO authenticated;
GRANT ALL ON FUNCTION public.migrate_token_json_to_tables() TO service_role;
GRANT ALL ON FUNCTION public.migrate_token_json_to_tables() TO prisma;


--
-- Name: FUNCTION prevent_duplicate_lifecycle_events(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.prevent_duplicate_lifecycle_events() TO anon;
GRANT ALL ON FUNCTION public.prevent_duplicate_lifecycle_events() TO authenticated;
GRANT ALL ON FUNCTION public.prevent_duplicate_lifecycle_events() TO service_role;
GRANT ALL ON FUNCTION public.prevent_duplicate_lifecycle_events() TO prisma;


--
-- Name: FUNCTION projects_audit_function(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.projects_audit_function() TO anon;
GRANT ALL ON FUNCTION public.projects_audit_function() TO authenticated;
GRANT ALL ON FUNCTION public.projects_audit_function() TO service_role;
GRANT ALL ON FUNCTION public.projects_audit_function() TO prisma;


--
-- Name: FUNCTION projects_audit_trigger(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.projects_audit_trigger() TO anon;
GRANT ALL ON FUNCTION public.projects_audit_trigger() TO authenticated;
GRANT ALL ON FUNCTION public.projects_audit_trigger() TO service_role;
GRANT ALL ON FUNCTION public.projects_audit_trigger() TO prisma;


--
-- Name: FUNCTION purge_duplicate_lifecycle_events(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.purge_duplicate_lifecycle_events() TO anon;
GRANT ALL ON FUNCTION public.purge_duplicate_lifecycle_events() TO authenticated;
GRANT ALL ON FUNCTION public.purge_duplicate_lifecycle_events() TO service_role;
GRANT ALL ON FUNCTION public.purge_duplicate_lifecycle_events() TO prisma;


--
-- Name: FUNCTION reconcile_redemption_statistics(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.reconcile_redemption_statistics() TO anon;
GRANT ALL ON FUNCTION public.reconcile_redemption_statistics() TO authenticated;
GRANT ALL ON FUNCTION public.reconcile_redemption_statistics() TO service_role;
GRANT ALL ON FUNCTION public.reconcile_redemption_statistics() TO prisma;


--
-- Name: FUNCTION refresh_activity_metrics(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.refresh_activity_metrics() TO anon;
GRANT ALL ON FUNCTION public.refresh_activity_metrics() TO authenticated;
GRANT ALL ON FUNCTION public.refresh_activity_metrics() TO service_role;
GRANT ALL ON FUNCTION public.refresh_activity_metrics() TO prisma;


--
-- Name: FUNCTION refresh_all_redemption_window_statistics(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.refresh_all_redemption_window_statistics() TO anon;
GRANT ALL ON FUNCTION public.refresh_all_redemption_window_statistics() TO authenticated;
GRANT ALL ON FUNCTION public.refresh_all_redemption_window_statistics() TO service_role;
GRANT ALL ON FUNCTION public.refresh_all_redemption_window_statistics() TO prisma;


--
-- Name: FUNCTION remove_investors_from_group(p_group_id text, p_investor_ids text[]); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.remove_investors_from_group(p_group_id text, p_investor_ids text[]) TO anon;
GRANT ALL ON FUNCTION public.remove_investors_from_group(p_group_id text, p_investor_ids text[]) TO authenticated;
GRANT ALL ON FUNCTION public.remove_investors_from_group(p_group_id text, p_investor_ids text[]) TO service_role;
GRANT ALL ON FUNCTION public.remove_investors_from_group(p_group_id text, p_investor_ids text[]) TO prisma;


--
-- Name: FUNCTION reserve_redemption_amounts(p_distribution_ids uuid[], p_total_amount numeric); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.reserve_redemption_amounts(p_distribution_ids uuid[], p_total_amount numeric) TO anon;
GRANT ALL ON FUNCTION public.reserve_redemption_amounts(p_distribution_ids uuid[], p_total_amount numeric) TO authenticated;
GRANT ALL ON FUNCTION public.reserve_redemption_amounts(p_distribution_ids uuid[], p_total_amount numeric) TO service_role;
GRANT ALL ON FUNCTION public.reserve_redemption_amounts(p_distribution_ids uuid[], p_total_amount numeric) TO prisma;


--
-- Name: FUNCTION rollback_transaction(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.rollback_transaction() TO anon;
GRANT ALL ON FUNCTION public.rollback_transaction() TO authenticated;
GRANT ALL ON FUNCTION public.rollback_transaction() TO service_role;
GRANT ALL ON FUNCTION public.rollback_transaction() TO prisma;


--
-- Name: FUNCTION safe_cast_to_uuid(input text); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.safe_cast_to_uuid(input text) TO anon;
GRANT ALL ON FUNCTION public.safe_cast_to_uuid(input text) TO authenticated;
GRANT ALL ON FUNCTION public.safe_cast_to_uuid(input text) TO service_role;
GRANT ALL ON FUNCTION public.safe_cast_to_uuid(input text) TO prisma;


--
-- Name: FUNCTION safe_uuid_cast(text_id text); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.safe_uuid_cast(text_id text) TO anon;
GRANT ALL ON FUNCTION public.safe_uuid_cast(text_id text) TO authenticated;
GRANT ALL ON FUNCTION public.safe_uuid_cast(text_id text) TO service_role;
GRANT ALL ON FUNCTION public.safe_uuid_cast(text_id text) TO prisma;


--
-- Name: FUNCTION save_consensus_config(p_consensus_type text, p_required_approvals integer, p_eligible_roles text[]); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.save_consensus_config(p_consensus_type text, p_required_approvals integer, p_eligible_roles text[]) TO anon;
GRANT ALL ON FUNCTION public.save_consensus_config(p_consensus_type text, p_required_approvals integer, p_eligible_roles text[]) TO authenticated;
GRANT ALL ON FUNCTION public.save_consensus_config(p_consensus_type text, p_required_approvals integer, p_eligible_roles text[]) TO service_role;
GRANT ALL ON FUNCTION public.save_consensus_config(p_consensus_type text, p_required_approvals integer, p_eligible_roles text[]) TO prisma;


--
-- Name: FUNCTION save_enhanced_risk_calculation(p_receivable_id uuid, p_risk_score integer, p_discount_rate numeric, p_confidence_level numeric, p_market_adjustments jsonb, p_user_data_sources jsonb, p_data_completeness character varying, p_methodology text, p_factors_considered jsonb, p_policy_impacts jsonb, p_recommendations jsonb); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.save_enhanced_risk_calculation(p_receivable_id uuid, p_risk_score integer, p_discount_rate numeric, p_confidence_level numeric, p_market_adjustments jsonb, p_user_data_sources jsonb, p_data_completeness character varying, p_methodology text, p_factors_considered jsonb, p_policy_impacts jsonb, p_recommendations jsonb) TO anon;
GRANT ALL ON FUNCTION public.save_enhanced_risk_calculation(p_receivable_id uuid, p_risk_score integer, p_discount_rate numeric, p_confidence_level numeric, p_market_adjustments jsonb, p_user_data_sources jsonb, p_data_completeness character varying, p_methodology text, p_factors_considered jsonb, p_policy_impacts jsonb, p_recommendations jsonb) TO authenticated;
GRANT ALL ON FUNCTION public.save_enhanced_risk_calculation(p_receivable_id uuid, p_risk_score integer, p_discount_rate numeric, p_confidence_level numeric, p_market_adjustments jsonb, p_user_data_sources jsonb, p_data_completeness character varying, p_methodology text, p_factors_considered jsonb, p_policy_impacts jsonb, p_recommendations jsonb) TO service_role;
GRANT ALL ON FUNCTION public.save_enhanced_risk_calculation(p_receivable_id uuid, p_risk_score integer, p_discount_rate numeric, p_confidence_level numeric, p_market_adjustments jsonb, p_user_data_sources jsonb, p_data_completeness character varying, p_methodology text, p_factors_considered jsonb, p_policy_impacts jsonb, p_recommendations jsonb) TO prisma;


--
-- Name: FUNCTION set_distribution_standard(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.set_distribution_standard() TO anon;
GRANT ALL ON FUNCTION public.set_distribution_standard() TO authenticated;
GRANT ALL ON FUNCTION public.set_distribution_standard() TO service_role;
GRANT ALL ON FUNCTION public.set_distribution_standard() TO prisma;


--
-- Name: FUNCTION set_redemption_product_type_on_insert(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.set_redemption_product_type_on_insert() TO anon;
GRANT ALL ON FUNCTION public.set_redemption_product_type_on_insert() TO authenticated;
GRANT ALL ON FUNCTION public.set_redemption_product_type_on_insert() TO service_role;
GRANT ALL ON FUNCTION public.set_redemption_product_type_on_insert() TO prisma;


--
-- Name: FUNCTION set_token_allocation_standard(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.set_token_allocation_standard() TO anon;
GRANT ALL ON FUNCTION public.set_token_allocation_standard() TO authenticated;
GRANT ALL ON FUNCTION public.set_token_allocation_standard() TO service_role;
GRANT ALL ON FUNCTION public.set_token_allocation_standard() TO prisma;


--
-- Name: FUNCTION set_updated_at(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.set_updated_at() TO anon;
GRANT ALL ON FUNCTION public.set_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.set_updated_at() TO service_role;
GRANT ALL ON FUNCTION public.set_updated_at() TO prisma;


--
-- Name: FUNCTION sidebar_config_matches_user(config_role_ids uuid[], config_profile_enums public.profile_type[], user_role_ids uuid[], user_profile_type public.profile_type); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.sidebar_config_matches_user(config_role_ids uuid[], config_profile_enums public.profile_type[], user_role_ids uuid[], user_profile_type public.profile_type) TO anon;
GRANT ALL ON FUNCTION public.sidebar_config_matches_user(config_role_ids uuid[], config_profile_enums public.profile_type[], user_role_ids uuid[], user_profile_type public.profile_type) TO authenticated;
GRANT ALL ON FUNCTION public.sidebar_config_matches_user(config_role_ids uuid[], config_profile_enums public.profile_type[], user_role_ids uuid[], user_profile_type public.profile_type) TO service_role;
GRANT ALL ON FUNCTION public.sidebar_config_matches_user(config_role_ids uuid[], config_profile_enums public.profile_type[], user_role_ids uuid[], user_profile_type public.profile_type) TO prisma;


--
-- Name: FUNCTION sync_credential_vault_storage(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.sync_credential_vault_storage() TO anon;
GRANT ALL ON FUNCTION public.sync_credential_vault_storage() TO authenticated;
GRANT ALL ON FUNCTION public.sync_credential_vault_storage() TO service_role;
GRANT ALL ON FUNCTION public.sync_credential_vault_storage() TO prisma;


--
-- Name: FUNCTION sync_group_memberships(group_id_param text); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.sync_group_memberships(group_id_param text) TO anon;
GRANT ALL ON FUNCTION public.sync_group_memberships(group_id_param text) TO authenticated;
GRANT ALL ON FUNCTION public.sync_group_memberships(group_id_param text) TO service_role;
GRANT ALL ON FUNCTION public.sync_group_memberships(group_id_param text) TO prisma;


--
-- Name: FUNCTION sync_investor_group_memberships(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.sync_investor_group_memberships() TO anon;
GRANT ALL ON FUNCTION public.sync_investor_group_memberships() TO authenticated;
GRANT ALL ON FUNCTION public.sync_investor_group_memberships() TO service_role;
GRANT ALL ON FUNCTION public.sync_investor_group_memberships() TO prisma;


--
-- Name: FUNCTION sync_redemption_product_type(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.sync_redemption_product_type() TO anon;
GRANT ALL ON FUNCTION public.sync_redemption_product_type() TO authenticated;
GRANT ALL ON FUNCTION public.sync_redemption_product_type() TO service_role;
GRANT ALL ON FUNCTION public.sync_redemption_product_type() TO prisma;


--
-- Name: FUNCTION sync_redemption_rules_on_product_change(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.sync_redemption_rules_on_product_change() TO anon;
GRANT ALL ON FUNCTION public.sync_redemption_rules_on_product_change() TO authenticated;
GRANT ALL ON FUNCTION public.sync_redemption_rules_on_product_change() TO service_role;
GRANT ALL ON FUNCTION public.sync_redemption_rules_on_product_change() TO prisma;


--
-- Name: FUNCTION sync_redemption_target_raise_on_product_change(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.sync_redemption_target_raise_on_product_change() TO anon;
GRANT ALL ON FUNCTION public.sync_redemption_target_raise_on_product_change() TO authenticated;
GRANT ALL ON FUNCTION public.sync_redemption_target_raise_on_product_change() TO service_role;
GRANT ALL ON FUNCTION public.sync_redemption_target_raise_on_product_change() TO prisma;


--
-- Name: FUNCTION sync_user_to_profile(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.sync_user_to_profile() TO anon;
GRANT ALL ON FUNCTION public.sync_user_to_profile() TO authenticated;
GRANT ALL ON FUNCTION public.sync_user_to_profile() TO service_role;
GRANT ALL ON FUNCTION public.sync_user_to_profile() TO prisma;


--
-- Name: FUNCTION table_exists(p_schema_name text, p_table_name text); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.table_exists(p_schema_name text, p_table_name text) TO anon;
GRANT ALL ON FUNCTION public.table_exists(p_schema_name text, p_table_name text) TO authenticated;
GRANT ALL ON FUNCTION public.table_exists(p_schema_name text, p_table_name text) TO service_role;
GRANT ALL ON FUNCTION public.table_exists(p_schema_name text, p_table_name text) TO prisma;


--
-- Name: FUNCTION track_system_process(process_name text, description text, metadata jsonb); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.track_system_process(process_name text, description text, metadata jsonb) TO anon;
GRANT ALL ON FUNCTION public.track_system_process(process_name text, description text, metadata jsonb) TO authenticated;
GRANT ALL ON FUNCTION public.track_system_process(process_name text, description text, metadata jsonb) TO service_role;
GRANT ALL ON FUNCTION public.track_system_process(process_name text, description text, metadata jsonb) TO prisma;


--
-- Name: FUNCTION trigger_set_updated_at(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.trigger_set_updated_at() TO anon;
GRANT ALL ON FUNCTION public.trigger_set_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.trigger_set_updated_at() TO service_role;
GRANT ALL ON FUNCTION public.trigger_set_updated_at() TO prisma;


--
-- Name: FUNCTION trigger_update_redemption_statistics(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.trigger_update_redemption_statistics() TO anon;
GRANT ALL ON FUNCTION public.trigger_update_redemption_statistics() TO authenticated;
GRANT ALL ON FUNCTION public.trigger_update_redemption_statistics() TO service_role;
GRANT ALL ON FUNCTION public.trigger_update_redemption_statistics() TO prisma;


--
-- Name: FUNCTION universal_update_timestamp(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.universal_update_timestamp() TO anon;
GRANT ALL ON FUNCTION public.universal_update_timestamp() TO authenticated;
GRANT ALL ON FUNCTION public.universal_update_timestamp() TO service_role;
GRANT ALL ON FUNCTION public.universal_update_timestamp() TO prisma;


--
-- Name: FUNCTION update_bulk_operation_progress(p_operation_id text, p_progress double precision, p_processed_count integer, p_failed_count integer, p_status character varying); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_bulk_operation_progress(p_operation_id text, p_progress double precision, p_processed_count integer, p_failed_count integer, p_status character varying) TO anon;
GRANT ALL ON FUNCTION public.update_bulk_operation_progress(p_operation_id text, p_progress double precision, p_processed_count integer, p_failed_count integer, p_status character varying) TO authenticated;
GRANT ALL ON FUNCTION public.update_bulk_operation_progress(p_operation_id text, p_progress double precision, p_processed_count integer, p_failed_count integer, p_status character varying) TO service_role;
GRANT ALL ON FUNCTION public.update_bulk_operation_progress(p_operation_id text, p_progress double precision, p_processed_count integer, p_failed_count integer, p_status character varying) TO prisma;


--
-- Name: FUNCTION update_cache_access(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_cache_access() TO anon;
GRANT ALL ON FUNCTION public.update_cache_access() TO authenticated;
GRANT ALL ON FUNCTION public.update_cache_access() TO service_role;
GRANT ALL ON FUNCTION public.update_cache_access() TO prisma;


--
-- Name: FUNCTION update_climate_cash_flow_projections(p_projections jsonb); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_climate_cash_flow_projections(p_projections jsonb) TO anon;
GRANT ALL ON FUNCTION public.update_climate_cash_flow_projections(p_projections jsonb) TO authenticated;
GRANT ALL ON FUNCTION public.update_climate_cash_flow_projections(p_projections jsonb) TO service_role;
GRANT ALL ON FUNCTION public.update_climate_cash_flow_projections(p_projections jsonb) TO prisma;


--
-- Name: FUNCTION update_climate_risk_calculations_updated_at(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_climate_risk_calculations_updated_at() TO anon;
GRANT ALL ON FUNCTION public.update_climate_risk_calculations_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.update_climate_risk_calculations_updated_at() TO service_role;
GRANT ALL ON FUNCTION public.update_climate_risk_calculations_updated_at() TO prisma;


--
-- Name: FUNCTION update_consensus_settings_updated_at(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_consensus_settings_updated_at() TO anon;
GRANT ALL ON FUNCTION public.update_consensus_settings_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.update_consensus_settings_updated_at() TO service_role;
GRANT ALL ON FUNCTION public.update_consensus_settings_updated_at() TO prisma;


--
-- Name: FUNCTION update_credential_vault_storage_timestamp(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_credential_vault_storage_timestamp() TO anon;
GRANT ALL ON FUNCTION public.update_credential_vault_storage_timestamp() TO authenticated;
GRANT ALL ON FUNCTION public.update_credential_vault_storage_timestamp() TO service_role;
GRANT ALL ON FUNCTION public.update_credential_vault_storage_timestamp() TO prisma;


--
-- Name: FUNCTION update_distribution_remaining_amount(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_distribution_remaining_amount() TO anon;
GRANT ALL ON FUNCTION public.update_distribution_remaining_amount() TO authenticated;
GRANT ALL ON FUNCTION public.update_distribution_remaining_amount() TO service_role;
GRANT ALL ON FUNCTION public.update_distribution_remaining_amount() TO prisma;


--
-- Name: FUNCTION update_energy_assets_updated_at(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_energy_assets_updated_at() TO anon;
GRANT ALL ON FUNCTION public.update_energy_assets_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.update_energy_assets_updated_at() TO service_role;
GRANT ALL ON FUNCTION public.update_energy_assets_updated_at() TO prisma;


--
-- Name: FUNCTION update_group_member_count(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_group_member_count() TO anon;
GRANT ALL ON FUNCTION public.update_group_member_count() TO authenticated;
GRANT ALL ON FUNCTION public.update_group_member_count() TO service_role;
GRANT ALL ON FUNCTION public.update_group_member_count() TO prisma;


--
-- Name: FUNCTION update_individual_documents_updated_at(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_individual_documents_updated_at() TO anon;
GRANT ALL ON FUNCTION public.update_individual_documents_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.update_individual_documents_updated_at() TO service_role;
GRANT ALL ON FUNCTION public.update_individual_documents_updated_at() TO prisma;


--
-- Name: FUNCTION update_modified_column(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_modified_column() TO anon;
GRANT ALL ON FUNCTION public.update_modified_column() TO authenticated;
GRANT ALL ON FUNCTION public.update_modified_column() TO service_role;
GRANT ALL ON FUNCTION public.update_modified_column() TO prisma;


--
-- Name: FUNCTION update_oracle_prices(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_oracle_prices() TO anon;
GRANT ALL ON FUNCTION public.update_oracle_prices() TO authenticated;
GRANT ALL ON FUNCTION public.update_oracle_prices() TO service_role;
GRANT ALL ON FUNCTION public.update_oracle_prices() TO prisma;


--
-- Name: FUNCTION update_project_organization_assignments_timestamp(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_project_organization_assignments_timestamp() TO anon;
GRANT ALL ON FUNCTION public.update_project_organization_assignments_timestamp() TO authenticated;
GRANT ALL ON FUNCTION public.update_project_organization_assignments_timestamp() TO service_role;
GRANT ALL ON FUNCTION public.update_project_organization_assignments_timestamp() TO prisma;


--
-- Name: FUNCTION update_redemption_approvers_updated_at(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_redemption_approvers_updated_at() TO anon;
GRANT ALL ON FUNCTION public.update_redemption_approvers_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.update_redemption_approvers_updated_at() TO service_role;
GRANT ALL ON FUNCTION public.update_redemption_approvers_updated_at() TO prisma;


--
-- Name: FUNCTION update_redemption_window_statistics(window_uuid uuid); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_redemption_window_statistics(window_uuid uuid) TO anon;
GRANT ALL ON FUNCTION public.update_redemption_window_statistics(window_uuid uuid) TO authenticated;
GRANT ALL ON FUNCTION public.update_redemption_window_statistics(window_uuid uuid) TO service_role;
GRANT ALL ON FUNCTION public.update_redemption_window_statistics(window_uuid uuid) TO prisma;


--
-- Name: FUNCTION update_redemption_window_timestamp(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_redemption_window_timestamp() TO anon;
GRANT ALL ON FUNCTION public.update_redemption_window_timestamp() TO authenticated;
GRANT ALL ON FUNCTION public.update_redemption_window_timestamp() TO service_role;
GRANT ALL ON FUNCTION public.update_redemption_window_timestamp() TO prisma;


--
-- Name: FUNCTION update_restriction_rules_updated_at(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_restriction_rules_updated_at() TO anon;
GRANT ALL ON FUNCTION public.update_restriction_rules_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.update_restriction_rules_updated_at() TO service_role;
GRANT ALL ON FUNCTION public.update_restriction_rules_updated_at() TO prisma;


--
-- Name: FUNCTION update_rules_updated_at(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_rules_updated_at() TO anon;
GRANT ALL ON FUNCTION public.update_rules_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.update_rules_updated_at() TO service_role;
GRANT ALL ON FUNCTION public.update_rules_updated_at() TO prisma;


--
-- Name: FUNCTION update_security_events_updated_at(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_security_events_updated_at() TO anon;
GRANT ALL ON FUNCTION public.update_security_events_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.update_security_events_updated_at() TO service_role;
GRANT ALL ON FUNCTION public.update_security_events_updated_at() TO prisma;


--
-- Name: FUNCTION update_settlement_status(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_settlement_status() TO anon;
GRANT ALL ON FUNCTION public.update_settlement_status() TO authenticated;
GRANT ALL ON FUNCTION public.update_settlement_status() TO service_role;
GRANT ALL ON FUNCTION public.update_settlement_status() TO prisma;


--
-- Name: FUNCTION update_sidebar_configurations_updated_at(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_sidebar_configurations_updated_at() TO anon;
GRANT ALL ON FUNCTION public.update_sidebar_configurations_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.update_sidebar_configurations_updated_at() TO service_role;
GRANT ALL ON FUNCTION public.update_sidebar_configurations_updated_at() TO prisma;


--
-- Name: FUNCTION update_sidebar_items_updated_at(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_sidebar_items_updated_at() TO anon;
GRANT ALL ON FUNCTION public.update_sidebar_items_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.update_sidebar_items_updated_at() TO service_role;
GRANT ALL ON FUNCTION public.update_sidebar_items_updated_at() TO prisma;


--
-- Name: FUNCTION update_sidebar_sections_updated_at(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_sidebar_sections_updated_at() TO anon;
GRANT ALL ON FUNCTION public.update_sidebar_sections_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.update_sidebar_sections_updated_at() TO service_role;
GRANT ALL ON FUNCTION public.update_sidebar_sections_updated_at() TO prisma;


--
-- Name: FUNCTION update_signature_migrations_updated_at(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_signature_migrations_updated_at() TO anon;
GRANT ALL ON FUNCTION public.update_signature_migrations_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.update_signature_migrations_updated_at() TO service_role;
GRANT ALL ON FUNCTION public.update_signature_migrations_updated_at() TO prisma;


--
-- Name: FUNCTION update_smart_contract_wallet_updated_at(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_smart_contract_wallet_updated_at() TO anon;
GRANT ALL ON FUNCTION public.update_smart_contract_wallet_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.update_smart_contract_wallet_updated_at() TO service_role;
GRANT ALL ON FUNCTION public.update_smart_contract_wallet_updated_at() TO prisma;


--
-- Name: FUNCTION update_stripe_conversion_transactions_updated_at(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_stripe_conversion_transactions_updated_at() TO anon;
GRANT ALL ON FUNCTION public.update_stripe_conversion_transactions_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.update_stripe_conversion_transactions_updated_at() TO service_role;
GRANT ALL ON FUNCTION public.update_stripe_conversion_transactions_updated_at() TO prisma;


--
-- Name: FUNCTION update_stripe_stablecoin_accounts_updated_at(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_stripe_stablecoin_accounts_updated_at() TO anon;
GRANT ALL ON FUNCTION public.update_stripe_stablecoin_accounts_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.update_stripe_stablecoin_accounts_updated_at() TO service_role;
GRANT ALL ON FUNCTION public.update_stripe_stablecoin_accounts_updated_at() TO prisma;


--
-- Name: FUNCTION update_system_process_progress(p_process_id text, p_progress double precision, p_processed_count integer, p_status character varying); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_system_process_progress(p_process_id text, p_progress double precision, p_processed_count integer, p_status character varying) TO anon;
GRANT ALL ON FUNCTION public.update_system_process_progress(p_process_id text, p_progress double precision, p_processed_count integer, p_status character varying) TO authenticated;
GRANT ALL ON FUNCTION public.update_system_process_progress(p_process_id text, p_progress double precision, p_processed_count integer, p_status character varying) TO service_role;
GRANT ALL ON FUNCTION public.update_system_process_progress(p_process_id text, p_progress double precision, p_processed_count integer, p_status character varying) TO prisma;


--
-- Name: FUNCTION update_system_process_status(process_id uuid, new_status text, error_details text); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_system_process_status(process_id uuid, new_status text, error_details text) TO anon;
GRANT ALL ON FUNCTION public.update_system_process_status(process_id uuid, new_status text, error_details text) TO authenticated;
GRANT ALL ON FUNCTION public.update_system_process_status(process_id uuid, new_status text, error_details text) TO service_role;
GRANT ALL ON FUNCTION public.update_system_process_status(process_id uuid, new_status text, error_details text) TO prisma;


--
-- Name: FUNCTION update_timestamp(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_timestamp() TO anon;
GRANT ALL ON FUNCTION public.update_timestamp() TO authenticated;
GRANT ALL ON FUNCTION public.update_timestamp() TO service_role;
GRANT ALL ON FUNCTION public.update_timestamp() TO prisma;


--
-- Name: FUNCTION update_timestamp_column(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_timestamp_column() TO anon;
GRANT ALL ON FUNCTION public.update_timestamp_column() TO authenticated;
GRANT ALL ON FUNCTION public.update_timestamp_column() TO service_role;
GRANT ALL ON FUNCTION public.update_timestamp_column() TO prisma;


--
-- Name: FUNCTION update_total_assets(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_total_assets() TO anon;
GRANT ALL ON FUNCTION public.update_total_assets() TO authenticated;
GRANT ALL ON FUNCTION public.update_total_assets() TO service_role;
GRANT ALL ON FUNCTION public.update_total_assets() TO prisma;


--
-- Name: FUNCTION update_updated_at_column(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_updated_at_column() TO anon;
GRANT ALL ON FUNCTION public.update_updated_at_column() TO authenticated;
GRANT ALL ON FUNCTION public.update_updated_at_column() TO service_role;
GRANT ALL ON FUNCTION public.update_updated_at_column() TO prisma;


--
-- Name: FUNCTION update_user_role(p_user_id uuid, p_role text); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_user_role(p_user_id uuid, p_role text) TO anon;
GRANT ALL ON FUNCTION public.update_user_role(p_user_id uuid, p_role text) TO authenticated;
GRANT ALL ON FUNCTION public.update_user_role(p_user_id uuid, p_role text) TO service_role;
GRANT ALL ON FUNCTION public.update_user_role(p_user_id uuid, p_role text) TO prisma;


--
-- Name: FUNCTION update_user_sidebar_preferences_updated_at(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_user_sidebar_preferences_updated_at() TO anon;
GRANT ALL ON FUNCTION public.update_user_sidebar_preferences_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.update_user_sidebar_preferences_updated_at() TO service_role;
GRANT ALL ON FUNCTION public.update_user_sidebar_preferences_updated_at() TO prisma;


--
-- Name: FUNCTION update_wallet_locks_updated_at(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_wallet_locks_updated_at() TO anon;
GRANT ALL ON FUNCTION public.update_wallet_locks_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.update_wallet_locks_updated_at() TO service_role;
GRANT ALL ON FUNCTION public.update_wallet_locks_updated_at() TO prisma;


--
-- Name: FUNCTION update_wallet_signatories_updated_at(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_wallet_signatories_updated_at() TO anon;
GRANT ALL ON FUNCTION public.update_wallet_signatories_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.update_wallet_signatories_updated_at() TO service_role;
GRANT ALL ON FUNCTION public.update_wallet_signatories_updated_at() TO prisma;


--
-- Name: FUNCTION update_wallet_transaction_drafts_updated_at(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_wallet_transaction_drafts_updated_at() TO anon;
GRANT ALL ON FUNCTION public.update_wallet_transaction_drafts_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.update_wallet_transaction_drafts_updated_at() TO service_role;
GRANT ALL ON FUNCTION public.update_wallet_transaction_drafts_updated_at() TO prisma;


--
-- Name: FUNCTION update_whitelist_entries_updated_at(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.update_whitelist_entries_updated_at() TO anon;
GRANT ALL ON FUNCTION public.update_whitelist_entries_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.update_whitelist_entries_updated_at() TO service_role;
GRANT ALL ON FUNCTION public.update_whitelist_entries_updated_at() TO prisma;


--
-- Name: FUNCTION upsert_policy_template_approver(p_template_id uuid, p_user_id uuid, p_created_by text, p_status text); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.upsert_policy_template_approver(p_template_id uuid, p_user_id uuid, p_created_by text, p_status text) TO anon;
GRANT ALL ON FUNCTION public.upsert_policy_template_approver(p_template_id uuid, p_user_id uuid, p_created_by text, p_status text) TO authenticated;
GRANT ALL ON FUNCTION public.upsert_policy_template_approver(p_template_id uuid, p_user_id uuid, p_created_by text, p_status text) TO service_role;
GRANT ALL ON FUNCTION public.upsert_policy_template_approver(p_template_id uuid, p_user_id uuid, p_created_by text, p_status text) TO prisma;


--
-- Name: FUNCTION user_has_delete_permission(p_user_id uuid); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.user_has_delete_permission(p_user_id uuid) TO anon;
GRANT ALL ON FUNCTION public.user_has_delete_permission(p_user_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.user_has_delete_permission(p_user_id uuid) TO service_role;
GRANT ALL ON FUNCTION public.user_has_delete_permission(p_user_id uuid) TO prisma;


--
-- Name: FUNCTION validate_blockchain_address(blockchain text, address text); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.validate_blockchain_address(blockchain text, address text) TO anon;
GRANT ALL ON FUNCTION public.validate_blockchain_address(blockchain text, address text) TO authenticated;
GRANT ALL ON FUNCTION public.validate_blockchain_address(blockchain text, address text) TO service_role;
GRANT ALL ON FUNCTION public.validate_blockchain_address(blockchain text, address text) TO prisma;


--
-- Name: FUNCTION validate_geographic_restriction(p_token_id uuid, p_investor_country_code character, p_investment_amount numeric); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.validate_geographic_restriction(p_token_id uuid, p_investor_country_code character, p_investment_amount numeric) TO anon;
GRANT ALL ON FUNCTION public.validate_geographic_restriction(p_token_id uuid, p_investor_country_code character, p_investment_amount numeric) TO authenticated;
GRANT ALL ON FUNCTION public.validate_geographic_restriction(p_token_id uuid, p_investor_country_code character, p_investment_amount numeric) TO service_role;
GRANT ALL ON FUNCTION public.validate_geographic_restriction(p_token_id uuid, p_investor_country_code character, p_investment_amount numeric) TO prisma;


--
-- Name: FUNCTION validate_project_type(p_project_type text); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.validate_project_type(p_project_type text) TO anon;
GRANT ALL ON FUNCTION public.validate_project_type(p_project_type text) TO authenticated;
GRANT ALL ON FUNCTION public.validate_project_type(p_project_type text) TO service_role;
GRANT ALL ON FUNCTION public.validate_project_type(p_project_type text) TO prisma;


--
-- Name: FUNCTION validate_redemption_amount(p_redemption_rule_id uuid, p_requested_amount numeric); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.validate_redemption_amount(p_redemption_rule_id uuid, p_requested_amount numeric) TO anon;
GRANT ALL ON FUNCTION public.validate_redemption_amount(p_redemption_rule_id uuid, p_requested_amount numeric) TO authenticated;
GRANT ALL ON FUNCTION public.validate_redemption_amount(p_redemption_rule_id uuid, p_requested_amount numeric) TO service_role;
GRANT ALL ON FUNCTION public.validate_redemption_amount(p_redemption_rule_id uuid, p_requested_amount numeric) TO prisma;


--
-- Name: FUNCTION validate_token_data(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.validate_token_data() TO anon;
GRANT ALL ON FUNCTION public.validate_token_data() TO authenticated;
GRANT ALL ON FUNCTION public.validate_token_data() TO service_role;
GRANT ALL ON FUNCTION public.validate_token_data() TO prisma;


--
-- Name: FUNCTION validate_token_exists(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.validate_token_exists() TO anon;
GRANT ALL ON FUNCTION public.validate_token_exists() TO authenticated;
GRANT ALL ON FUNCTION public.validate_token_exists() TO service_role;
GRANT ALL ON FUNCTION public.validate_token_exists() TO prisma;


--
-- Name: FUNCTION validate_wallet_address(); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.validate_wallet_address() TO anon;
GRANT ALL ON FUNCTION public.validate_wallet_address() TO authenticated;
GRANT ALL ON FUNCTION public.validate_wallet_address() TO service_role;
GRANT ALL ON FUNCTION public.validate_wallet_address() TO prisma;


--
-- Name: FUNCTION validate_whitelist_config_permissive(config jsonb); Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON FUNCTION public.validate_whitelist_config_permissive(config jsonb) TO anon;
GRANT ALL ON FUNCTION public.validate_whitelist_config_permissive(config jsonb) TO authenticated;
GRANT ALL ON FUNCTION public.validate_whitelist_config_permissive(config jsonb) TO service_role;
GRANT ALL ON FUNCTION public.validate_whitelist_config_permissive(config jsonb) TO prisma;


--
-- Name: TABLE distributions; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.distributions TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.distributions TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.distributions TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.distributions TO prisma;


--
-- Name: TABLE redemption_rules; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_rules TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_rules TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_rules TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_rules TO prisma;


--
-- Name: TABLE redemption_eligibility; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_eligibility TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_eligibility TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_eligibility TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_eligibility TO prisma;


--
-- Name: TABLE active_redemption_opportunities; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.active_redemption_opportunities TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.active_redemption_opportunities TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.active_redemption_opportunities TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.active_redemption_opportunities TO prisma;


--
-- Name: TABLE audit_logs; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.audit_logs TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.audit_logs TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.audit_logs TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.audit_logs TO prisma;


--
-- Name: TABLE activity_analytics; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.activity_analytics TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.activity_analytics TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.activity_analytics TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.activity_analytics TO prisma;


--
-- Name: TABLE alerts; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.alerts TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.alerts TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.alerts TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.alerts TO prisma;


--
-- Name: TABLE approval_config_approvers; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.approval_config_approvers TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.approval_config_approvers TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.approval_config_approvers TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.approval_config_approvers TO prisma;


--
-- Name: TABLE approval_config_history; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.approval_config_history TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.approval_config_history TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.approval_config_history TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.approval_config_history TO prisma;


--
-- Name: TABLE approval_configs; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.approval_configs TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.approval_configs TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.approval_configs TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.approval_configs TO prisma;


--
-- Name: TABLE roles; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.roles TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.roles TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.roles TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.roles TO prisma;


--
-- Name: TABLE users; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.users TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.users TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.users TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.users TO prisma;


--
-- Name: TABLE approval_configs_with_approvers; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.approval_configs_with_approvers TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.approval_configs_with_approvers TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.approval_configs_with_approvers TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.approval_configs_with_approvers TO prisma;


--
-- Name: TABLE approval_requests; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.approval_requests TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.approval_requests TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.approval_requests TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.approval_requests TO prisma;


--
-- Name: TABLE asset_backed_products; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.asset_backed_products TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.asset_backed_products TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.asset_backed_products TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.asset_backed_products TO prisma;


--
-- Name: TABLE asset_holdings; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.asset_holdings TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.asset_holdings TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.asset_holdings TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.asset_holdings TO prisma;


--
-- Name: TABLE asset_nav_data; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.asset_nav_data TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.asset_nav_data TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.asset_nav_data TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.asset_nav_data TO prisma;


--
-- Name: TABLE audit_coverage; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.audit_coverage TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.audit_coverage TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.audit_coverage TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.audit_coverage TO prisma;


--
-- Name: TABLE auth_events; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.auth_events TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.auth_events TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.auth_events TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.auth_events TO prisma;


--
-- Name: TABLE batch_operations; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.batch_operations TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.batch_operations TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.batch_operations TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.batch_operations TO prisma;


--
-- Name: TABLE bond_products; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.bond_products TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.bond_products TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.bond_products TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.bond_products TO prisma;


--
-- Name: TABLE bulk_operations; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.bulk_operations TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.bulk_operations TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.bulk_operations TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.bulk_operations TO prisma;


--
-- Name: TABLE cap_tables; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.cap_tables TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.cap_tables TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.cap_tables TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.cap_tables TO prisma;


--
-- Name: TABLE carbon_offsets; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.carbon_offsets TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.carbon_offsets TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.carbon_offsets TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.carbon_offsets TO prisma;


--
-- Name: TABLE climate_market_data_cache; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_market_data_cache TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_market_data_cache TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_market_data_cache TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_market_data_cache TO prisma;


--
-- Name: TABLE climate_cache_performance; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_cache_performance TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_cache_performance TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_cache_performance TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_cache_performance TO prisma;


--
-- Name: TABLE climate_cash_flow_projections; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_cash_flow_projections TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_cash_flow_projections TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_cash_flow_projections TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_cash_flow_projections TO prisma;


--
-- Name: TABLE climate_cash_flow_forecast; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_cash_flow_forecast TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_cash_flow_forecast TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_cash_flow_forecast TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_cash_flow_forecast TO prisma;


--
-- Name: TABLE climate_incentives; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_incentives TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_incentives TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_incentives TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_incentives TO prisma;


--
-- Name: TABLE climate_investor_pools; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_investor_pools TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_investor_pools TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_investor_pools TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_investor_pools TO prisma;


--
-- Name: TABLE climate_pool_receivables; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_pool_receivables TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_pool_receivables TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_pool_receivables TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_pool_receivables TO prisma;


--
-- Name: TABLE climate_receivables; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_receivables TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_receivables TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_receivables TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_receivables TO prisma;


--
-- Name: TABLE climate_tokenization_pools; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_tokenization_pools TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_tokenization_pools TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_tokenization_pools TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_tokenization_pools TO prisma;


--
-- Name: TABLE climate_investor_pool_summary; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_investor_pool_summary TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_investor_pool_summary TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_investor_pool_summary TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_investor_pool_summary TO prisma;


--
-- Name: TABLE climate_nav_calculations; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_nav_calculations TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_nav_calculations TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_nav_calculations TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_nav_calculations TO prisma;


--
-- Name: TABLE climate_payers; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_payers TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_payers TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_payers TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_payers TO prisma;


--
-- Name: TABLE climate_policies; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_policies TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_policies TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_policies TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_policies TO prisma;


--
-- Name: TABLE climate_policy_impacts; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_policy_impacts TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_policy_impacts TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_policy_impacts TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_policy_impacts TO prisma;


--
-- Name: TABLE climate_pool_energy_assets; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_pool_energy_assets TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_pool_energy_assets TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_pool_energy_assets TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_pool_energy_assets TO prisma;


--
-- Name: TABLE climate_pool_incentives; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_pool_incentives TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_pool_incentives TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_pool_incentives TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_pool_incentives TO prisma;


--
-- Name: TABLE climate_pool_recs; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_pool_recs TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_pool_recs TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_pool_recs TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_pool_recs TO prisma;


--
-- Name: TABLE climate_reports; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_reports TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_reports TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_reports TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_reports TO prisma;


--
-- Name: TABLE climate_risk_calculations; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_risk_calculations TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_risk_calculations TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_risk_calculations TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_risk_calculations TO prisma;


--
-- Name: TABLE climate_risk_factors; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_risk_factors TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_risk_factors TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_risk_factors TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_risk_factors TO prisma;


--
-- Name: TABLE token_climate_properties; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_climate_properties TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_climate_properties TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_climate_properties TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_climate_properties TO prisma;


--
-- Name: TABLE tokens; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.tokens TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.tokens TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.tokens TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.tokens TO prisma;


--
-- Name: TABLE climate_token_summary; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_token_summary TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_token_summary TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_token_summary TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_token_summary TO prisma;


--
-- Name: TABLE climate_user_data_cache; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_user_data_cache TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_user_data_cache TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_user_data_cache TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_user_data_cache TO prisma;


--
-- Name: TABLE climate_user_data_sources; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_user_data_sources TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_user_data_sources TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_user_data_sources TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.climate_user_data_sources TO prisma;


--
-- Name: TABLE collectibles_products; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.collectibles_products TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.collectibles_products TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.collectibles_products TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.collectibles_products TO prisma;


--
-- Name: TABLE commodities_products; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.commodities_products TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.commodities_products TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.commodities_products TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.commodities_products TO prisma;


--
-- Name: TABLE compliance_checks; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.compliance_checks TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.compliance_checks TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.compliance_checks TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.compliance_checks TO prisma;


--
-- Name: TABLE compliance_reports; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.compliance_reports TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.compliance_reports TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.compliance_reports TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.compliance_reports TO prisma;


--
-- Name: TABLE compliance_settings; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.compliance_settings TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.compliance_settings TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.compliance_settings TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.compliance_settings TO prisma;


--
-- Name: TABLE consensus_settings; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.consensus_settings TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.consensus_settings TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.consensus_settings TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.consensus_settings TO prisma;


--
-- Name: TABLE credential_usage_logs; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.credential_usage_logs TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.credential_usage_logs TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.credential_usage_logs TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.credential_usage_logs TO prisma;


--
-- Name: TABLE data_source_mappings; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.data_source_mappings TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.data_source_mappings TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.data_source_mappings TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.data_source_mappings TO prisma;


--
-- Name: TABLE database_audit_coverage; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.database_audit_coverage TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.database_audit_coverage TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.database_audit_coverage TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.database_audit_coverage TO prisma;


--
-- Name: TABLE deployment_rate_limits; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.deployment_rate_limits TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.deployment_rate_limits TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.deployment_rate_limits TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.deployment_rate_limits TO prisma;


--
-- Name: TABLE dfns_activity_logs; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_activity_logs TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_activity_logs TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_activity_logs TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_activity_logs TO prisma;


--
-- Name: TABLE dfns_api_requests; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_api_requests TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_api_requests TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_api_requests TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_api_requests TO prisma;


--
-- Name: TABLE dfns_applications; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_applications TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_applications TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_applications TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_applications TO prisma;


--
-- Name: TABLE dfns_authentication_challenges; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_authentication_challenges TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_authentication_challenges TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_authentication_challenges TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_authentication_challenges TO prisma;


--
-- Name: TABLE dfns_broadcast_transactions; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_broadcast_transactions TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_broadcast_transactions TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_broadcast_transactions TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_broadcast_transactions TO prisma;


--
-- Name: TABLE dfns_credential_challenges; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_credential_challenges TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_credential_challenges TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_credential_challenges TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_credential_challenges TO prisma;


--
-- Name: TABLE dfns_credentials; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_credentials TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_credentials TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_credentials TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_credentials TO prisma;


--
-- Name: TABLE dfns_exchange_accounts; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_exchange_accounts TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_exchange_accounts TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_exchange_accounts TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_exchange_accounts TO prisma;


--
-- Name: TABLE dfns_exchange_balances; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_exchange_balances TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_exchange_balances TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_exchange_balances TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_exchange_balances TO prisma;


--
-- Name: TABLE dfns_exchange_integrations; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_exchange_integrations TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_exchange_integrations TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_exchange_integrations TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_exchange_integrations TO prisma;


--
-- Name: TABLE dfns_fee_sponsors; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_fee_sponsors TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_fee_sponsors TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_fee_sponsors TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_fee_sponsors TO prisma;


--
-- Name: TABLE dfns_fiat_activity_logs; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_fiat_activity_logs TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_fiat_activity_logs TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_fiat_activity_logs TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_fiat_activity_logs TO prisma;


--
-- Name: TABLE dfns_fiat_provider_configs; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_fiat_provider_configs TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_fiat_provider_configs TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_fiat_provider_configs TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_fiat_provider_configs TO prisma;


--
-- Name: TABLE dfns_fiat_quotes; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_fiat_quotes TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_fiat_quotes TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_fiat_quotes TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_fiat_quotes TO prisma;


--
-- Name: TABLE dfns_fiat_transactions; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_fiat_transactions TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_fiat_transactions TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_fiat_transactions TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_fiat_transactions TO prisma;


--
-- Name: TABLE dfns_permission_assignments; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_permission_assignments TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_permission_assignments TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_permission_assignments TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_permission_assignments TO prisma;


--
-- Name: TABLE dfns_permissions; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_permissions TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_permissions TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_permissions TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_permissions TO prisma;


--
-- Name: TABLE dfns_personal_access_tokens; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_personal_access_tokens TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_personal_access_tokens TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_personal_access_tokens TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_personal_access_tokens TO prisma;


--
-- Name: TABLE dfns_policies; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_policies TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_policies TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_policies TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_policies TO prisma;


--
-- Name: TABLE dfns_policy_approval_decisions; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_policy_approval_decisions TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_policy_approval_decisions TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_policy_approval_decisions TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_policy_approval_decisions TO prisma;


--
-- Name: TABLE dfns_policy_approval_groups; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_policy_approval_groups TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_policy_approval_groups TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_policy_approval_groups TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_policy_approval_groups TO prisma;


--
-- Name: TABLE dfns_policy_approvals; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_policy_approvals TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_policy_approvals TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_policy_approvals TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_policy_approvals TO prisma;


--
-- Name: TABLE dfns_policy_change_requests; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_policy_change_requests TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_policy_change_requests TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_policy_change_requests TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_policy_change_requests TO prisma;


--
-- Name: TABLE dfns_policy_evaluations; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_policy_evaluations TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_policy_evaluations TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_policy_evaluations TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_policy_evaluations TO prisma;


--
-- Name: TABLE dfns_service_accounts; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_service_accounts TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_service_accounts TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_service_accounts TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_service_accounts TO prisma;


--
-- Name: TABLE dfns_signatures; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_signatures TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_signatures TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_signatures TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_signatures TO prisma;


--
-- Name: TABLE dfns_signing_keys; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_signing_keys TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_signing_keys TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_signing_keys TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_signing_keys TO prisma;


--
-- Name: TABLE dfns_sponsored_fees; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_sponsored_fees TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_sponsored_fees TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_sponsored_fees TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_sponsored_fees TO prisma;


--
-- Name: TABLE dfns_staking_integrations; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_staking_integrations TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_staking_integrations TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_staking_integrations TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_staking_integrations TO prisma;


--
-- Name: TABLE dfns_sync_status; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_sync_status TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_sync_status TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_sync_status TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_sync_status TO prisma;


--
-- Name: TABLE dfns_transaction_history; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_transaction_history TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_transaction_history TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_transaction_history TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_transaction_history TO prisma;


--
-- Name: TABLE dfns_transfers; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_transfers TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_transfers TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_transfers TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_transfers TO prisma;


--
-- Name: TABLE dfns_user_action_challenges; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_user_action_challenges TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_user_action_challenges TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_user_action_challenges TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_user_action_challenges TO prisma;


--
-- Name: TABLE dfns_user_sessions; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_user_sessions TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_user_sessions TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_user_sessions TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_user_sessions TO prisma;


--
-- Name: TABLE dfns_users; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_users TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_users TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_users TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_users TO prisma;


--
-- Name: TABLE dfns_validators; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_validators TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_validators TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_validators TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_validators TO prisma;


--
-- Name: TABLE dfns_wallet_balances; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_wallet_balances TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_wallet_balances TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_wallet_balances TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_wallet_balances TO prisma;


--
-- Name: TABLE dfns_wallet_nfts; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_wallet_nfts TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_wallet_nfts TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_wallet_nfts TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_wallet_nfts TO prisma;


--
-- Name: TABLE dfns_wallets; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_wallets TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_wallets TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_wallets TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_wallets TO prisma;


--
-- Name: TABLE dfns_webhook_deliveries; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_webhook_deliveries TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_webhook_deliveries TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_webhook_deliveries TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_webhook_deliveries TO prisma;


--
-- Name: TABLE dfns_webhooks; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_webhooks TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_webhooks TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_webhooks TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.dfns_webhooks TO prisma;


--
-- Name: TABLE digital_tokenised_funds; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.digital_tokenised_funds TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.digital_tokenised_funds TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.digital_tokenised_funds TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.digital_tokenised_funds TO prisma;


--
-- Name: TABLE digital_tokenized_fund_products; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.digital_tokenized_fund_products TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.digital_tokenized_fund_products TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.digital_tokenized_fund_products TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.digital_tokenized_fund_products TO prisma;


--
-- Name: TABLE distribution_redemptions; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.distribution_redemptions TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.distribution_redemptions TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.distribution_redemptions TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.distribution_redemptions TO prisma;


--
-- Name: TABLE document_approvals; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.document_approvals TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.document_approvals TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.document_approvals TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.document_approvals TO prisma;


--
-- Name: TABLE document_versions; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.document_versions TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.document_versions TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.document_versions TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.document_versions TO prisma;


--
-- Name: TABLE document_workflows; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.document_workflows TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.document_workflows TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.document_workflows TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.document_workflows TO prisma;


--
-- Name: TABLE documents; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.documents TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.documents TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.documents TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.documents TO prisma;


--
-- Name: TABLE energy_assets; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.energy_assets TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.energy_assets TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.energy_assets TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.energy_assets TO prisma;


--
-- Name: TABLE energy_products; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.energy_products TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.energy_products TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.energy_products TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.energy_products TO prisma;


--
-- Name: TABLE equity_products; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.equity_products TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.equity_products TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.equity_products TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.equity_products TO prisma;


--
-- Name: TABLE external_api_cache; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.external_api_cache TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.external_api_cache TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.external_api_cache TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.external_api_cache TO prisma;


--
-- Name: TABLE facet_registry; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.facet_registry TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.facet_registry TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.facet_registry TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.facet_registry TO prisma;


--
-- Name: TABLE faucet_requests; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.faucet_requests TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.faucet_requests TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.faucet_requests TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.faucet_requests TO prisma;


--
-- Name: TABLE fiat_quotes; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.fiat_quotes TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.fiat_quotes TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.fiat_quotes TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.fiat_quotes TO prisma;


--
-- Name: TABLE fiat_transactions; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.fiat_transactions TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.fiat_transactions TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.fiat_transactions TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.fiat_transactions TO prisma;


--
-- Name: TABLE fund_nav_data; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.fund_nav_data TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.fund_nav_data TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.fund_nav_data TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.fund_nav_data TO prisma;


--
-- Name: TABLE fund_products; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.fund_products TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.fund_products TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.fund_products TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.fund_products TO prisma;


--
-- Name: TABLE geographic_jurisdictions; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.geographic_jurisdictions TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.geographic_jurisdictions TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.geographic_jurisdictions TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.geographic_jurisdictions TO prisma;


--
-- Name: TABLE guardian_api_tests; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.guardian_api_tests TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.guardian_api_tests TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.guardian_api_tests TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.guardian_api_tests TO prisma;


--
-- Name: TABLE guardian_operations; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.guardian_operations TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.guardian_operations TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.guardian_operations TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.guardian_operations TO prisma;


--
-- Name: TABLE guardian_wallets; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.guardian_wallets TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.guardian_wallets TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.guardian_wallets TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.guardian_wallets TO prisma;


--
-- Name: TABLE health_checks; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.health_checks TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.health_checks TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.health_checks TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.health_checks TO prisma;


--
-- Name: TABLE individual_documents; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.individual_documents TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.individual_documents TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.individual_documents TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.individual_documents TO prisma;


--
-- Name: TABLE infrastructure_products; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.infrastructure_products TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.infrastructure_products TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.infrastructure_products TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.infrastructure_products TO prisma;


--
-- Name: TABLE investor_approvals; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.investor_approvals TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.investor_approvals TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.investor_approvals TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.investor_approvals TO prisma;


--
-- Name: TABLE investor_documents; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.investor_documents TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.investor_documents TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.investor_documents TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.investor_documents TO prisma;


--
-- Name: TABLE investor_group_members; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.investor_group_members TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.investor_group_members TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.investor_group_members TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.investor_group_members TO prisma;


--
-- Name: TABLE investor_groups; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.investor_groups TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.investor_groups TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.investor_groups TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.investor_groups TO prisma;


--
-- Name: TABLE investor_groups_investors; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.investor_groups_investors TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.investor_groups_investors TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.investor_groups_investors TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.investor_groups_investors TO prisma;


--
-- Name: TABLE investors; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.investors TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.investors TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.investors TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.investors TO prisma;


--
-- Name: TABLE invoice; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.invoice TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.invoice TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.invoice TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.invoice TO prisma;


--
-- Name: SEQUENCE invoice_invoice_id_seq; Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON SEQUENCE public.invoice_invoice_id_seq TO anon;
GRANT ALL ON SEQUENCE public.invoice_invoice_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.invoice_invoice_id_seq TO service_role;
GRANT ALL ON SEQUENCE public.invoice_invoice_id_seq TO prisma;


--
-- Name: TABLE invoices; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.invoices TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.invoices TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.invoices TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.invoices TO prisma;


--
-- Name: TABLE issuer_access_roles; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.issuer_access_roles TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.issuer_access_roles TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.issuer_access_roles TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.issuer_access_roles TO prisma;


--
-- Name: TABLE issuer_detail_documents; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.issuer_detail_documents TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.issuer_detail_documents TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.issuer_detail_documents TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.issuer_detail_documents TO prisma;


--
-- Name: TABLE issuer_documents; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.issuer_documents TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.issuer_documents TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.issuer_documents TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.issuer_documents TO prisma;


--
-- Name: TABLE kyc_screening_logs; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.kyc_screening_logs TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.kyc_screening_logs TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.kyc_screening_logs TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.kyc_screening_logs TO prisma;


--
-- Name: TABLE latest_nav_by_fund; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.latest_nav_by_fund TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.latest_nav_by_fund TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.latest_nav_by_fund TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.latest_nav_by_fund TO prisma;


--
-- Name: TABLE market_data_snapshots; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.market_data_snapshots TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.market_data_snapshots TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.market_data_snapshots TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.market_data_snapshots TO prisma;


--
-- Name: TABLE mfa_policies; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.mfa_policies TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.mfa_policies TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.mfa_policies TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.mfa_policies TO prisma;


--
-- Name: TABLE monitoring_metrics; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.monitoring_metrics TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.monitoring_metrics TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.monitoring_metrics TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.monitoring_metrics TO prisma;


--
-- Name: TABLE moonpay_asset_cache; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_asset_cache TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_asset_cache TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_asset_cache TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_asset_cache TO prisma;


--
-- Name: TABLE moonpay_compliance_alerts; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_compliance_alerts TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_compliance_alerts TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_compliance_alerts TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_compliance_alerts TO prisma;


--
-- Name: TABLE moonpay_customers; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_customers TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_customers TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_customers TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_customers TO prisma;


--
-- Name: TABLE moonpay_passes; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_passes TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_passes TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_passes TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_passes TO prisma;


--
-- Name: TABLE moonpay_policies; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_policies TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_policies TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_policies TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_policies TO prisma;


--
-- Name: TABLE moonpay_policy_logs; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_policy_logs TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_policy_logs TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_policy_logs TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_policy_logs TO prisma;


--
-- Name: TABLE moonpay_projects; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_projects TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_projects TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_projects TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_projects TO prisma;


--
-- Name: TABLE moonpay_swap_transactions; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_swap_transactions TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_swap_transactions TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_swap_transactions TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_swap_transactions TO prisma;


--
-- Name: TABLE moonpay_transactions; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_transactions TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_transactions TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_transactions TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_transactions TO prisma;


--
-- Name: TABLE moonpay_webhook_config; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_webhook_config TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_webhook_config TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_webhook_config TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_webhook_config TO prisma;


--
-- Name: TABLE moonpay_webhook_events; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_webhook_events TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_webhook_events TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_webhook_events TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.moonpay_webhook_events TO prisma;


--
-- Name: TABLE multi_sig_confirmations; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.multi_sig_confirmations TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.multi_sig_confirmations TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.multi_sig_confirmations TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.multi_sig_confirmations TO prisma;


--
-- Name: TABLE multi_sig_transactions; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.multi_sig_transactions TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.multi_sig_transactions TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.multi_sig_transactions TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.multi_sig_transactions TO prisma;


--
-- Name: TABLE multi_sig_wallets; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.multi_sig_wallets TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.multi_sig_wallets TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.multi_sig_wallets TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.multi_sig_wallets TO prisma;


--
-- Name: TABLE nav_approvals; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_approvals TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_approvals TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_approvals TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_approvals TO prisma;


--
-- Name: TABLE nav_calculation_history; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_calculation_history TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_calculation_history TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_calculation_history TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_calculation_history TO prisma;


--
-- Name: SEQUENCE nav_calculation_history_id_seq; Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON SEQUENCE public.nav_calculation_history_id_seq TO anon;
GRANT ALL ON SEQUENCE public.nav_calculation_history_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.nav_calculation_history_id_seq TO service_role;
GRANT ALL ON SEQUENCE public.nav_calculation_history_id_seq TO prisma;


--
-- Name: TABLE nav_calculation_runs; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_calculation_runs TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_calculation_runs TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_calculation_runs TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_calculation_runs TO prisma;


--
-- Name: TABLE nav_validation_results; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_validation_results TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_validation_results TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_validation_results TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_validation_results TO prisma;


--
-- Name: TABLE nav_data_with_status; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_data_with_status TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_data_with_status TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_data_with_status TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_data_with_status TO prisma;


--
-- Name: TABLE nav_fx_rates; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_fx_rates TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_fx_rates TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_fx_rates TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_fx_rates TO prisma;


--
-- Name: TABLE nav_fx_rates_latest; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_fx_rates_latest TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_fx_rates_latest TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_fx_rates_latest TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_fx_rates_latest TO prisma;


--
-- Name: TABLE nav_oracle_configs; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_oracle_configs TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_oracle_configs TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_oracle_configs TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_oracle_configs TO prisma;


--
-- Name: TABLE nav_price_cache; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_price_cache TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_price_cache TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_price_cache TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_price_cache TO prisma;


--
-- Name: TABLE nav_redemptions; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_redemptions TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_redemptions TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_redemptions TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.nav_redemptions TO prisma;


--
-- Name: TABLE notification_settings; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.notification_settings TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.notification_settings TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.notification_settings TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.notification_settings TO prisma;


--
-- Name: TABLE notifications; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.notifications TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.notifications TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.notifications TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.notifications TO prisma;


--
-- Name: TABLE onboarding_restrictions; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.onboarding_restrictions TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.onboarding_restrictions TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.onboarding_restrictions TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.onboarding_restrictions TO prisma;


--
-- Name: TABLE onchain_claims; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.onchain_claims TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.onchain_claims TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.onchain_claims TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.onchain_claims TO prisma;


--
-- Name: TABLE onchain_identities; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.onchain_identities TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.onchain_identities TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.onchain_identities TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.onchain_identities TO prisma;


--
-- Name: TABLE onchain_issuers; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.onchain_issuers TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.onchain_issuers TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.onchain_issuers TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.onchain_issuers TO prisma;


--
-- Name: TABLE onchain_verification_history; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.onchain_verification_history TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.onchain_verification_history TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.onchain_verification_history TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.onchain_verification_history TO prisma;


--
-- Name: TABLE organizations; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.organizations TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.organizations TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.organizations TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.organizations TO prisma;


--
-- Name: TABLE payer; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.payer TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.payer TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.payer TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.payer TO prisma;


--
-- Name: SEQUENCE payer_payer_id_seq; Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON SEQUENCE public.payer_payer_id_seq TO anon;
GRANT ALL ON SEQUENCE public.payer_payer_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.payer_payer_id_seq TO service_role;
GRANT ALL ON SEQUENCE public.payer_payer_id_seq TO prisma;


--
-- Name: TABLE paymaster_operations; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.paymaster_operations TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.paymaster_operations TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.paymaster_operations TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.paymaster_operations TO prisma;


--
-- Name: TABLE permissions; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.permissions TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.permissions TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.permissions TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.permissions TO prisma;


--
-- Name: TABLE policy_rule_approvers; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.policy_rule_approvers TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.policy_rule_approvers TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.policy_rule_approvers TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.policy_rule_approvers TO prisma;


--
-- Name: TABLE policy_rule_approvers_backup; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.policy_rule_approvers_backup TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.policy_rule_approvers_backup TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.policy_rule_approvers_backup TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.policy_rule_approvers_backup TO prisma;


--
-- Name: TABLE policy_template_approvers; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.policy_template_approvers TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.policy_template_approvers TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.policy_template_approvers TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.policy_template_approvers TO prisma;


--
-- Name: TABLE policy_templates; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.policy_templates TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.policy_templates TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.policy_templates TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.policy_templates TO prisma;


--
-- Name: TABLE pool; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.pool TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.pool TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.pool TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.pool TO prisma;


--
-- Name: SEQUENCE pool_pool_id_seq; Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON SEQUENCE public.pool_pool_id_seq TO anon;
GRANT ALL ON SEQUENCE public.pool_pool_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.pool_pool_id_seq TO service_role;
GRANT ALL ON SEQUENCE public.pool_pool_id_seq TO prisma;


--
-- Name: TABLE private_debt_products; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.private_debt_products TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.private_debt_products TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.private_debt_products TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.private_debt_products TO prisma;


--
-- Name: TABLE private_equity_products; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.private_equity_products TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.private_equity_products TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.private_equity_products TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.private_equity_products TO prisma;


--
-- Name: TABLE product_lifecycle_events; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.product_lifecycle_events TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.product_lifecycle_events TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.product_lifecycle_events TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.product_lifecycle_events TO prisma;


--
-- Name: TABLE production_data; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.production_data TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.production_data TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.production_data TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.production_data TO prisma;


--
-- Name: TABLE profiles; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.profiles TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.profiles TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.profiles TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.profiles TO prisma;


--
-- Name: TABLE project_organization_assignments; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.project_organization_assignments TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.project_organization_assignments TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.project_organization_assignments TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.project_organization_assignments TO prisma;


--
-- Name: TABLE projects; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.projects TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.projects TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.projects TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.projects TO prisma;


--
-- Name: TABLE project_type_stats; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.project_type_stats TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.project_type_stats TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.project_type_stats TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.project_type_stats TO prisma;


--
-- Name: TABLE project_wallets; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.project_wallets TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.project_wallets TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.project_wallets TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.project_wallets TO prisma;


--
-- Name: TABLE projects_backup; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.projects_backup TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.projects_backup TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.projects_backup TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.projects_backup TO prisma;


--
-- Name: TABLE provider; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.provider TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.provider TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.provider TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.provider TO prisma;


--
-- Name: SEQUENCE provider_provider_id_seq; Type: ACL; Schema: public; Owner: -
--

GRANT ALL ON SEQUENCE public.provider_provider_id_seq TO anon;
GRANT ALL ON SEQUENCE public.provider_provider_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.provider_provider_id_seq TO service_role;
GRANT ALL ON SEQUENCE public.provider_provider_id_seq TO prisma;


--
-- Name: TABLE quantitative_investment_strategies_products; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.quantitative_investment_strategies_products TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.quantitative_investment_strategies_products TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.quantitative_investment_strategies_products TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.quantitative_investment_strategies_products TO prisma;


--
-- Name: TABLE quantitative_strategies; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.quantitative_strategies TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.quantitative_strategies TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.quantitative_strategies TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.quantitative_strategies TO prisma;


--
-- Name: TABLE ramp_network_config; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.ramp_network_config TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.ramp_network_config TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.ramp_network_config TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.ramp_network_config TO prisma;


--
-- Name: TABLE ramp_supported_assets; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.ramp_supported_assets TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.ramp_supported_assets TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.ramp_supported_assets TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.ramp_supported_assets TO prisma;


--
-- Name: TABLE ramp_transaction_events; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.ramp_transaction_events TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.ramp_transaction_events TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.ramp_transaction_events TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.ramp_transaction_events TO prisma;


--
-- Name: TABLE ramp_webhook_events; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.ramp_webhook_events TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.ramp_webhook_events TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.ramp_webhook_events TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.ramp_webhook_events TO prisma;


--
-- Name: TABLE real_estate_products; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.real_estate_products TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.real_estate_products TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.real_estate_products TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.real_estate_products TO prisma;


--
-- Name: TABLE rec_price_cache; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.rec_price_cache TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.rec_price_cache TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.rec_price_cache TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.rec_price_cache TO prisma;


--
-- Name: TABLE redemption_analytics; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_analytics TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_analytics TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_analytics TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_analytics TO prisma;


--
-- Name: TABLE redemption_approvers; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_approvers TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_approvers TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_approvers TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_approvers TO prisma;


--
-- Name: TABLE redemption_notifications; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_notifications TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_notifications TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_notifications TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_notifications TO prisma;


--
-- Name: TABLE redemption_requests; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_requests TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_requests TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_requests TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_requests TO prisma;


--
-- Name: TABLE stablecoin_products; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.stablecoin_products TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.stablecoin_products TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.stablecoin_products TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.stablecoin_products TO prisma;


--
-- Name: TABLE structured_products; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.structured_products TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.structured_products TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.structured_products TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.structured_products TO prisma;


--
-- Name: TABLE redemption_rules_with_product_details; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_rules_with_product_details TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_rules_with_product_details TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_rules_with_product_details TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_rules_with_product_details TO prisma;


--
-- Name: TABLE redemption_settlements; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_settlements TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_settlements TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_settlements TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_settlements TO prisma;


--
-- Name: TABLE redemption_system_health; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_system_health TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_system_health TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_system_health TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_system_health TO prisma;


--
-- Name: TABLE redemption_window_templates; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_window_templates TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_window_templates TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_window_templates TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_window_templates TO prisma;


--
-- Name: TABLE redemption_windows; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_windows TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_windows TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_windows TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.redemption_windows TO prisma;


--
-- Name: TABLE regulatory_equivalence_mapping; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.regulatory_equivalence_mapping TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.regulatory_equivalence_mapping TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.regulatory_equivalence_mapping TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.regulatory_equivalence_mapping TO prisma;


--
-- Name: TABLE regulatory_exemptions; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.regulatory_exemptions TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.regulatory_exemptions TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.regulatory_exemptions TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.regulatory_exemptions TO prisma;


--
-- Name: TABLE renewable_energy_credits; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.renewable_energy_credits TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.renewable_energy_credits TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.renewable_energy_credits TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.renewable_energy_credits TO prisma;


--
-- Name: TABLE restriction_statistics; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.restriction_statistics TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.restriction_statistics TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.restriction_statistics TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.restriction_statistics TO prisma;


--
-- Name: TABLE restriction_validation_logs; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.restriction_validation_logs TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.restriction_validation_logs TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.restriction_validation_logs TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.restriction_validation_logs TO prisma;


--
-- Name: TABLE ripple_payments; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.ripple_payments TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.ripple_payments TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.ripple_payments TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.ripple_payments TO prisma;


--
-- Name: TABLE risk_assessments; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.risk_assessments TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.risk_assessments TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.risk_assessments TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.risk_assessments TO prisma;


--
-- Name: TABLE role_permissions; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.role_permissions TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.role_permissions TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.role_permissions TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.role_permissions TO prisma;


--
-- Name: TABLE rules; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.rules TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.rules TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.rules TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.rules TO prisma;


--
-- Name: TABLE secure_keys; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.secure_keys TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.secure_keys TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.secure_keys TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.secure_keys TO prisma;


--
-- Name: TABLE security_audit_logs; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.security_audit_logs TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.security_audit_logs TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.security_audit_logs TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.security_audit_logs TO prisma;


--
-- Name: TABLE security_events; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.security_events TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.security_events TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.security_events TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.security_events TO prisma;


--
-- Name: TABLE settlement_metrics; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.settlement_metrics TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.settlement_metrics TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.settlement_metrics TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.settlement_metrics TO prisma;


--
-- Name: TABLE settlement_summary; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.settlement_summary TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.settlement_summary TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.settlement_summary TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.settlement_summary TO prisma;


--
-- Name: TABLE sidebar_configurations; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.sidebar_configurations TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.sidebar_configurations TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.sidebar_configurations TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.sidebar_configurations TO prisma;


--
-- Name: TABLE sidebar_configurations_with_names; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.sidebar_configurations_with_names TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.sidebar_configurations_with_names TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.sidebar_configurations_with_names TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.sidebar_configurations_with_names TO prisma;


--
-- Name: TABLE sidebar_items; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.sidebar_items TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.sidebar_items TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.sidebar_items TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.sidebar_items TO prisma;


--
-- Name: TABLE sidebar_sections; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.sidebar_sections TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.sidebar_sections TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.sidebar_sections TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.sidebar_sections TO prisma;


--
-- Name: TABLE signature_migration_approvals; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.signature_migration_approvals TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.signature_migration_approvals TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.signature_migration_approvals TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.signature_migration_approvals TO prisma;


--
-- Name: TABLE signature_migrations; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.signature_migrations TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.signature_migrations TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.signature_migrations TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.signature_migrations TO prisma;


--
-- Name: TABLE signatures; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.signatures TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.signatures TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.signatures TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.signatures TO prisma;


--
-- Name: TABLE smart_contract_wallets; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.smart_contract_wallets TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.smart_contract_wallets TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.smart_contract_wallets TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.smart_contract_wallets TO prisma;


--
-- Name: TABLE stablecoin_collateral; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.stablecoin_collateral TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.stablecoin_collateral TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.stablecoin_collateral TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.stablecoin_collateral TO prisma;


--
-- Name: TABLE stage_requirements; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.stage_requirements TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.stage_requirements TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.stage_requirements TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.stage_requirements TO prisma;


--
-- Name: TABLE stripe_conversion_transactions; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.stripe_conversion_transactions TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.stripe_conversion_transactions TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.stripe_conversion_transactions TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.stripe_conversion_transactions TO prisma;


--
-- Name: TABLE stripe_stablecoin_accounts; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.stripe_stablecoin_accounts TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.stripe_stablecoin_accounts TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.stripe_stablecoin_accounts TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.stripe_stablecoin_accounts TO prisma;


--
-- Name: TABLE stripe_webhook_events; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.stripe_webhook_events TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.stripe_webhook_events TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.stripe_webhook_events TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.stripe_webhook_events TO prisma;


--
-- Name: TABLE subscriptions; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.subscriptions TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.subscriptions TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.subscriptions TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.subscriptions TO prisma;


--
-- Name: TABLE system_processes; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.system_processes TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.system_processes TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.system_processes TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.system_processes TO prisma;


--
-- Name: TABLE system_process_activities; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.system_process_activities TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.system_process_activities TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.system_process_activities TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.system_process_activities TO prisma;


--
-- Name: TABLE system_process_activity; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.system_process_activity TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.system_process_activity TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.system_process_activity TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.system_process_activity TO prisma;


--
-- Name: TABLE system_process_performance; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.system_process_performance TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.system_process_performance TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.system_process_performance TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.system_process_performance TO prisma;


--
-- Name: TABLE system_settings; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.system_settings TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.system_settings TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.system_settings TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.system_settings TO prisma;


--
-- Name: TABLE token_allocations; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_allocations TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_allocations TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_allocations TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_allocations TO prisma;


--
-- Name: TABLE token_deployment_history; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_deployment_history TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_deployment_history TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_deployment_history TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_deployment_history TO prisma;


--
-- Name: TABLE token_deployments; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_deployments TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_deployments TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_deployments TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_deployments TO prisma;


--
-- Name: TABLE token_designs; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_designs TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_designs TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_designs TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_designs TO prisma;


--
-- Name: TABLE token_erc1155_balances; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1155_balances TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1155_balances TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1155_balances TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1155_balances TO prisma;


--
-- Name: TABLE token_erc1155_crafting_recipes; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1155_crafting_recipes TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1155_crafting_recipes TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1155_crafting_recipes TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1155_crafting_recipes TO prisma;


--
-- Name: TABLE token_erc1155_discount_tiers; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1155_discount_tiers TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1155_discount_tiers TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1155_discount_tiers TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1155_discount_tiers TO prisma;


--
-- Name: TABLE token_erc1155_properties; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1155_properties TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1155_properties TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1155_properties TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1155_properties TO prisma;


--
-- Name: TABLE token_erc1155_type_configs; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1155_type_configs TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1155_type_configs TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1155_type_configs TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1155_type_configs TO prisma;


--
-- Name: TABLE token_erc1155_types; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1155_types TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1155_types TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1155_types TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1155_types TO prisma;


--
-- Name: TABLE token_erc1155_uri_mappings; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1155_uri_mappings TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1155_uri_mappings TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1155_uri_mappings TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1155_uri_mappings TO prisma;


--
-- Name: TABLE token_erc1155_view; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1155_view TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1155_view TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1155_view TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1155_view TO prisma;


--
-- Name: TABLE token_erc1400_controllers; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_controllers TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_controllers TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_controllers TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_controllers TO prisma;


--
-- Name: TABLE token_erc1400_corporate_actions; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_corporate_actions TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_corporate_actions TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_corporate_actions TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_corporate_actions TO prisma;


--
-- Name: TABLE token_erc1400_custody_providers; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_custody_providers TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_custody_providers TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_custody_providers TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_custody_providers TO prisma;


--
-- Name: TABLE token_erc1400_documents; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_documents TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_documents TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_documents TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_documents TO prisma;


--
-- Name: TABLE token_erc1400_partition_balances; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_partition_balances TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_partition_balances TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_partition_balances TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_partition_balances TO prisma;


--
-- Name: TABLE token_erc1400_partition_operators; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_partition_operators TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_partition_operators TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_partition_operators TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_partition_operators TO prisma;


--
-- Name: TABLE token_erc1400_partition_transfers; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_partition_transfers TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_partition_transfers TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_partition_transfers TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_partition_transfers TO prisma;


--
-- Name: TABLE token_erc1400_partitions; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_partitions TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_partitions TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_partitions TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_partitions TO prisma;


--
-- Name: TABLE token_erc1400_properties; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_properties TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_properties TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_properties TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_properties TO prisma;


--
-- Name: TABLE token_erc1400_regulatory_filings; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_regulatory_filings TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_regulatory_filings TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_regulatory_filings TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_regulatory_filings TO prisma;


--
-- Name: TABLE token_erc1400_view; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_view TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_view TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_view TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc1400_view TO prisma;


--
-- Name: TABLE token_erc20_properties; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc20_properties TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc20_properties TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc20_properties TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc20_properties TO prisma;


--
-- Name: TABLE token_erc20_view; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc20_view TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc20_view TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc20_view TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc20_view TO prisma;


--
-- Name: TABLE token_erc3525_allocations; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc3525_allocations TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc3525_allocations TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc3525_allocations TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc3525_allocations TO prisma;


--
-- Name: TABLE token_erc3525_payment_schedules; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc3525_payment_schedules TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc3525_payment_schedules TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc3525_payment_schedules TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc3525_payment_schedules TO prisma;


--
-- Name: TABLE token_erc3525_properties; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc3525_properties TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc3525_properties TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc3525_properties TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc3525_properties TO prisma;


--
-- Name: TABLE token_erc3525_slot_configs; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc3525_slot_configs TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc3525_slot_configs TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc3525_slot_configs TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc3525_slot_configs TO prisma;


--
-- Name: TABLE token_erc3525_slots; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc3525_slots TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc3525_slots TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc3525_slots TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc3525_slots TO prisma;


--
-- Name: TABLE token_erc3525_value_adjustments; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc3525_value_adjustments TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc3525_value_adjustments TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc3525_value_adjustments TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc3525_value_adjustments TO prisma;


--
-- Name: TABLE token_erc3525_view; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc3525_view TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc3525_view TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc3525_view TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc3525_view TO prisma;


--
-- Name: TABLE token_erc4626_asset_allocations; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc4626_asset_allocations TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc4626_asset_allocations TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc4626_asset_allocations TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc4626_asset_allocations TO prisma;


--
-- Name: TABLE token_erc4626_fee_tiers; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc4626_fee_tiers TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc4626_fee_tiers TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc4626_fee_tiers TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc4626_fee_tiers TO prisma;


--
-- Name: TABLE token_erc4626_performance_metrics; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc4626_performance_metrics TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc4626_performance_metrics TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc4626_performance_metrics TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc4626_performance_metrics TO prisma;


--
-- Name: TABLE token_erc4626_properties; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc4626_properties TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc4626_properties TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc4626_properties TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc4626_properties TO prisma;


--
-- Name: TABLE token_erc4626_strategy_params; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc4626_strategy_params TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc4626_strategy_params TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc4626_strategy_params TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc4626_strategy_params TO prisma;


--
-- Name: TABLE token_erc4626_vault_strategies; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc4626_vault_strategies TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc4626_vault_strategies TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc4626_vault_strategies TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc4626_vault_strategies TO prisma;


--
-- Name: TABLE token_erc4626_view; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc4626_view TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc4626_view TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc4626_view TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc4626_view TO prisma;


--
-- Name: TABLE token_erc721_attributes; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc721_attributes TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc721_attributes TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc721_attributes TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc721_attributes TO prisma;


--
-- Name: TABLE token_erc721_mint_phases; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc721_mint_phases TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc721_mint_phases TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc721_mint_phases TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc721_mint_phases TO prisma;


--
-- Name: TABLE token_erc721_properties; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc721_properties TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc721_properties TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc721_properties TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc721_properties TO prisma;


--
-- Name: TABLE token_erc721_trait_definitions; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc721_trait_definitions TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc721_trait_definitions TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc721_trait_definitions TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc721_trait_definitions TO prisma;


--
-- Name: TABLE token_erc721_view; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc721_view TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc721_view TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc721_view TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_erc721_view TO prisma;


--
-- Name: TABLE token_events; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_events TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_events TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_events TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_events TO prisma;


--
-- Name: TABLE token_geographic_restrictions; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_geographic_restrictions TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_geographic_restrictions TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_geographic_restrictions TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_geographic_restrictions TO prisma;


--
-- Name: TABLE token_geographic_restrictions_view; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_geographic_restrictions_view TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_geographic_restrictions_view TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_geographic_restrictions_view TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_geographic_restrictions_view TO prisma;


--
-- Name: TABLE token_operations; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_operations TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_operations TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_operations TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_operations TO prisma;


--
-- Name: TABLE token_sanctions_rules; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_sanctions_rules TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_sanctions_rules TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_sanctions_rules TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_sanctions_rules TO prisma;


--
-- Name: TABLE token_templates; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_templates TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_templates TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_templates TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_templates TO prisma;


--
-- Name: TABLE token_versions; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_versions TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_versions TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_versions TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_versions TO prisma;


--
-- Name: TABLE token_whitelists; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_whitelists TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_whitelists TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_whitelists TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_whitelists TO prisma;


--
-- Name: TABLE token_whitelist_summary; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_whitelist_summary TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_whitelist_summary TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_whitelist_summary TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.token_whitelist_summary TO prisma;


--
-- Name: TABLE transaction_events; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.transaction_events TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.transaction_events TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.transaction_events TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.transaction_events TO prisma;


--
-- Name: TABLE transaction_notifications; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.transaction_notifications TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.transaction_notifications TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.transaction_notifications TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.transaction_notifications TO prisma;


--
-- Name: TABLE transaction_proposals; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.transaction_proposals TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.transaction_proposals TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.transaction_proposals TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.transaction_proposals TO prisma;


--
-- Name: TABLE transaction_signatures; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.transaction_signatures TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.transaction_signatures TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.transaction_signatures TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.transaction_signatures TO prisma;


--
-- Name: TABLE transactions; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.transactions TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.transactions TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.transactions TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.transactions TO prisma;


--
-- Name: TABLE transfer_history; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.transfer_history TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.transfer_history TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.transfer_history TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.transfer_history TO prisma;


--
-- Name: TABLE user_activity_summary; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.user_activity_summary TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.user_activity_summary TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.user_activity_summary TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.user_activity_summary TO prisma;


--
-- Name: TABLE user_mfa_settings; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.user_mfa_settings TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.user_mfa_settings TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.user_mfa_settings TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.user_mfa_settings TO prisma;


--
-- Name: TABLE user_operations; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.user_operations TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.user_operations TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.user_operations TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.user_operations TO prisma;


--
-- Name: TABLE user_organization_roles; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.user_organization_roles TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.user_organization_roles TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.user_organization_roles TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.user_organization_roles TO prisma;


--
-- Name: TABLE user_roles; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.user_roles TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.user_roles TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.user_roles TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.user_roles TO prisma;


--
-- Name: TABLE user_permissions_view; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.user_permissions_view TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.user_permissions_view TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.user_permissions_view TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.user_permissions_view TO prisma;


--
-- Name: TABLE user_sessions; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.user_sessions TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.user_sessions TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.user_sessions TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.user_sessions TO prisma;


--
-- Name: TABLE user_sidebar_preferences; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.user_sidebar_preferences TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.user_sidebar_preferences TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.user_sidebar_preferences TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.user_sidebar_preferences TO prisma;


--
-- Name: TABLE valid_policy_approvers; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.valid_policy_approvers TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.valid_policy_approvers TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.valid_policy_approvers TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.valid_policy_approvers TO prisma;


--
-- Name: TABLE wallet_details; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallet_details TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallet_details TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallet_details TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallet_details TO prisma;


--
-- Name: TABLE wallet_facets; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallet_facets TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallet_facets TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallet_facets TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallet_facets TO prisma;


--
-- Name: TABLE wallet_guardians; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallet_guardians TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallet_guardians TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallet_guardians TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallet_guardians TO prisma;


--
-- Name: TABLE wallet_locks; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallet_locks TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallet_locks TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallet_locks TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallet_locks TO prisma;


--
-- Name: TABLE wallet_restriction_rules; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallet_restriction_rules TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallet_restriction_rules TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallet_restriction_rules TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallet_restriction_rules TO prisma;


--
-- Name: TABLE wallet_signatories; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallet_signatories TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallet_signatories TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallet_signatories TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallet_signatories TO prisma;


--
-- Name: TABLE wallet_transaction_drafts; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallet_transaction_drafts TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallet_transaction_drafts TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallet_transaction_drafts TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallet_transaction_drafts TO prisma;
GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE public.wallet_transaction_drafts TO PUBLIC;


--
-- Name: TABLE wallet_transactions; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallet_transactions TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallet_transactions TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallet_transactions TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallet_transactions TO prisma;


--
-- Name: TABLE wallets; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallets TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallets TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallets TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.wallets TO prisma;


--
-- Name: TABLE weather_cache; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.weather_cache TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.weather_cache TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.weather_cache TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.weather_cache TO prisma;


--
-- Name: TABLE weather_data; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.weather_data TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.weather_data TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.weather_data TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.weather_data TO prisma;


--
-- Name: TABLE webauthn_challenges; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.webauthn_challenges TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.webauthn_challenges TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.webauthn_challenges TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.webauthn_challenges TO prisma;


--
-- Name: TABLE webauthn_credentials; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.webauthn_credentials TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.webauthn_credentials TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.webauthn_credentials TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.webauthn_credentials TO prisma;


--
-- Name: TABLE whitelist_entries; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.whitelist_entries TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.whitelist_entries TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.whitelist_entries TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.whitelist_entries TO prisma;


--
-- Name: TABLE whitelist_settings; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.whitelist_settings TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.whitelist_settings TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.whitelist_settings TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.whitelist_settings TO prisma;


--
-- Name: TABLE whitelist_signatories; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.whitelist_signatories TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.whitelist_signatories TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.whitelist_signatories TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.whitelist_signatories TO prisma;


--
-- Name: TABLE workflow_stages; Type: ACL; Schema: public; Owner: -
--

GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.workflow_stages TO anon;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.workflow_stages TO authenticated;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.workflow_stages TO service_role;
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE public.workflow_stages TO prisma;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: -
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES TO service_role;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES TO prisma;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: -
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: -
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS TO service_role;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS TO prisma;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: -
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: -
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO service_role;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO prisma;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: -
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO service_role;


--
-- PostgreSQL database dump complete
--

\unrestrict JlDqc15nyfrhiybG4NpTe1i1ELRQkvGZ9U22D6DaLPJFwswRNGgIBxNlFhsXjGS

