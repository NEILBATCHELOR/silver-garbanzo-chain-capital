import React, { useState, useEffect } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { CheckCircle, AlertTriangle, Settings2 } from "lucide-react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

// Import sub-forms
import ERC1400BaseForm from "./ERC1400BaseForm";
import ERC1400PropertiesForm from "./ERC1400PropertiesForm";
import ERC1400PartitionsForm from "./ERC1400PartitionsForm";
import ERC1400ControllersForm from "./ERC1400ControllersForm";
import ERC1400EnhancedComplianceForm from "./ERC1400EnhancedComplianceForm";
import ERC1400AdvancedCorporateActionsForm from "./ERC1400AdvancedCorporateActionsForm";
import ERC1400AdvancedGovernanceForm from "./ERC1400AdvancedGovernanceForm";
import ERC1400CrossBorderTradingForm from "./ERC1400CrossBorderTradingForm";
import ERC1400EnhancedReportingForm from "./ERC1400EnhancedReportingForm";
import ERC1400TraditionalFinanceForm from "./ERC1400TraditionalFinanceForm";
import ERC1400RiskManagementForm from "./ERC1400RiskManagementForm";
import ERC1400DocumentsForm from "./ERC1400DocumentsForm";
import ERC1400CorporateActionsManagementForm from "./ERC1400CorporateActionsManagementForm";
import ERC1400CustodyProvidersForm from "./ERC1400CustodyProvidersForm";
import ERC1400RegulatoryFilingsForm from "./ERC1400RegulatoryFilingsForm";
import ERC1400PartitionOperatorsForm from "./ERC1400PartitionOperatorsForm";

interface ERC1400ConfigProps {
  tokenForm: any;
  handleInputChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;
  setTokenForm: (form: any) => void;
  onConfigChange?: (config: any) => void;
  initialConfig?: any;
}

interface ERC1400Document {
  id?: string;
  name: string;
  documentUri: string;
  documentType: string;
  documentHash?: string;
  createdAt?: string;
  updatedAt?: string;
}

interface CorporateAction {
  id?: string;
  actionType: string;
  announcementDate: string;
  recordDate?: string;
  effectiveDate?: string;
  paymentDate?: string;
  actionDetails: any;
  impactOnSupply?: string;
  impactOnPrice?: string;
  shareholderApprovalRequired?: boolean;
  votingDeadline?: string;
  regulatoryApprovalRequired?: boolean;
  status: string;
  executionTransactionHash?: string;
}

interface CustodyProvider {
  id?: string;
  providerName: string;
  providerType: string;
  providerAddress?: string;
  providerLei?: string;
  custodyAgreementHash?: string;
  isActive: boolean;
  certificationLevel?: string;
  jurisdiction?: string;
  regulatoryApprovals: string[];
  integrationStatus: string;
}

interface RegulatoryFiling {
  id?: string;
  filingType: string;
  filingDate: string;
  filingJurisdiction: string;
  filingReference?: string;
  documentHash?: string;
  documentUri?: string;
  regulatoryBody?: string;
  complianceStatus: string;
  dueDate?: string;
  autoGenerated: boolean;
}

interface PartitionOperator {
  id?: string;
  partitionId: string;
  holderAddress: string;
  operatorAddress: string;
  authorized: boolean;
  lastUpdated?: string;
  metadata?: any;
}

interface ValidationIssue {
  field: string;
  message: string;
  severity: 'error' | 'warning';
  tab: string;
}

/**
 * ERC-1400 Configuration Component (Max Mode)
 * Comprehensive security token configuration with all 119+ database fields
 */
const ERC1400Config: React.FC<ERC1400ConfigProps> = ({
  tokenForm,
  handleInputChange,
  setTokenForm,
  onConfigChange,
  initialConfig = {}
}) => {
  // Internal state for comprehensive configuration
  const [config, setConfig] = useState({
    // Base token fields
    name: initialConfig.name || "",
    symbol: initialConfig.symbol || "",
    decimals: initialConfig.decimals ?? 18,
    initialSupply: initialConfig.initialSupply || "",
    cap: initialConfig.cap || "",
    tokenDetails: initialConfig.tokenDetails || "",
    securityType: initialConfig.securityType || "",
    regulationType: initialConfig.regulationType || "",
    issuingEntityName: initialConfig.issuingEntityName || "",
    issuingJurisdiction: initialConfig.issuingJurisdiction || "",
    issuingEntityLei: initialConfig.issuingEntityLei || "",
    
    // Basic features
    isMintable: initialConfig.isMintable ?? true,
    isBurnable: initialConfig.isBurnable ?? false,
    isPausable: initialConfig.isPausable ?? true,
    isIssuable: initialConfig.isIssuable ?? true,
    
    // Compliance features
    requireKyc: (initialConfig.requireKyc || initialConfig.enforceKyc) ?? true,
    whitelistEnabled: initialConfig.whitelistEnabled ?? true,
    investorAccreditation: (initialConfig.investorAccreditation || initialConfig.accreditedInvestorOnly) ?? false,
    autoCompliance: initialConfig.autoCompliance ?? true,
    manualApprovals: initialConfig.manualApprovals ?? false,
    complianceAutomationLevel: initialConfig.complianceAutomationLevel || "semi-automated",
    complianceModule: initialConfig.complianceModule || "",
    
    // Transfer restrictions
    holdingPeriod: initialConfig.holdingPeriod || "",
    maxInvestorCount: initialConfig.maxInvestorCount || "",
    useGeographicRestrictions: initialConfig.useGeographicRestrictions ?? false,
    defaultRestrictionPolicy: initialConfig.defaultRestrictionPolicy || "reject",
    
    // Controller features
    forcedTransfers: initialConfig.forcedTransfers ?? true,
    forcedRedemptionEnabled: initialConfig.forcedRedemptionEnabled ?? true,
    granularControl: initialConfig.granularControl ?? true,
    recoveryMechanism: initialConfig.recoveryMechanism ?? true,
    
    // Partition features
    isMultiClass: initialConfig.isMultiClass ?? false,
    trancheTransferability: initialConfig.trancheTransferability ?? false,
    
    // Corporate actions
    corporateActions: initialConfig.corporateActions ?? true,
    dividendDistribution: initialConfig.dividendDistribution ?? false,
    
    // Document management
    documentManagement: initialConfig.documentManagement ?? true,
    documentUri: initialConfig.documentUri || "",
    documentHash: initialConfig.documentHash || "",
    legalTerms: initialConfig.legalTerms || "",
    prospectus: initialConfig.prospectus || "",
    
    // Institutional features
    institutionalGrade: initialConfig.institutionalGrade ?? false,
    custodyIntegrationEnabled: initialConfig.custodyIntegrationEnabled ?? false,
    primeBrokerageSupport: initialConfig.primeBrokerageSupport ?? false,
    settlementIntegration: initialConfig.settlementIntegration || "",
    clearingHouseIntegration: initialConfig.clearingHouseIntegration ?? false,
    centralSecuritiesDepositoryIntegration: initialConfig.centralSecuritiesDepositoryIntegration ?? false,
    institutionalWalletSupport: initialConfig.institutionalWalletSupport ?? false,
    
    // Enhanced compliance monitoring
    realTimeComplianceMonitoring: initialConfig.realTimeComplianceMonitoring ?? true,
    automatedSanctionsScreening: initialConfig.automatedSanctionsScreening ?? true,
    pepScreeningEnabled: initialConfig.pepScreeningEnabled ?? true,
    amlMonitoringEnabled: initialConfig.amlMonitoringEnabled ?? true,
    suspiciousActivityReporting: initialConfig.suspiciousActivityReporting ?? true,
    complianceOfficerNotifications: initialConfig.complianceOfficerNotifications ?? true,
    regulatoryReportingAutomation: initialConfig.regulatoryReportingAutomation ?? true,
    
    // Advanced corporate actions
    advancedCorporateActions: initialConfig.advancedCorporateActions ?? false,
    stockSplitsEnabled: initialConfig.stockSplitsEnabled ?? false,
    stockDividendsEnabled: initialConfig.stockDividendsEnabled ?? false,
    rightsOfferingsEnabled: initialConfig.rightsOfferingsEnabled ?? false,
    spinOffsEnabled: initialConfig.spinOffsEnabled ?? false,
    mergersAcquisitionsSupport: initialConfig.mergersAcquisitionsSupport ?? false,
    treasuryManagementEnabled: initialConfig.treasuryManagementEnabled ?? false,
    buybackProgramsEnabled: initialConfig.buybackProgramsEnabled ?? false,
    shareRepurchaseAutomation: initialConfig.shareRepurchaseAutomation ?? false,
    
    // Advanced governance
    advancedGovernanceEnabled: initialConfig.advancedGovernanceEnabled ?? false,
    proxyVotingEnabled: initialConfig.proxyVotingEnabled ?? false,
    cumulativeVotingEnabled: initialConfig.cumulativeVotingEnabled ?? false,
    weightedVotingByClass: initialConfig.weightedVotingByClass ?? false,
    votingDelegationEnabled: initialConfig.votingDelegationEnabled ?? false,
    institutionalVotingServices: initialConfig.institutionalVotingServices ?? false,
    boardElectionSupport: initialConfig.boardElectionSupport ?? false,
    
    // Cross-border features
    crossBorderTradingEnabled: initialConfig.crossBorderTradingEnabled ?? false,
    multiJurisdictionCompliance: initialConfig.multiJurisdictionCompliance ?? false,
    passportRegimeSupport: initialConfig.passportRegimeSupport ?? false,
    treatyBenefitsEnabled: initialConfig.treatyBenefitsEnabled ?? false,
    withholdingTaxAutomation: initialConfig.withholdingTaxAutomation ?? false,
    currencyHedgingEnabled: initialConfig.currencyHedgingEnabled ?? false,
    
    // Enhanced reporting
    enhancedReportingEnabled: initialConfig.enhancedReportingEnabled ?? true,
    realTimeShareholderRegistry: initialConfig.realTimeShareholderRegistry ?? true,
    beneficialOwnershipTracking: initialConfig.beneficialOwnershipTracking ?? true,
    positionReconciliationEnabled: initialConfig.positionReconciliationEnabled ?? true,
    regulatoryFilingAutomation: initialConfig.regulatoryFilingAutomation ?? true,
    auditTrailComprehensive: initialConfig.auditTrailComprehensive ?? true,
    performanceAnalyticsEnabled: initialConfig.performanceAnalyticsEnabled ?? false,
    esgReportingEnabled: initialConfig.esgReportingEnabled ?? false,
    
    // Traditional finance integration
    traditionalFinanceIntegration: initialConfig.traditionalFinanceIntegration ?? false,
    swiftIntegrationEnabled: initialConfig.swiftIntegrationEnabled ?? false,
    iso20022MessagingSupport: initialConfig.iso20022MessagingSupport ?? false,
    financialDataVendorIntegration: initialConfig.financialDataVendorIntegration ?? false,
    marketDataFeedsEnabled: initialConfig.marketDataFeedsEnabled ?? false,
    crossChainBridgeSupport: initialConfig.crossChainBridgeSupport ?? false,
    layer2ScalingSupport: initialConfig.layer2ScalingSupport ?? false,
    
    // Advanced risk management
    advancedRiskManagement: initialConfig.advancedRiskManagement ?? false,
    positionLimitsEnabled: initialConfig.positionLimitsEnabled ?? false,
    stressTestingEnabled: initialConfig.stressTestingEnabled ?? false,
    marginRequirementsDynamic: initialConfig.marginRequirementsDynamic ?? false,
    collateralManagementEnabled: initialConfig.collateralManagementEnabled ?? false,
    insuranceCoverageEnabled: initialConfig.insuranceCoverageEnabled ?? false,
    disasterRecoveryEnabled: initialConfig.disasterRecoveryEnabled ?? true,
    
    // JSON/JSONB fields
    transferRestrictions: initialConfig.transferRestrictions || {},
    kycSettings: initialConfig.kycSettings || {},
    complianceSettings: initialConfig.complianceSettings || {},
    customFeatures: initialConfig.customFeatures || {},
    geographicRestrictions: initialConfig.geographicRestrictions || [],
    whitelistConfig: initialConfig.whitelistConfig || {},
    jurisdictionRestrictions: initialConfig.jurisdictionRestrictions || [],
    investorLimits: initialConfig.investorLimits || {},
    transactionMonitoringRules: initialConfig.transactionMonitoringRules || {},
    quorumRequirements: initialConfig.quorumRequirements || {},
    foreignOwnershipRestrictions: initialConfig.foreignOwnershipRestrictions || {},
    regulatoryEquivalenceMapping: initialConfig.regulatoryEquivalenceMapping || {},
    priceDiscoveryMechanisms: initialConfig.priceDiscoveryMechanisms || {},
    concentrationLimits: initialConfig.concentrationLimits || {},
    
    // Array fields
    thirdPartyCustodyAddresses: initialConfig.thirdPartyCustodyAddresses || [],
    
    // Additional boolean fields from database
    issuanceModules: initialConfig.issuanceModules ?? false,
    investorWhitelistEnabled: initialConfig.investorWhitelistEnabled ?? false,

    ...initialConfig
  });

  // Partitions, controllers, documents, and other related entities state
  const [partitions, setPartitions] = useState(initialConfig.partitions || []);
  const [controllers, setControllers] = useState(initialConfig.controllers || []);
  const [documents, setDocuments] = useState<ERC1400Document[]>(initialConfig.documents || []);
  const [corporateActions, setCorporateActions] = useState<CorporateAction[]>(initialConfig.corporateActions || []);
  const [custodyProviders, setCustodyProviders] = useState<CustodyProvider[]>(initialConfig.custodyProviders || []);
  const [regulatoryFilings, setRegulatoryFilings] = useState<RegulatoryFiling[]>(initialConfig.regulatoryFilings || []);
  const [partitionOperators, setPartitionOperators] = useState<PartitionOperator[]>(initialConfig.partitionOperators || []);
  
  // Validation state
  const [validationIssues, setValidationIssues] = useState<ValidationIssue[]>([]);
  const [activeTab, setActiveTab] = useState("basic");

  // Update parent when config changes
  useEffect(() => {
    const fullConfig = {
      ...config,
      partitions,
      controllers,
      documents,
      corporateActions,
      custodyProviders,
      regulatoryFilings,
      partitionOperators
    };
    
    if (onConfigChange) {
      onConfigChange(fullConfig);
    } else {
      // Update tokenForm for backward compatibility
      setTokenForm((prev: any) => ({
        ...prev,
        ...fullConfig
      }));
    }
  }, [config, partitions, controllers, documents, corporateActions, custodyProviders, regulatoryFilings, partitionOperators, onConfigChange, setTokenForm]);

  // Handle input changes
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setConfig(prev => ({ ...prev, [name]: value }));
    
    // Also call original handler for backward compatibility
    if (!onConfigChange) {
      handleInputChange(e);
    }
  };

  // Handle select changes
  const handleSelectChange = (name: string, value: string) => {
    setConfig(prev => ({ ...prev, [name]: value }));
  };

  // Handle switch changes
  const handleSwitchChange = (name: string, checked: boolean) => {
    setConfig(prev => ({ ...prev, [name]: checked }));
  };

  // Validate configuration
  const validateConfig = () => {
    const issues: ValidationIssue[] = [];
    
    // Basic validations
    if (!config.name) {
      issues.push({ field: 'name', message: 'Token name is required', severity: 'error', tab: 'basic' });
    }
    if (!config.symbol) {
      issues.push({ field: 'symbol', message: 'Token symbol is required', severity: 'error', tab: 'basic' });
    }
    if (!config.initialSupply) {
      issues.push({ field: 'initialSupply', message: 'Initial supply is required', severity: 'error', tab: 'basic' });
    }
    if (!config.securityType) {
      issues.push({ field: 'securityType', message: 'Security type is required', severity: 'error', tab: 'basic' });
    }
    if (!config.issuingEntityName) {
      issues.push({ field: 'issuingEntityName', message: 'Issuing entity name is required', severity: 'error', tab: 'basic' });
    }
    if (!config.issuingJurisdiction) {
      issues.push({ field: 'issuingJurisdiction', message: 'Issuing jurisdiction is required', severity: 'error', tab: 'basic' });
    }

    // Controller validations
    if (controllers.length === 0) {
      issues.push({ field: 'controllers', message: 'At least one controller is required', severity: 'error', tab: 'controllers' });
    }
    
    controllers.forEach((controller, index) => {
      if (!controller.address) {
        issues.push({ field: `controller-${index}`, message: `Controller ${index + 1} address is required`, severity: 'error', tab: 'controllers' });
      }
      if (controller.permissions.length === 0) {
        issues.push({ field: `controller-${index}`, message: `Controller ${index + 1} needs at least one permission`, severity: 'warning', tab: 'controllers' });
      }
    });

    // Partition validations
    if (config.isMultiClass && partitions.length === 0) {
      issues.push({ field: 'partitions', message: 'Multi-class tokens require at least one partition', severity: 'error', tab: 'partitions' });
    }
    
    partitions.forEach((partition, index) => {
      if (!partition.name) {
        issues.push({ field: `partition-${index}`, message: `Partition ${index + 1} name is required`, severity: 'error', tab: 'partitions' });
      }
      if (!partition.amount) {
        issues.push({ field: `partition-${index}`, message: `Partition ${index + 1} amount is required`, severity: 'error', tab: 'partitions' });
      }
    });

    // Compliance validations
    if (config.requireKyc && !config.whitelistEnabled) {
      issues.push({ field: 'compliance', message: 'KYC enforcement typically requires whitelist functionality', severity: 'warning', tab: 'properties' });
    }
    
    if (config.maxInvestorCount && parseInt(config.maxInvestorCount) > 2000 && config.regulationType === 'reg-a-plus') {
      issues.push({ field: 'maxInvestorCount', message: 'Reg A+ has a 2000 investor limit', severity: 'warning', tab: 'properties' });
    }

    // Document validations
    if (config.documentManagement && documents.length === 0) {
      issues.push({ field: 'documents', message: 'Document management is enabled but no documents are attached', severity: 'warning', tab: 'documents' });
    }
    
    documents.forEach((document, index) => {
      if (!document.name) {
        issues.push({ field: `document-${index}`, message: `Document ${index + 1} name is required`, severity: 'error', tab: 'documents' });
      }
      if (!document.documentUri) {
        issues.push({ field: `document-${index}`, message: `Document ${index + 1} URI is required`, severity: 'error', tab: 'documents' });
      }
      if (!document.documentType) {
        issues.push({ field: `document-${index}`, message: `Document ${index + 1} type is required`, severity: 'error', tab: 'documents' });
      }
    });

    setValidationIssues(issues);
    return issues;
  };

  // Calculate completion percentage
  const calculateCompletion = () => {
    const requiredFields = [
      'name', 'symbol', 'initialSupply', 'securityType', 'issuingEntityName', 'issuingJurisdiction'
    ];
    
    const completed = requiredFields.filter(field => config[field as keyof typeof config]).length;
    const controllersComplete = controllers.length > 0 && controllers.every(c => c.address);
    const partitionsComplete = !config.isMultiClass || (partitions.length > 0 && partitions.every(p => p.name && p.amount));
    const documentsComplete = !config.documentManagement || documents.length > 0;
    
    const baseCompletion = (completed / requiredFields.length) * 50; // 50% for basic fields
    const controllerCompletion = controllersComplete ? 20 : 0; // 20% for controllers
    const partitionCompletion = partitionsComplete ? 15 : 0; // 15% for partitions
    const documentCompletion = documentsComplete ? 15 : 0; // 15% for documents
    
    return Math.round(baseCompletion + controllerCompletion + partitionCompletion + documentCompletion);
  };

  // Get tab status
  const getTabStatus = (tabName: string) => {
    const tabIssues = validationIssues.filter(issue => issue.tab === tabName);
    const errors = tabIssues.filter(issue => issue.severity === 'error').length;
    const warnings = tabIssues.filter(issue => issue.severity === 'warning').length;
    
    if (errors > 0) return { status: 'error', count: errors };
    if (warnings > 0) return { status: 'warning', count: warnings };
    return { status: 'complete', count: 0 };
  };

  // Validate on tab change
  useEffect(() => {
    validateConfig();
  }, [config, controllers, partitions, documents]);

  const completion = calculateCompletion();
  const totalErrors = validationIssues.filter(issue => issue.severity === 'error').length;
  const totalWarnings = validationIssues.filter(issue => issue.severity === 'warning').length;

  return (
    <div className="space-y-6">
      {/* Header */}
      <Card>
        <CardContent className="pt-6">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center space-x-3">
              <Settings2 className="h-6 w-6 text-blue-600" />
              <div>
                <h2 className="text-lg font-semibold">ERC-1400 Security Token Configuration</h2>
                <p className="text-sm text-muted-foreground">
                  Comprehensive configuration for institutional-grade security tokens
                </p>
              </div>
            </div>
            <div className="text-right">
              <div className="text-2xl font-bold text-blue-600">{completion}%</div>
              <div className="text-xs text-muted-foreground">Complete</div>
            </div>
          </div>

          <Progress value={completion} className="h-3 mb-4" />
          
          <div className="flex items-center justify-between text-sm">
            <div className="flex items-center space-x-4">
              {totalErrors > 0 && (
                <Badge variant="destructive" className="gap-1">
                  <AlertTriangle className="h-3 w-3" />
                  {totalErrors} error{totalErrors !== 1 ? 's' : ''}
                </Badge>
              )}
              {totalWarnings > 0 && (
                <Badge variant="secondary" className="gap-1">
                  <AlertTriangle className="h-3 w-3" />
                  {totalWarnings} warning{totalWarnings !== 1 ? 's' : ''}
                </Badge>
              )}
              {totalErrors === 0 && totalWarnings === 0 && (
                <Badge variant="default" className="gap-1">
                  <CheckCircle className="h-3 w-3" />
                  All validations passed
                </Badge>
              )}
            </div>
            <div className="text-muted-foreground">
              {Object.keys(config).filter(key => config[key as keyof typeof config]).length} / {Object.keys(config).length} fields configured
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Configuration Tabs */}
      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="basic" className="relative">
            Basic Details
            {getTabStatus('basic').status === 'error' && (
              <Badge variant="destructive" className="absolute -top-1 -right-1 h-5 w-5 p-0 text-xs">
                {getTabStatus('basic').count}
              </Badge>
            )}
          </TabsTrigger>
          <TabsTrigger value="properties" className="relative">
            Properties
            {getTabStatus('properties').status === 'error' && (
              <Badge variant="destructive" className="absolute -top-1 -right-1 h-5 w-5 p-0 text-xs">
                {getTabStatus('properties').count}
              </Badge>
            )}
          </TabsTrigger>
          <TabsTrigger value="structure" className="relative">
            Structure
            {getTabStatus('structure').status === 'error' && (
              <Badge variant="destructive" className="absolute -top-1 -right-1 h-5 w-5 p-0 text-xs">
                {getTabStatus('structure').count}
              </Badge>
            )}
          </TabsTrigger>
          <TabsTrigger value="advanced" className="relative">
            Advanced
            {getTabStatus('advanced').status === 'error' && (
              <Badge variant="destructive" className="absolute -top-1 -right-1 h-5 w-5 p-0 text-xs">
                {getTabStatus('advanced').count}
              </Badge>
            )}
          </TabsTrigger>
        </TabsList>

        <TabsContent value="basic">
          <ERC1400BaseForm
            config={config}
            handleInputChange={handleChange}
            handleSelectChange={handleSelectChange}
            handleSwitchChange={handleSwitchChange}
          />
        </TabsContent>

        <TabsContent value="properties">
          <ERC1400PropertiesForm
            config={config}
            handleInputChange={handleChange}
            handleSelectChange={handleSelectChange}
            handleSwitchChange={handleSwitchChange}
          />
        </TabsContent>

        <TabsContent value="structure">
          <div className="space-y-6">
            {/* Partitions */}
            <ERC1400PartitionsForm
              config={config}
              partitions={partitions}
              onPartitionsChange={setPartitions}
            />

            {/* Controllers */}
            <ERC1400ControllersForm
              config={config}
              controllers={controllers}
              onControllersChange={setControllers}
            />

            {/* Documents */}
            <ERC1400DocumentsForm
              config={config}
              documents={documents}
              onDocumentsChange={setDocuments}
            />

            {/* Corporate Actions Management */}
            <ERC1400CorporateActionsManagementForm
              config={config}
              corporateActions={corporateActions}
              onCorporateActionsChange={setCorporateActions}
            />

            {/* Custody Providers */}
            <ERC1400CustodyProvidersForm
              config={config}
              custodyProviders={custodyProviders}
              onCustodyProvidersChange={setCustodyProviders}
            />

            {/* Regulatory Filings */}
            <ERC1400RegulatoryFilingsForm
              config={config}
              regulatoryFilings={regulatoryFilings}
              onRegulatoryFilingsChange={setRegulatoryFilings}
            />

            {/* Partition Operators */}
            <ERC1400PartitionOperatorsForm
              config={config}
              partitions={partitions}
              partitionOperators={partitionOperators}
              onPartitionOperatorsChange={setPartitionOperators}
            />
          </div>
        </TabsContent>

        <TabsContent value="advanced">
          <div className="space-y-6">
            {/* Enhanced Compliance */}
            <ERC1400EnhancedComplianceForm
              config={config}
              handleSwitchChange={handleSwitchChange}
              handleInputChange={handleChange}
            />

            {/* Advanced Corporate Actions */}
            <ERC1400AdvancedCorporateActionsForm
              config={config}
              handleSwitchChange={handleSwitchChange}
            />

            {/* Advanced Governance */}
            <ERC1400AdvancedGovernanceForm
              config={config}
              handleSwitchChange={handleSwitchChange}
              handleInputChange={handleChange}
            />

            {/* Cross-border Trading */}
            <ERC1400CrossBorderTradingForm
              config={config}
              handleSwitchChange={handleSwitchChange}
              handleInputChange={handleChange}
            />

            {/* Enhanced Reporting */}
            <ERC1400EnhancedReportingForm
              config={config}
              handleSwitchChange={handleSwitchChange}
            />

            {/* Traditional Finance Integration */}
            <ERC1400TraditionalFinanceForm
              config={config}
              handleSwitchChange={handleSwitchChange}
              handleInputChange={handleChange}
            />

            {/* Advanced Risk Management */}
            <ERC1400RiskManagementForm
              config={config}
              handleSwitchChange={handleSwitchChange}
              handleInputChange={handleChange}
            />
          </div>
        </TabsContent>
      </Tabs>

      {/* Validation Summary */}
      {validationIssues.length > 0 && (
        <Card>
          <CardContent className="pt-6">
            <h3 className="text-sm font-medium mb-3">Validation Issues</h3>
            <div className="space-y-2">
              {validationIssues.map((issue, index) => (
                <div
                  key={index}
                  className={`flex items-center space-x-2 text-sm p-2 rounded ${
                    issue.severity === 'error' 
                      ? 'bg-red-50 border border-red-200 text-red-800'
                      : 'bg-yellow-50 border border-yellow-200 text-yellow-800'
                  }`}
                >
                  <AlertTriangle className="h-4 w-4" />
                  <span className="flex-1">{issue.message}</span>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => setActiveTab(issue.tab)}
                    className="text-xs"
                  >
                    Go to {issue.tab}
                  </Button>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default ERC1400Config;
