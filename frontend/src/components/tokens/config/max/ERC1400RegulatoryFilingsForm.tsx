import React, { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Button } from "@/components/ui/button";
import { Plus, Trash2, FileText, Calendar, AlertTriangle } from "lucide-react";
import { InfoCircledIcon } from "@radix-ui/react-icons";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";

interface RegulatoryFiling {
  id?: string;
  filingType: string;
  filingDate: string;
  filingJurisdiction: string;
  filingReference?: string;
  documentHash?: string;
  documentUri?: string;
  regulatoryBody?: string;
  complianceStatus: string;
  dueDate?: string;
  autoGenerated: boolean;
}

interface ERC1400RegulatoryFilingsFormProps {
  config: any;
  regulatoryFilings: RegulatoryFiling[];
  onRegulatoryFilingsChange: (filings: RegulatoryFiling[]) => void;
}

/**
 * ERC-1400 Regulatory Filings Form Component
 * Manages regulatory filing records from token_erc1400_regulatory_filings table
 */
export const ERC1400RegulatoryFilingsForm: React.FC<ERC1400RegulatoryFilingsFormProps> = ({
  config,
  regulatoryFilings,
  onRegulatoryFilingsChange,
}) => {
  const [selectedFiling, setSelectedFiling] = useState<number | null>(null);

  // Add a new regulatory filing
  const addRegulatoryFiling = () => {
    const newFiling: RegulatoryFiling = {
      filingType: "",
      filingDate: new Date().toISOString().split('T')[0],
      filingJurisdiction: "",
      complianceStatus: "pending",
      autoGenerated: false
    };
    onRegulatoryFilingsChange([...regulatoryFilings, newFiling]);
    setSelectedFiling(regulatoryFilings.length);
  };

  // Remove a regulatory filing
  const removeRegulatoryFiling = (index: number) => {
    const updatedFilings = regulatoryFilings.filter((_, i) => i !== index);
    onRegulatoryFilingsChange(updatedFilings);
    if (selectedFiling === index) {
      setSelectedFiling(null);
    }
  };

  // Update a regulatory filing
  const updateRegulatoryFiling = (index: number, field: keyof RegulatoryFiling, value: any) => {
    const updatedFilings = regulatoryFilings.map((filing, i) => 
      i === index ? { ...filing, [field]: value } : filing
    );
    onRegulatoryFilingsChange(updatedFilings);
  };

  const getFilingTypeIcon = (filingType: string) => {
    switch (filingType) {
      case "form_d": return "ðŸ“‹";
      case "reg_a": return "ðŸ“Š";
      case "10-k": return "ðŸ“ˆ";
      case "10-q": return "ðŸ“‰";
      case "8-k": return "âš¡";
      case "prospectus": return "ðŸ“–";
      case "offering_circular": return "ðŸ”„";
      default: return "ðŸ“„";
    }
  };

  const getComplianceStatusColor = (status: string) => {
    switch (status) {
      case "compliant": return "green";
      case "pending": return "yellow";
      case "overdue": return "red";
      case "filed": return "blue";
      case "rejected": return "red";
      default: return "gray";
    }
  };

  const isOverdue = (dueDate?: string) => {
    if (!dueDate) return false;
    return new Date(dueDate) < new Date();
  };

  return (
    <TooltipProvider>
      <Card>
        <CardHeader className="flex flex-row items-center justify-between">
          <CardTitle className="flex items-center">
            <FileText className="h-5 w-5 mr-2" />
            Regulatory Filings
            <Badge variant="outline" className="ml-2">
              {regulatoryFilings.length} filing{regulatoryFilings.length !== 1 ? 's' : ''}
            </Badge>
          </CardTitle>
          <Button onClick={addRegulatoryFiling} size="sm" variant="outline">
            <Plus className="h-4 w-4 mr-2" />
            New Filing
          </Button>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="text-sm text-muted-foreground mb-4">
            Track and manage regulatory filings required for your security token.
            Monitor compliance status, due dates, and filing confirmations.
          </div>

          {regulatoryFilings.length === 0 ? (
            <div className="text-center py-8 text-muted-foreground">
              <FileText className="h-12 w-12 mx-auto mb-4 opacity-50" />
              <div className="text-lg font-medium mb-2">No regulatory filings recorded</div>
              <div className="text-sm">
                Click "New Filing" to add your first regulatory filing
              </div>
            </div>
          ) : (
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              {/* Filings List */}
              <div className="lg:col-span-1 space-y-3">
                <h4 className="text-sm font-medium">Filings</h4>
                <div className="space-y-2">
                  {regulatoryFilings.map((filing, index) => (
                    <Card 
                      key={index} 
                      className={`cursor-pointer transition-colors ${
                        selectedFiling === index ? 'ring-2 ring-primary' : 'hover:bg-muted/50'
                      }`}
                      onClick={() => setSelectedFiling(index)}
                    >
                      <CardContent className="p-3">
                        <div className="flex items-center justify-between mb-2">
                          <div className="flex items-center space-x-2">
                            <span className="text-lg">{getFilingTypeIcon(filing.filingType)}</span>
                            <div className="flex space-x-1">
                              <Badge 
                                variant={getComplianceStatusColor(filing.complianceStatus) as any}
                                className="text-xs"
                              >
                                {filing.complianceStatus}
                              </Badge>
                              {filing.autoGenerated && (
                                <Badge variant="outline" className="text-xs">Auto</Badge>
                              )}
                              {isOverdue(filing.dueDate) && (
                                <Badge variant="destructive" className="text-xs">
                                  <AlertTriangle className="h-3 w-3 mr-1" />
                                  Overdue
                                </Badge>
                              )}
                            </div>
                          </div>
                          <Button
                            variant="ghost"
                            size="icon"
                            onClick={(e) => {
                              e.stopPropagation();
                              removeRegulatoryFiling(index);
                            }}
                            className="h-6 w-6"
                          >
                            <Trash2 className="h-3 w-3" />
                          </Button>
                        </div>
                        <div className="text-sm font-medium">
                          {filing.filingType.replace('_', ' ').toUpperCase() || 'Unknown Filing'}
                        </div>
                        <div className="text-xs text-muted-foreground">
                          {filing.filingJurisdiction} â€¢ {filing.filingDate}
                        </div>
                        {filing.regulatoryBody && (
                          <div className="text-xs text-muted-foreground">
                            {filing.regulatoryBody}
                          </div>
                        )}
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>

              {/* Filing Details */}
              <div className="lg:col-span-2">
                {selectedFiling !== null && (
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center">
                        Filing Details
                        <span className="ml-2 text-lg">
                          {getFilingTypeIcon(regulatoryFilings[selectedFiling].filingType)}
                        </span>
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-6">
                      {/* Basic Information */}
                      <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                        <div className="space-y-2">
                          <Label htmlFor="filingType" className="flex items-center">
                            Filing Type *
                            <Tooltip>
                              <TooltipTrigger className="ml-1.5">
                                <InfoCircledIcon className="h-3.5 w-3.5 text-muted-foreground" />
                              </TooltipTrigger>
                              <TooltipContent>
                                <p className="max-w-xs">Type of regulatory filing</p>
                              </TooltipContent>
                            </Tooltip>
                          </Label>
                          <Select
                            value={regulatoryFilings[selectedFiling].filingType}
                            onValueChange={(value) => updateRegulatoryFiling(selectedFiling, "filingType", value)}
                          >
                            <SelectTrigger>
                              <SelectValue placeholder="Select filing type" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="form_d">Form D</SelectItem>
                              <SelectItem value="reg_a">Regulation A</SelectItem>
                              <SelectItem value="reg_cf">Regulation CF</SelectItem>
                              <SelectItem value="10-k">Form 10-K</SelectItem>
                              <SelectItem value="10-q">Form 10-Q</SelectItem>
                              <SelectItem value="8-k">Form 8-K</SelectItem>
                              <SelectItem value="prospectus">Prospectus</SelectItem>
                              <SelectItem value="offering_circular">Offering Circular</SelectItem>
                              <SelectItem value="annual_report">Annual Report</SelectItem>
                              <SelectItem value="quarterly_report">Quarterly Report</SelectItem>
                              <SelectItem value="other">Other</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>

                        <div className="space-y-2">
                          <Label htmlFor="complianceStatus" className="flex items-center">
                            Compliance Status *
                            <Tooltip>
                              <TooltipTrigger className="ml-1.5">
                                <InfoCircledIcon className="h-3.5 w-3.5 text-muted-foreground" />
                              </TooltipTrigger>
                              <TooltipContent>
                                <p className="max-w-xs">Current compliance status of this filing</p>
                              </TooltipContent>
                            </Tooltip>
                          </Label>
                          <Select
                            value={regulatoryFilings[selectedFiling].complianceStatus}
                            onValueChange={(value) => updateRegulatoryFiling(selectedFiling, "complianceStatus", value)}
                          >
                            <SelectTrigger>
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="pending">Pending</SelectItem>
                              <SelectItem value="in_preparation">In Preparation</SelectItem>
                              <SelectItem value="filed">Filed</SelectItem>
                              <SelectItem value="accepted">Accepted</SelectItem>
                              <SelectItem value="compliant">Compliant</SelectItem>
                              <SelectItem value="rejected">Rejected</SelectItem>
                              <SelectItem value="overdue">Overdue</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                      </div>

                      <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                        <div className="space-y-2">
                          <Label htmlFor="filingJurisdiction" className="flex items-center">
                            Jurisdiction *
                            <Tooltip>
                              <TooltipTrigger className="ml-1.5">
                                <InfoCircledIcon className="h-3.5 w-3.5 text-muted-foreground" />
                              </TooltipTrigger>
                              <TooltipContent>
                                <p className="max-w-xs">Jurisdiction where filing is required</p>
                              </TooltipContent>
                            </Tooltip>
                          </Label>
                          <Input
                            id="filingJurisdiction"
                            placeholder="e.g., United States, Delaware"
                            value={regulatoryFilings[selectedFiling].filingJurisdiction}
                            onChange={(e) => updateRegulatoryFiling(selectedFiling, "filingJurisdiction", e.target.value)}
                            required
                          />
                        </div>

                        <div className="space-y-2">
                          <Label htmlFor="regulatoryBody" className="flex items-center">
                            Regulatory Body
                            <Tooltip>
                              <TooltipTrigger className="ml-1.5">
                                <InfoCircledIcon className="h-3.5 w-3.5 text-muted-foreground" />
                              </TooltipTrigger>
                              <TooltipContent>
                                <p className="max-w-xs">Regulatory body overseeing this filing</p>
                              </TooltipContent>
                            </Tooltip>
                          </Label>
                          <Select
                            value={regulatoryFilings[selectedFiling].regulatoryBody || ""}
                            onValueChange={(value) => updateRegulatoryFiling(selectedFiling, "regulatoryBody", value)}
                          >
                            <SelectTrigger>
                              <SelectValue placeholder="Select regulatory body" />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="sec">SEC (Securities and Exchange Commission)</SelectItem>
                              <SelectItem value="finra">FINRA</SelectItem>
                              <SelectItem value="cftc">CFTC</SelectItem>
                              <SelectItem value="fca">FCA (Financial Conduct Authority)</SelectItem>
                              <SelectItem value="esma">ESMA</SelectItem>
                              <SelectItem value="mifid">MiFID II</SelectItem>
                              <SelectItem value="other">Other</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                      </div>

                      {/* Important Dates */}
                      <div className="space-y-4">
                        <h5 className="text-sm font-medium text-muted-foreground flex items-center">
                          <Calendar className="h-4 w-4 mr-2" />
                          Important Dates
                        </h5>
                        
                        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
                          <div className="space-y-2">
                            <Label htmlFor="filingDate">Filing Date *</Label>
                            <Input
                              id="filingDate"
                              type="date"
                              value={regulatoryFilings[selectedFiling].filingDate}
                              onChange={(e) => updateRegulatoryFiling(selectedFiling, "filingDate", e.target.value)}
                              required
                            />
                          </div>

                          <div className="space-y-2">
                            <Label htmlFor="dueDate" className="flex items-center">
                              Due Date
                              {isOverdue(regulatoryFilings[selectedFiling].dueDate) && (
                                <AlertTriangle className="h-4 w-4 ml-2 text-red-500" />
                              )}
                            </Label>
                            <Input
                              id="dueDate"
                              type="date"
                              value={regulatoryFilings[selectedFiling].dueDate || ""}
                              onChange={(e) => updateRegulatoryFiling(selectedFiling, "dueDate", e.target.value)}
                              className={isOverdue(regulatoryFilings[selectedFiling].dueDate) ? "border-red-300" : ""}
                            />
                          </div>
                        </div>
                      </div>

                      {/* Filing Reference and Documents */}
                      <div className="space-y-4">
                        <h5 className="text-sm font-medium text-muted-foreground">Reference & Documents</h5>
                        
                        <div className="space-y-4">
                          <div className="space-y-2">
                            <Label htmlFor="filingReference" className="flex items-center">
                              Filing Reference
                              <Tooltip>
                                <TooltipTrigger className="ml-1.5">
                                  <InfoCircledIcon className="h-3.5 w-3.5 text-muted-foreground" />
                                </TooltipTrigger>
                                <TooltipContent>
                                  <p className="max-w-xs">Official reference number or identifier</p>
                                </TooltipContent>
                              </Tooltip>
                            </Label>
                            <Input
                              id="filingReference"
                              placeholder="e.g., 021-123456"
                              value={regulatoryFilings[selectedFiling].filingReference || ""}
                              onChange={(e) => updateRegulatoryFiling(selectedFiling, "filingReference", e.target.value)}
                            />
                          </div>

                          <div className="space-y-2">
                            <Label htmlFor="documentUri">Document URI</Label>
                            <Input
                              id="documentUri"
                              placeholder="https://..."
                              value={regulatoryFilings[selectedFiling].documentUri || ""}
                              onChange={(e) => updateRegulatoryFiling(selectedFiling, "documentUri", e.target.value)}
                            />
                          </div>

                          <div className="space-y-2">
                            <Label htmlFor="documentHash">Document Hash</Label>
                            <Input
                              id="documentHash"
                              placeholder="0x..."
                              value={regulatoryFilings[selectedFiling].documentHash || ""}
                              onChange={(e) => updateRegulatoryFiling(selectedFiling, "documentHash", e.target.value)}
                            />
                          </div>
                        </div>
                      </div>

                      {/* Settings */}
                      <div className="space-y-4">
                        <h5 className="text-sm font-medium text-muted-foreground">Settings</h5>
                        
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-2">
                            <span className="text-sm font-medium">Auto-Generated</span>
                            <Tooltip>
                              <TooltipTrigger>
                                <InfoCircledIcon className="h-3.5 w-3.5 text-muted-foreground" />
                              </TooltipTrigger>
                              <TooltipContent>
                                <p className="max-w-xs">Was this filing automatically generated by the system?</p>
                              </TooltipContent>
                            </Tooltip>
                          </div>
                          <Switch
                            checked={regulatoryFilings[selectedFiling].autoGenerated}
                            onCheckedChange={(checked) => updateRegulatoryFiling(selectedFiling, "autoGenerated", checked)}
                          />
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                )}
              </div>
            </div>
          )}

          {/* Summary */}
          {regulatoryFilings.length > 0 && (
            <Card className="bg-muted/50">
              <CardHeader>
                <CardTitle className="text-sm">Compliance Summary</CardTitle>
              </CardHeader>
              <CardContent className="space-y-2">
                <div className="text-xs text-muted-foreground">
                  Total Filings: {regulatoryFilings.length}
                </div>
                <div className="text-xs text-muted-foreground">
                  Compliant: {regulatoryFilings.filter(f => f.complianceStatus === 'compliant').length}
                </div>
                <div className="text-xs text-muted-foreground">
                  Pending: {regulatoryFilings.filter(f => f.complianceStatus === 'pending').length}
                </div>
                <div className="text-xs text-muted-foreground">
                  Overdue: {regulatoryFilings.filter(f => isOverdue(f.dueDate)).length}
                </div>
                <div className="text-xs text-muted-foreground">
                  Auto-Generated: {regulatoryFilings.filter(f => f.autoGenerated).length}
                </div>
              </CardContent>
            </Card>
          )}
        </CardContent>
      </Card>
    </TooltipProvider>
  );
};

export default ERC1400RegulatoryFilingsForm;
