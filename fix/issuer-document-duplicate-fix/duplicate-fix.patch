--- a/frontend/src/services/document/enhancedIssuerDocumentUploadService.ts
+++ b/frontend/src/services/document/enhancedIssuerDocumentUploadService.ts
@@ -116,14 +116,41 @@ export class EnhancedIssuerDocumentUploadService {
       throw new Error('Authentication required for document upload');
     }
 
-    try {
-      // Step 1: Atomic duplicate check and file upload
-      const fileName = generateUniqueFileName(issuerId, documentType, file);
-      const filePath = `issuers/${issuerId}/documents/${fileName}`;
+    try {
+      // CRITICAL FIX: Check for duplicates BEFORE uploading file
+      // This prevents both storage and database duplication
+      console.log('Checking for existing document before upload:', {
+        issuerId,
+        documentType,
+        documentName
+      });
+      
+      const { data: existingDocs, error: checkError } = await supabase
+        .from('issuer_documents')
+        .select('id, file_url, metadata')
+        .eq('issuer_id', issuerId)
+        .eq('document_type', documentType)
+        .eq('document_name', documentName)
+        .eq('status', 'active')
+        .order('created_at', { ascending: false })
+        .limit(1);
 
-      // Upload file first (easier to rollback database than storage)
+      if (checkError) {
+        throw new Error(`Database check failed: ${checkError.message}`);
+      }
+
+      // If document already exists, update it without creating a new storage entry
+      if (existingDocs && existingDocs.length > 0) {
+        console.log('Document already exists - updating:', existingDocs[0].id);
+        const existingDoc = existingDocs[0];
+        
+        // Step 1: Generate new file name and path
+        const fileName = generateUniqueFileName(issuerId, documentType, file);
+        const filePath = `issuers/${issuerId}/documents/${fileName}`;
+
+        // Step 2: Upload the new file
       const { data: uploadData, error: uploadError } = await supabase.storage
-        .from('issuer-documents')
+        .from('issuer-documents')
         .upload(filePath, file, {
           upsert: false, // Never overwrite files
           duplex: 'half'
@@ -147,51 +174,55 @@ export class EnhancedIssuerDocumentUploadService {
         throw new Error('Failed to generate download URL');
       }
 
-      // Step 2: Check for existing document and handle appropriately
-      const { data: existingDocs, error: checkError } = await supabase
-        .from('issuer_documents')
-        .select('id, file_url, metadata')
-        .eq('issuer_id', issuerId)
-        .eq('document_type', documentType)
-        .eq('document_name', documentName)
-        .eq('status', 'active')
-        .order('created_at', { ascending: false })
-        .limit(1);
+        // Step 4: Clean up old file from storage
+        if (existingDoc.metadata?.upload_path) {
+          await supabase.storage
+            .from('issuer-documents')
+            .remove([existingDoc.metadata.upload_path]);
+        }
 
-      if (checkError) {
-        // Clean up uploaded file
-        await supabase.storage.from('issuer-documents').remove([filePath]);
-        throw new Error(`Database check failed: ${checkError.message}`);
-      }
+        // Step 5: Update existing document record
+        const { data: updateData, error: updateError } = await supabase
+          .from('issuer_documents')
+          .update({
+            file_url: urlData.publicUrl,
+            is_public: isPublic,
+            metadata: {
+              original_filename: file.name,
+              file_size: file.size,
+              file_type: file.type,
+              upload_path: filePath,
+              upload_timestamp: new Date().toISOString(),
+              replaced_file: existingDoc.file_url,
+              version: (existingDoc.metadata?.version || 1) + 1
+            },
+            updated_at: new Date().toISOString(),
+            updated_by: userId,
+            version: (existingDoc.metadata?.version || 1) + 1
+          })
+          .eq('id', existingDoc.id)
+          .select('id')
+          .single();

-      let isUpdate = false;
-      let documentId: string;
+        if (updateError) {
+          // Clean up uploaded file
+          await supabase.storage.from('issuer-documents').remove([filePath]);
+          throw new Error(`Failed to update document record: ${updateError.message}`);
+        }

-      if (existingDocs && existingDocs.length > 0) {
-        // Document exists - update it
-        isUpdate = true;
-        const existingDoc = existingDocs[0];
-        
-        // Clean up old file from storage
-        if (existingDoc.metadata?.upload_path) {
-          await supabase.storage
-            .from('issuer-documents')
-            .remove([existingDoc.metadata.upload_path]);
-        }
+        return {
+          success: true,
+          documentId: updateData.id,
+          filePath,
+          downloadUrl: urlData.publicUrl,
+          isUpdate: true,
+          isDuplicate: false
+        };
+      }

-        // Update existing document record
-        const { data: updateData, error: updateError } = await supabase
-          .from('issuer_documents')
-          .update({
-            file_url: urlData.publicUrl,
-            is_public: isPublic,
-            metadata: {
-              original_filename: file.name,
-              file_size: file.size,
-              file_type: file.type,
-              upload_path: filePath,
-              upload_timestamp: new Date().toISOString(),
-              replaced_file: existingDoc.file_url
-            },
-            updated_at: new Date().toISOString(),
-            updated_by: userId,
-            version: (existingDoc.metadata?.version || 1) + 1
-          })
-          .eq('id', existingDoc.id)
-          .select('id')
-          .single();
+      // Document doesn't exist, create a new one
+      console.log('Document does not exist - creating new record');
+      
+      // Step 1: Generate file name and path
+      const fileName = generateUniqueFileName(issuerId, documentType, file);
+      const filePath = `issuers/${issuerId}/documents/${fileName}`;

-        if (updateError) {
-          // Clean up uploaded file
-          await supabase.storage.from('issuer-documents').remove([filePath]);
-          throw new Error(`Failed to update document record: ${updateError.message}`);
-        }
+      // Step 2: Upload file first (easier to rollback database than storage)
+      const { data: uploadData, error: uploadError } = await supabase.storage
+        .from('issuer-documents')
+        .upload(filePath, file, {
+          upsert: false, // Never overwrite files
+          duplex: 'half'
+        });

-        documentId = updateData.id;
-      } else {
-        // New document - insert it
+      if (uploadError) {
+        if (uploadError.message.includes('already exists')) {
+          throw new Error('File upload conflict - please try again with a different name');
+        }
+        throw new Error(`File upload failed: ${uploadError.message}`);
+      }
+
+      // Step 3: Get the public URL for the uploaded file
+      const { data: urlData } = supabase.storage
+        .from('issuer-documents')
+        .getPublicUrl(filePath);
+
+      if (!urlData.publicUrl) {
+        // Clean up uploaded file
+        await supabase.storage.from('issuer-documents').remove([filePath]);
+        throw new Error('Failed to generate download URL');
+      }
+
+      // Step 4: Insert the new document record
         const { data: insertData, error: insertError } = await supabase
           .from('issuer_documents')
           .insert({
@@ -204,38 +235,53 @@ export class EnhancedIssuerDocumentUploadService {
               original_filename: file.name,
               file_size: file.size,
               file_type: file.type,
-              upload_path: filePath,
-              upload_timestamp: new Date().toISOString()
+              upload_path: filePath,
+              upload_timestamp: new Date().toISOString(),
+              version: 1
             },
             created_by: userId,
             updated_by: userId,
             version: 1
           })
           .select('id')
           .single();

         if (insertError) {
           // Clean up uploaded file
           await supabase.storage.from('issuer-documents').remove([filePath]);
           
-          if (insertError.code === '23505') { // Unique constraint violation
+          // Check for race conditions - document might have been created between our check and insert
+          if (insertError.code === '23505') { // Unique constraint violation
+            console.warn('Race condition detected - document was created between check and insert');
+            
+            // Try to handle this gracefully by checking again and returning the existing record
+            const { data: raceCheckData } = await supabase
+              .from('issuer_documents')
+              .select('id')
+              .eq('issuer_id', issuerId)
+              .eq('document_type', documentType)
+              .eq('document_name', documentName)
+              .single();
+              
+            if (raceCheckData?.id) {
+              return {
+                success: true,
+                documentId: raceCheckData.id,
+                isDuplicate: true,
+                error: 'Document was created by another process simultaneously'
+              };
+            }
+            
             throw new Error(`A document named "${documentName}" already exists for this type. Please use a different name.`);
           }
           
           throw new Error(`Failed to save document record: ${insertError.message}`);
         }

-        documentId = insertData.id;
-      }
-
-      // Step 3: Verify the upload was successful by checking the record exists
+      // Step 5: Verify the upload was successful by checking the record exists
       const { data: verificationData, error: verificationError } = await supabase
         .from('issuer_documents')
         .select('id, file_url')
-        .eq('id', documentId)
+        .eq('id', insertData.id)
         .single();

       if (verificationError || !verificationData) {
@@ -243,12 +289,16 @@ export class EnhancedIssuerDocumentUploadService {
         await supabase.storage.from('issuer-documents').remove([filePath]);
         throw new Error('Upload verification failed - please try again');
       }
+
+      console.log('Document created successfully:', insertData.id);
       
       return {
         success: true,
-        documentId,
+        documentId: insertData.id,
         filePath,
         downloadUrl: urlData.publicUrl,
-        isUpdate,
+        isUpdate: false,
         isDuplicate: false
       };
